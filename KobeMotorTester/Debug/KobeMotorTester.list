
KobeMotorTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1fc  0800a1fc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1fc  0800a1fc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1fc  0800a1fc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001d4  0800a3d8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800a3d8  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d847  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af7  00000000  00000000  0003da4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00041548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00042920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d64  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001736d  00000000  00000000  000648d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d2c  00000000  00000000  0007bc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014196d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005234  00000000  00000000  001419c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a18c 	.word	0x0800a18c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800a18c 	.word	0x0800a18c

08000218 <clamp>:
		.delimiter = 0xAAAA

};


int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return maxValue;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < minValue) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return minValue;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}

	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d116      	bne.n	800028c <CDC_On_Receive+0x40>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800025e:	220a      	movs	r2, #10
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <CDC_On_Receive+0x48>)
 8000264:	f009 ff7c 	bl	800a160 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <CDC_On_Receive+0x48>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000270:	4293      	cmp	r3, r2
 8000272:	d102      	bne.n	800027a <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <CDC_On_Receive+0x4c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
    }
    if (command.delimiter == 0xBBBB) { // (9)
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <CDC_On_Receive+0x48>)
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000282:	4293      	cmp	r3, r2
 8000284:	d102      	bne.n	800028c <CDC_On_Receive+0x40>
          sendData = 1;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <CDC_On_Receive+0x50>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
        }
  }
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200001f0 	.word	0x200001f0
 8000298:	200001fa 	.word	0x200001fa
 800029c:	200001fb 	.word	0x200001fb

080002a0 <PIDcontrol>:

int32_t PIDcontrol(MotorControl* control, int16_t position){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position; //Lahutab vana positsiooni, et saada kiiruse
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	821a      	strh	r2, [r3, #16]
	control->position = position; //Salvestab asendi struktuuri
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	887a      	ldrh	r2, [r7, #2]
 80002c4:	805a      	strh	r2, [r3, #2]
	int32_t error = control->speed -control->positionChange; //Kui suur on erinevus kiiruste vahel
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	control->integraal += error;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]

	return control->p_gain * error + control->i_gain * control->integraal;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	fb03 f202 	mul.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f8:	4619      	mov	r1, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	fb03 f301 	mul.w	r3, r3, r1
 8000302:	4413      	add	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	if (enable_pid == 1){
 8000318:	4b51      	ldr	r3, [pc, #324]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	f040 809a 	bne.w	8000456 <HAL_TIM_PeriodElapsedCallback+0x146>
				motor1Control.newspeed = new_speed;
				HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, 1);
			}

		TIM4->CCR1 = motor1Control.newspeed;*/
		position = (int16_t)TIM1->CNT;
 8000322:	4b50      	ldr	r3, [pc, #320]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000326:	81fb      	strh	r3, [r7, #14]
		int32_t pwmValue = PIDcontrol(&motor1Control, position);
 8000328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800032c:	4619      	mov	r1, r3
 800032e:	484e      	ldr	r0, [pc, #312]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000330:	f7ff ffb6 	bl	80002a0 <PIDcontrol>
 8000334:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	0fdb      	lsrs	r3, r3, #31
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	2108      	movs	r1, #8
 8000340:	484a      	ldr	r0, [pc, #296]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000342:	f001 fbbb 	bl	8001abc <HAL_GPIO_WritePin>
		TIM4->CCR1 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	2b00      	cmp	r3, #0
 800034a:	bfb8      	it	lt
 800034c:	425b      	neglt	r3, r3
 800034e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff5f 	bl	8000218 <clamp>
 800035a:	4603      	mov	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b44      	ldr	r3, [pc, #272]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000360:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, GPIO_PIN_SET);
		//TIM4->CCR1 = TIM4->CCR1 > 65500 ? 0 : TIM4->CCR1 + 100;

		encoder.m1_pwm = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	2b00      	cmp	r3, #0
 8000366:	bfb8      	it	lt
 8000368:	425b      	neglt	r3, r3
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff51 	bl	8000218 <clamp>
 8000376:	4603      	mov	r3, r0
 8000378:	b29a      	uxth	r2, r3
 800037a:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800037c:	80da      	strh	r2, [r3, #6]

		position = (int16_t)TIM2->CNT;
 800037e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000384:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor2Control, position);
 8000386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800038a:	4619      	mov	r1, r3
 800038c:	483a      	ldr	r0, [pc, #232]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800038e:	f7ff ff87 	bl	80002a0 <PIDcontrol>
 8000392:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	0fdb      	lsrs	r3, r3, #31
 8000398:	b2db      	uxtb	r3, r3
 800039a:	461a      	mov	r2, r3
 800039c:	2110      	movs	r1, #16
 800039e:	4833      	ldr	r0, [pc, #204]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80003a0:	f001 fb8c 	bl	8001abc <HAL_GPIO_WritePin>
		TIM4->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	bfb8      	it	lt
 80003aa:	425b      	neglt	r3, r3
 80003ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff30 	bl	8000218 <clamp>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b2c      	ldr	r3, [pc, #176]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80003be:	639a      	str	r2, [r3, #56]	; 0x38

		encoder.m2_pwm = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff22 	bl	8000218 <clamp>
 80003d4:	4603      	mov	r3, r0
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	4b26      	ldr	r3, [pc, #152]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80003da:	811a      	strh	r2, [r3, #8]
		position = (int16_t)TIM3->CNT;
 80003dc:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80003de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e0:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor3Control, position);
 80003e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003e6:	4619      	mov	r1, r3
 80003e8:	4825      	ldr	r0, [pc, #148]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80003ea:	f7ff ff59 	bl	80002a0 <PIDcontrol>
 80003ee:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	0fdb      	lsrs	r3, r3, #31
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	2120      	movs	r1, #32
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80003fc:	f001 fb5e 	bl	8001abc <HAL_GPIO_WritePin>
		TIM4->CCR3 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	2b00      	cmp	r3, #0
 8000404:	bfb8      	it	lt
 8000406:	425b      	neglt	r3, r3
 8000408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff02 	bl	8000218 <clamp>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800041a:	63da      	str	r2, [r3, #60]	; 0x3c
						HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 1);
					}

		TIM4->CCR3 = motor3Control.newspeed;*/

		timer+=1;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000426:	801a      	strh	r2, [r3, #0]
		if (timer == 50){
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	2b32      	cmp	r3, #50	; 0x32
 800042e:	d112      	bne.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x146>
			timer = 0;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000432:	2200      	movs	r2, #0
 8000434:	801a      	strh	r2, [r3, #0]
			enable_pid = 0;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000438:	2200      	movs	r2, #0
 800043a:	801a      	strh	r2, [r3, #0]

			motor1Control.speed = 0;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800043e:	2200      	movs	r2, #0
 8000440:	801a      	strh	r2, [r3, #0]
			motor2Control.speed = 0;
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000444:	2200      	movs	r2, #0
 8000446:	801a      	strh	r2, [r3, #0]
			motor3Control.speed = 0;
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
			TIM8->CCR1 = 1800;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000450:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000454:	635a      	str	r2, [r3, #52]	; 0x34

		}

	}

}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200001fe 	.word	0x200001fe
 8000464:	40012c00 	.word	0x40012c00
 8000468:	20000000 	.word	0x20000000
 800046c:	48000400 	.word	0x48000400
 8000470:	40000800 	.word	0x40000800
 8000474:	20000044 	.word	0x20000044
 8000478:	20000014 	.word	0x20000014
 800047c:	40000400 	.word	0x40000400
 8000480:	20000028 	.word	0x20000028
 8000484:	200001fc 	.word	0x200001fc
 8000488:	40013400 	.word	0x40013400

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fee5 	bl	800125e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f8d8 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 fc44 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 800049c:	f000 fbf6 	bl	8000c8c <MX_DMA_Init>
  MX_TIM2_Init();
 80004a0:	f000 f994 	bl	80007cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004a4:	f000 f9e6 	bl	8000874 <MX_TIM3_Init>
  MX_TIM1_Init();
 80004a8:	f000 f936 	bl	8000718 <MX_TIM1_Init>
  MX_TIM4_Init();
 80004ac:	f000 fa38 	bl	8000920 <MX_TIM4_Init>
  MX_TIM8_Init();
 80004b0:	f000 fade 	bl	8000a70 <MX_TIM8_Init>
  MX_TIM6_Init();
 80004b4:	f000 faa4 	bl	8000a00 <MX_TIM6_Init>
  MX_USB_Device_Init();
 80004b8:	f009 f934 	bl	8009724 <MX_USB_Device_Init>
  MX_TIM17_Init();
 80004bc:	f000 fb6c 	bl	8000b98 <MX_TIM17_Init>
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 0);
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 1);



  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80004c0:	2100      	movs	r1, #0
 80004c2:	484e      	ldr	r0, [pc, #312]	; (80005fc <main+0x170>)
 80004c4:	f004 f87a 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004c8:	2104      	movs	r1, #4
 80004ca:	484d      	ldr	r0, [pc, #308]	; (8000600 <main+0x174>)
 80004cc:	f004 fa1c 	bl	8004908 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d0:	2104      	movs	r1, #4
 80004d2:	484c      	ldr	r0, [pc, #304]	; (8000604 <main+0x178>)
 80004d4:	f004 fa18 	bl	8004908 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d8:	2104      	movs	r1, #4
 80004da:	484b      	ldr	r0, [pc, #300]	; (8000608 <main+0x17c>)
 80004dc:	f004 fa14 	bl	8004908 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004e0:	2100      	movs	r1, #0
 80004e2:	484a      	ldr	r0, [pc, #296]	; (800060c <main+0x180>)
 80004e4:	f004 f86a 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004e8:	2104      	movs	r1, #4
 80004ea:	4848      	ldr	r0, [pc, #288]	; (800060c <main+0x180>)
 80004ec:	f004 f866 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004f0:	2108      	movs	r1, #8
 80004f2:	4846      	ldr	r0, [pc, #280]	; (800060c <main+0x180>)
 80004f4:	f004 f862 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4845      	ldr	r0, [pc, #276]	; (8000610 <main+0x184>)
 80004fc:	f004 f85e 	bl	80045bc <HAL_TIM_PWM_Start>



  TIM17->CCR1 = 65535;
 8000500:	4b44      	ldr	r3, [pc, #272]	; (8000614 <main+0x188>)
 8000502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 ff19 	bl	8001340 <HAL_Delay>
  TIM17->CCR1 = 61750;
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <main+0x188>)
 8000510:	f24f 1236 	movw	r2, #61750	; 0xf136
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f000 ff12 	bl	8001340 <HAL_Delay>
  TIM17->CCR1 = 65535;
 800051c:	4b3d      	ldr	r3, [pc, #244]	; (8000614 <main+0x188>)
 800051e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR1 = 0;
 8000524:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <main+0x18c>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800052a:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <main+0x18c>)
 800052c:	2200      	movs	r2, #0
 800052e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000530:	4b39      	ldr	r3, [pc, #228]	; (8000618 <main+0x18c>)
 8000532:	2200      	movs	r2, #0
 8000534:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM8->CCR1 = 1800;
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <main+0x190>)
 8000538:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  //TIM4->CCR2 = 20000;
  //TIM4->CCR1 = 10000;
  //TIM4->CCR2 = 10000;
  //TIM4->CCR3 = 9000;

  HAL_TIM_Base_Start_IT(&htim6);
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <main+0x194>)
 8000540:	f003 ff7a 	bl	8004438 <HAL_TIM_Base_Start_IT>
	  TIM4->CCR1 = 5000;
	  TIM4->CCR2 = 5000;
	  TIM4->CCR3 = 5000;
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/

	  if (sendData) {
 8000544:	4b37      	ldr	r3, [pc, #220]	; (8000624 <main+0x198>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00d      	beq.n	800056a <main+0xde>
		  sendData = 0;
 800054e:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x198>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
		  TIM17->CCR1 = 61750;
 8000554:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <main+0x188>)
 8000556:	f24f 1236 	movw	r2, #61750	; 0xf136
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 800055c:	2064      	movs	r0, #100	; 0x64
 800055e:	f000 feef 	bl	8001340 <HAL_Delay>
	   	  TIM17->CCR1 = 65535;
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <main+0x188>)
 8000564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000568:	635a      	str	r2, [r3, #52]	; 0x34

	  }



	  if (isCommandReceived) { // (2)
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0x19c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0e7      	beq.n	8000544 <main+0xb8>
	        isCommandReceived = 0;
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <main+0x19c>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3)
 800057a:	2104      	movs	r1, #4
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f001 fab4 	bl	8001aec <HAL_GPIO_TogglePin>
	        motor1Control.speed = command.speed1;
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <main+0x1a0>)
 8000586:	f9b3 2000 	ldrsh.w	r2, [r3]
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <main+0x1a4>)
 800058c:	801a      	strh	r2, [r3, #0]
	        motor2Control.speed = command.speed2;
 800058e:	4b27      	ldr	r3, [pc, #156]	; (800062c <main+0x1a0>)
 8000590:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <main+0x1a8>)
 8000596:	801a      	strh	r2, [r3, #0]
	        motor3Control.speed = command.speed3;
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <main+0x1a0>)
 800059a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <main+0x1ac>)
 80005a0:	801a      	strh	r2, [r3, #0]
					TIM4->CCR3 = motor3Control.speed;
					HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 1);
				}*/


	        if (command.throwerSpeed<1800 || command.throwerSpeed>3999){
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <main+0x1a0>)
 80005a4:	88db      	ldrh	r3, [r3, #6]
 80005a6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80005aa:	d304      	bcc.n	80005b6 <main+0x12a>
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x1a0>)
 80005ae:	88db      	ldrh	r3, [r3, #6]
 80005b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005b4:	d304      	bcc.n	80005c0 <main+0x134>
	        	TIM8->CCR1 = 1800;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0x190>)
 80005b8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
 80005be:	e003      	b.n	80005c8 <main+0x13c>
	        }
	        else{
	        	TIM8->CCR1 = command.throwerSpeed;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0x1a0>)
 80005c2:	88da      	ldrh	r2, [r3, #6]
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <main+0x190>)
 80005c6:	635a      	str	r2, [r3, #52]	; 0x34
	        }

  	        timer = 0;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <main+0x1b0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	801a      	strh	r2, [r3, #0]
  	        enable_pid = 1;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <main+0x1b4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	801a      	strh	r2, [r3, #0]

	        feedback.speed1 = motor1Control.speed; // (4)
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0x1a4>)
 80005d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0x1b8>)
 80005dc:	801a      	strh	r2, [r3, #0]
	        feedback.speed2 = motor2Control.speed;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0x1a8>)
 80005e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <main+0x1b8>)
 80005e6:	805a      	strh	r2, [r3, #2]
	        feedback.speed3 = motor3Control.speed;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0x1ac>)
 80005ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0x1b8>)
 80005f0:	809a      	strh	r2, [r3, #4]

	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 80005f2:	2108      	movs	r1, #8
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x1b8>)
 80005f6:	f009 f957 	bl	80098a8 <CDC_Transmit_FS>
	  if (sendData) {
 80005fa:	e7a3      	b.n	8000544 <main+0xb8>
 80005fc:	2000051c 	.word	0x2000051c
 8000600:	20000600 	.word	0x20000600
 8000604:	2000064c 	.word	0x2000064c
 8000608:	20000568 	.word	0x20000568
 800060c:	200004d0 	.word	0x200004d0
 8000610:	20000424 	.word	0x20000424
 8000614:	40014800 	.word	0x40014800
 8000618:	40012c00 	.word	0x40012c00
 800061c:	40013400 	.word	0x40013400
 8000620:	200005b4 	.word	0x200005b4
 8000624:	200001fb 	.word	0x200001fb
 8000628:	200001fa 	.word	0x200001fa
 800062c:	200001f0 	.word	0x200001f0
 8000630:	20000000 	.word	0x20000000
 8000634:	20000014 	.word	0x20000014
 8000638:	20000028 	.word	0x20000028
 800063c:	200001fc 	.word	0x200001fc
 8000640:	200001fe 	.word	0x200001fe
 8000644:	2000003c 	.word	0x2000003c

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0a4      	sub	sp, #144	; 0x90
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000652:	2238      	movs	r2, #56	; 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fd90 	bl	800a17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fd82 	bl	800a17c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000678:	2000      	movs	r0, #0
 800067a:	f002 fee5 	bl	8003448 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800067e:	2322      	movs	r3, #34	; 0x22
 8000680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000698:	2301      	movs	r3, #1
 800069a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800069c:	2314      	movs	r3, #20
 800069e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 ff79 	bl	80035b0 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c4:	f000 fb82 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e0:	2104      	movs	r1, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fa7c 	bl	8003be0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ee:	f000 fb6d 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fc52 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 fb5f 	bl	8000dcc <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3790      	adds	r7, #144	; 0x90
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2224      	movs	r2, #36	; 0x24
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f009 fd28 	bl	800a17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_TIM1_Init+0xac>)
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <MX_TIM1_Init+0xb0>)
 800073a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_TIM1_Init+0xac>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_TIM1_Init+0xac>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_TIM1_Init+0xac>)
 800074a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_TIM1_Init+0xac>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_TIM1_Init+0xac>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_TIM1_Init+0xac>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000762:	2303      	movs	r3, #3
 8000764:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800077a:	2301      	movs	r3, #1
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM1_Init+0xac>)
 800078e:	f004 f815 	bl	80047bc <HAL_TIM_Encoder_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 fb18 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM1_Init+0xac>)
 80007ae:	f004 ff9d 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007b8:	f000 fb08 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000600 	.word	0x20000600
 80007c8:	40012c00 	.word	0x40012c00

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2224      	movs	r2, #36	; 0x24
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fcce 	bl	800a17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0xa4>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM2_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000812:	2303      	movs	r3, #3
 8000814:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800082a:	2301      	movs	r3, #1
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM2_Init+0xa4>)
 800083e:	f003 ffbd 	bl	80047bc <HAL_TIM_Encoder_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000848:	f000 fac0 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0xa4>)
 800085a:	f004 ff47 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000864:	f000 fab2 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000064c 	.word	0x2000064c

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2224      	movs	r2, #36	; 0x24
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f009 fc7a 	bl	800a17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_TIM3_Init+0xa4>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <MX_TIM3_Init+0xa8>)
 8000896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_TIM3_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008e4:	f003 ff6a 	bl	80047bc <HAL_TIM_Encoder_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008ee:	f000 fa6d 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0xa4>)
 8000900:	f004 fef4 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800090a:	f000 fa5f 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000568 	.word	0x20000568
 800091c:	40000400 	.word	0x40000400

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]
 8000942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <MX_TIM4_Init+0xd8>)
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MX_TIM4_Init+0xdc>)
 8000948:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_TIM4_Init+0xd8>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_TIM4_Init+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_TIM4_Init+0xd8>)
 8000958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_TIM4_Init+0xd8>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_TIM4_Init+0xd8>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800096a:	4823      	ldr	r0, [pc, #140]	; (80009f8 <MX_TIM4_Init+0xd8>)
 800096c:	f003 fdce 	bl	800450c <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000976:	f000 fa29 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_TIM4_Init+0xd8>)
 800098a:	f004 feaf 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000994:	f000 fa1a 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_TIM4_Init+0xd8>)
 80009b0:	f004 f9b8 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009ba:	f000 fa07 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM4_Init+0xd8>)
 80009c6:	f004 f9ad 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80009d0:	f000 f9fc 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2208      	movs	r2, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <MX_TIM4_Init+0xd8>)
 80009dc:	f004 f9a2 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80009e6:	f000 f9f1 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <MX_TIM4_Init+0xd8>)
 80009ec:	f000 fb30 	bl	8001050 <HAL_TIM_MspPostInit>

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200004d0 	.word	0x200004d0
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <MX_TIM6_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a18:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a34:	f003 fca8 	bl	8004388 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a3e:	f000 f9c5 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a50:	f004 fe4c 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 f9b7 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200005b4 	.word	0x200005b4
 8000a6c:	40001000 	.word	0x40001000

08000a70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b098      	sub	sp, #96	; 0x60
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2234      	movs	r2, #52	; 0x34
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f009 fb6d 	bl	800a17c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000aa4:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <MX_TIM8_Init+0x124>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000aaa:	224f      	movs	r2, #79	; 0x4f
 8000aac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39999;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000ab6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000aba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000ad0:	f003 fd1c 	bl	800450c <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f977 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aee:	4619      	mov	r1, r3
 8000af0:	4827      	ldr	r0, [pc, #156]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000af2:	f004 fdfb 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000afc:	f000 f966 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b20:	2200      	movs	r2, #0
 8000b22:	4619      	mov	r1, r3
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000b26:	f004 f8fd 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b30:	f000 f94c 	bl	8000dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000b72:	f004 fe3d 	bl	80057f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000b7c:	f000 f926 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM8_Init+0x120>)
 8000b82:	f000 fa65 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3760      	adds	r7, #96	; 0x60
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000424 	.word	0x20000424
 8000b94:	40013400 	.word	0x40013400

08000b98 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2234      	movs	r2, #52	; 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f009 fadf 	bl	800a17c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bc0:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <MX_TIM17_Init+0xf0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bec:	f003 fbcc 	bl	8004388 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bf6:	f000 f8e9 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bfa:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bfc:	f003 fc86 	bl	800450c <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c06:	f000 f8e1 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	; 0x60
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c30:	f004 f878 	bl	8004d24 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c3a:	f000 f8c7 	bl	8000dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c66:	f004 fdc3 	bl	80057f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c70:	f000 f8ac 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c76:	f000 f9eb 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000051c 	.word	0x2000051c
 8000c88:	40014800 	.word	0x40014800

08000c8c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6493      	str	r3, [r2, #72]	; 0x48
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_DMA_Init+0x8c>)
 8000cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <MX_DMA_Init+0x94>)
 8000cc6:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_DMA_Init+0x90>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce6:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cee:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_DMA_Init+0x90>)
 8000cf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_DMA_Init+0x90>)
 8000d00:	f000 fc50 	bl	80015a4 <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000d0a:	f000 f85f 	bl	8000dcc <Error_Handler>
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	20000470 	.word	0x20000470
 8000d20:	40020008 	.word	0x40020008

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0xa0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fea3 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_D_Pin|M2_D_Pin|M3_D_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2138      	movs	r1, #56	; 0x38
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <MX_GPIO_Init+0xa4>)
 8000d7c:	f000 fe9e 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fd0d 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_D_Pin M2_D_Pin M3_D_Pin */
  GPIO_InitStruct.Pin = M1_D_Pin|M2_D_Pin|M3_D_Pin;
 8000d9e:	2338      	movs	r3, #56	; 0x38
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_GPIO_Init+0xa4>)
 8000db6:	f000 fcff 	bl	80017b8 <HAL_GPIO_Init>

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e0e:	f002 fbbf 	bl	8003590 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a47      	ldr	r2, [pc, #284]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12a      	bne.n	8000e98 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e42:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a40      	ldr	r2, [pc, #256]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e84:	2306      	movs	r3, #6
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f000 fc91 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e96:	e05c      	b.n	8000f52 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea0:	d129      	bne.n	8000ef6 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f000 fc62 	bl	80017b8 <HAL_GPIO_Init>
}
 8000ef4:	e02d      	b.n	8000f52 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x144>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d128      	bne.n	8000f52 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f30:	2350      	movs	r3, #80	; 0x50
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f40:	2302      	movs	r3, #2
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f000 fc33 	bl	80017b8 <HAL_GPIO_Init>
}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40000400 	.word	0x40000400

08000f68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201e      	movs	r0, #30
 8000f98:	f000 facf 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f9c:	201e      	movs	r0, #30
 8000f9e:	f000 fae6 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fa2:	e010      	b.n	8000fc6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x70>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40013400 	.word	0x40013400

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_TIM_Base_MspInit+0x68>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d114      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2036      	movs	r0, #54	; 0x36
 800100c:	f000 fa95 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001010:	2036      	movs	r0, #54	; 0x36
 8001012:	f000 faac 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001016:	e010      	b.n	800103a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x70>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10b      	bne.n	800103a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6613      	str	r3, [r2, #96]	; 0x60
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000
 8001048:	40021000 	.word	0x40021000
 800104c:	40014800 	.word	0x40014800

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <HAL_TIM_MspPostInit+0xf4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11d      	bne.n	80010ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a34      	ldr	r2, [pc, #208]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800108a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800109c:	2302      	movs	r3, #2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4829      	ldr	r0, [pc, #164]	; (800114c <HAL_TIM_MspPostInit+0xfc>)
 80010a8:	f000 fb86 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80010ac:	e045      	b.n	800113a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a27      	ldr	r2, [pc, #156]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d11e      	bne.n	80010f6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80010e2:	2302      	movs	r3, #2
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f000 fb62 	bl	80017b8 <HAL_GPIO_Init>
}
 80010f4:	e021      	b.n	800113a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM17)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_TIM_MspPostInit+0x104>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11c      	bne.n	800113a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_TIM_MspPostInit+0xf8>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f000 fb3f 	bl	80017b8 <HAL_GPIO_Init>
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40000800 	.word	0x40000800
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400
 8001150:	40013400 	.word	0x40013400
 8001154:	40014800 	.word	0x40014800

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8ae 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USB_LP_IRQHandler+0x10>)
 80011b2:	f000 fdbc 	bl	8001d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000133c 	.word	0x2000133c

080011c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM4_IRQHandler+0x10>)
 80011c6:	f003 fc2d 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200004d0 	.word	0x200004d0

080011d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM6_DAC_IRQHandler+0x10>)
 80011da:	f003 fc23 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200005b4 	.word	0x200005b4

080011e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f008 ff6d 	bl	800a118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123e:	f7ff f925 	bl	800048c <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001250:	0800a204 	.word	0x0800a204
  ldr r2, =_sbss
 8001254:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001258:	20001630 	.word	0x20001630

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>

0800125e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f95b 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	200f      	movs	r0, #15
 8001270:	f000 f80e 	bl	8001290 <HAL_InitTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e001      	b.n	8001284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001280:	f7ff fdaa 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001284:	79fb      	ldrb	r3, [r7, #7]

}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_InitTick+0x68>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d022      	beq.n	80012ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_InitTick+0x6c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_InitTick+0x68>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f966 	bl	800158a <HAL_SYSTICK_Config>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10f      	bne.n	80012e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	d809      	bhi.n	80012de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	2200      	movs	r2, #0
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295
 80012d2:	f000 f932 	bl	800153a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0x70>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e007      	b.n	80012ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e004      	b.n	80012ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e001      	b.n	80012ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000058 	.word	0x20000058
 80012fc:	20000050 	.word	0x20000050
 8001300:	20000054 	.word	0x20000054

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x1c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x20>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x1c>)
 8001314:	6013      	str	r3, [r2, #0]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000698 	.word	0x20000698
 8001324:	20000058 	.word	0x20000058

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000698 	.word	0x20000698

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d004      	beq.n	8001364 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_Delay+0x40>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001364:	bf00      	nop
 8001366:	f7ff ffdf 	bl	8001328 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	429a      	cmp	r2, r3
 8001374:	d8f7      	bhi.n	8001366 <HAL_Delay+0x26>
  {
  }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000058 	.word	0x20000058

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff40 	bl	80013cc <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff33 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa4 	bl	80014e0 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e08d      	b.n	80016d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_DMA_Init+0x138>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d80f      	bhi.n	80015e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <HAL_DMA_Init+0x13c>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_DMA_Init+0x140>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_DMA_Init+0x144>)
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
 80015e0:	e00e      	b.n	8001600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_DMA_Init+0x148>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <HAL_DMA_Init+0x140>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_DMA_Init+0x14c>)
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f84e 	bl	80016f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001660:	d102      	bne.n	8001668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800167c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <HAL_DMA_Init+0x104>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d80c      	bhi.n	80016a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f86e 	bl	8001770 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	e008      	b.n	80016ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020407 	.word	0x40020407
 80016e0:	bffdfff8 	.word	0xbffdfff8
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	40020000 	.word	0x40020000
 80016ec:	bffdfbf8 	.word	0xbffdfbf8
 80016f0:	40020400 	.word	0x40020400

080016f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001704:	429a      	cmp	r2, r3
 8001706:	d802      	bhi.n	800170e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e001      	b.n	8001712 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001710:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b08      	subs	r3, #8
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800173e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40020407 	.word	0x40020407
 8001760:	40020800 	.word	0x40020800
 8001764:	40020820 	.word	0x40020820
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	40020880 	.word	0x40020880

08001770 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001792:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3b01      	subs	r3, #1
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2201      	movs	r2, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	1000823f 	.word	0x1000823f
 80017b4:	40020940 	.word	0x40020940

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c6:	e15a      	b.n	8001a7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 814c 	beq.w	8001a78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d00b      	beq.n	8001800 <HAL_GPIO_Init+0x48>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f4:	2b11      	cmp	r3, #17
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b12      	cmp	r3, #18
 80017fe:	d130      	bne.n	8001862 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001836:	2201      	movs	r2, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 0201 	and.w	r2, r3, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0xea>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d123      	bne.n	80018ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a6 	beq.w	8001a78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_GPIO_Init+0x2e4>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001930:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_GPIO_Init+0x2e4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6613      	str	r3, [r2, #96]	; 0x60
 8001938:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x2e4>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001944:	4a56      	ldr	r2, [pc, #344]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196e:	d01f      	beq.n	80019b0 <HAL_GPIO_Init+0x1f8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x2ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d019      	beq.n	80019ac <HAL_GPIO_Init+0x1f4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x1f0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1ec>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <HAL_GPIO_Init+0x2f8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1e8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_GPIO_Init+0x2fc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1e4>
 8001998:	2305      	movs	r3, #5
 800199a:	e00a      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 800199c:	2306      	movs	r3, #6
 800199e:	e008      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019b0:	2300      	movs	r3, #0
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c2:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f4:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1e:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f ae9d 	bne.w	80017c8 <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	48001000 	.word	0x48001000
 8001ab4:	48001400 	.word	0x48001400
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43d9      	mvns	r1, r3
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af06      	add	r7, sp, #24
 8001b26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0d7      	b.n	8001ce2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f007 fff6 	bl	8009b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 ff46 	bl	80059ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e04c      	b.n	8001bfe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3301      	adds	r3, #1
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b298      	uxth	r0, r3
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3336      	adds	r3, #54	; 0x36
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3338      	adds	r3, #56	; 0x38
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	333c      	adds	r3, #60	; 0x3c
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3340      	adds	r3, #64	; 0x40
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3ad      	bcc.n	8001b64 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e044      	b.n	8001c98 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	3301      	adds	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3b5      	bcc.n	8001c0e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	687e      	ldr	r6, [r7, #4]
 8001caa:	466d      	mov	r5, sp
 8001cac:	f106 0410 	add.w	r4, r6, #16
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	602b      	str	r3, [r5, #0]
 8001cb8:	1d33      	adds	r3, r6, #4
 8001cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f003 feaf 	bl	8005a20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f001 fb8a 	bl	80033f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_Start+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e012      	b.n	8001d26 <HAL_PCD_Start+0x3c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fe55 	bl	80059bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f006 f809 	bl	8007d2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f006 f80e 	bl	8007d5c <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb4d 	bl	80023ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f006 f800 	bl	8007d5c <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d112      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f007 ff54 	bl	8009c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f91e 	bl	8001fca <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f005 ffe2 	bl	8007d5c <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da2:	d10b      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db6:	b292      	uxth	r2, r2
 8001db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 ffcb 	bl	8007d5c <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd0:	d10b      	bne.n	8001dea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de4:	b292      	uxth	r2, r2
 8001de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 ffb4 	bl	8007d5c <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	d133      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e42:	2100      	movs	r1, #0
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f008 f8e7 	bl	800a018 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f007 ff28 	bl	8009ca0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f005 ff75 	bl	8007d5c <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7c:	d126      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0208 	orr.w	r2, r2, #8
 8001e90:	b292      	uxth	r2, r2
 8001e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f007 fed0 	bl	8009c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f005 ff43 	bl	8007d5c <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d13f      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12b      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0204 	orr.w	r2, r2, #4
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0208 	orr.w	r2, r2, #8
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f50:	2101      	movs	r1, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f008 f860 	bl	800a018 <HAL_PCDEx_LPM_Callback>
 8001f58:	e002      	b.n	8001f60 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f007 fe86 	bl	8009c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fef9 	bl	8007d5c <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d10e      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f007 fe3f 	bl	8009c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 fedf 	bl	8007d5c <USB_ReadInterrupts>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_SetAddress+0x1a>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e013      	b.n	800200c <HAL_PCD_SetAddress+0x42>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 fe82 	bl	8007d06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	461a      	mov	r2, r3
 8002022:	4603      	mov	r3, r0
 8002024:	70fb      	strb	r3, [r7, #3]
 8002026:	460b      	mov	r3, r1
 8002028:	803b      	strh	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da0e      	bge.n	8002058 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00e      	b.n	8002076 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002082:	883a      	ldrh	r2, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	78ba      	ldrb	r2, [r7, #2]
 800208c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a0:	78bb      	ldrb	r3, [r7, #2]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d102      	bne.n	80020ac <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_EP_Open+0xa6>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e00e      	b.n	80020d8 <HAL_PCD_EP_Open+0xc4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fccb 	bl	8005a64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020d6:	7afb      	ldrb	r3, [r7, #11]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0e      	bge.n	8002112 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00e      	b.n	8002130 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 0207 	and.w	r2, r3, #7
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_PCD_EP_Close+0x6a>
 8002146:	2302      	movs	r3, #2
 8002148:	e00e      	b.n	8002168 <HAL_PCD_EP_Close+0x88>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fff1 	bl	8006140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6979      	ldr	r1, [r7, #20]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9a4 	bl	800651a <USB_EPStartXfer>
 80021d2:	e005      	b.n	80021e0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 f99d 	bl	800651a <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0207 	and.w	r2, r3, #7
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800220c:	681b      	ldr	r3, [r3, #0]
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2201      	movs	r2, #1
 8002264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	b2da      	uxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	2b00      	cmp	r3, #0
 800227a:	d106      	bne.n	800228a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f949 	bl	800651a <USB_EPStartXfer>
 8002288:	e005      	b.n	8002296 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6979      	ldr	r1, [r7, #20]
 8002290:	4618      	mov	r0, r3
 8002292:	f004 f942 	bl	800651a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 0207 	and.w	r2, r3, #7
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d901      	bls.n	80022be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e03e      	b.n	800233c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da0e      	bge.n	80022e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	705a      	strb	r2, [r3, #1]
 80022e2:	e00c      	b.n	80022fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_EP_SetStall+0x7e>
 800231a:	2302      	movs	r3, #2
 800231c:	e00e      	b.n	800233c <HAL_PCD_EP_SetStall+0x9c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	4618      	mov	r0, r3
 800232e:	f005 fbeb 	bl	8007b08 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d901      	bls.n	8002362 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e040      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da0e      	bge.n	8002388 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	705a      	strb	r2, [r3, #1]
 8002386:	e00e      	b.n	80023a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 0207 	and.w	r2, r3, #7
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_EP_ClrStall+0x82>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e00e      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa0>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 fbe8 	bl	8007baa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023f4:	e2d6      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800240c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 815b 	bne.w	80026cc <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d150      	bne.n	80024c2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	81fb      	strh	r3, [r7, #14]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002440:	b29b      	uxth	r3, r3
 8002442:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3328      	adds	r3, #40	; 0x28
 8002448:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4413      	add	r3, r2
 8002464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	441a      	add	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f007 fbab 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8287 	beq.w	80029a4 <PCD_EP_ISR_Handler+0x5b8>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 8282 	bne.w	80029a4 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024c0:	e270      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d032      	beq.n	8002542 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002516:	b29b      	uxth	r3, r3
 8002518:	f005 fc72 	bl	8007e00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29a      	uxth	r2, r3
 8002524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002528:	4013      	ands	r3, r2
 800252a:	823b      	strh	r3, [r7, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	8a3a      	ldrh	r2, [r7, #16]
 8002532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002536:	b292      	uxth	r2, r2
 8002538:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f007 fb22 	bl	8009b84 <HAL_PCD_SetupStageCallback>
 8002540:	e230      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002542:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002546:	2b00      	cmp	r3, #0
 8002548:	f280 822c 	bge.w	80029a4 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002558:	4013      	ands	r3, r2
 800255a:	83bb      	strh	r3, [r7, #28]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8bba      	ldrh	r2, [r7, #28]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <PCD_EP_ISR_Handler+0x1e2>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f005 fc24 	bl	8007e00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	441a      	add	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f007 faed 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 81e2 	bne.w	80029a4 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d112      	bne.n	800262e <PCD_EP_ISR_Handler+0x242>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002612:	b29a      	uxth	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	801a      	strh	r2, [r3, #0]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002626:	b29a      	uxth	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	e02f      	b.n	800268e <PCD_EP_ISR_Handler+0x2a2>
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b3e      	cmp	r3, #62	; 0x3e
 8002634:	d813      	bhi.n	800265e <PCD_EP_ISR_Handler+0x272>
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <PCD_EP_ISR_Handler+0x264>
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	3301      	adds	r3, #1
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	b29b      	uxth	r3, r3
 8002654:	029b      	lsls	r3, r3, #10
 8002656:	b29a      	uxth	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	801a      	strh	r2, [r3, #0]
 800265c:	e017      	b.n	800268e <PCD_EP_ISR_Handler+0x2a2>
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <PCD_EP_ISR_Handler+0x28c>
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	3b01      	subs	r3, #1
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	b29b      	uxth	r3, r3
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	b29b      	uxth	r3, r3
 8002680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002688:	b29a      	uxth	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	827b      	strh	r3, [r7, #18]
 80026a0:	8a7b      	ldrh	r3, [r7, #18]
 80026a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026a6:	827b      	strh	r3, [r7, #18]
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ae:	827b      	strh	r3, [r7, #18]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	8a7b      	ldrh	r3, [r7, #18]
 80026b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8013      	strh	r3, [r2, #0]
 80026ca:	e16b      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f280 80e4 	bge.w	80028b0 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026fe:	4013      	ands	r3, r2
 8002700:	853b      	strh	r3, [r7, #40]	; 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002716:	b292      	uxth	r2, r2
 8002718:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800271a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	7b1b      	ldrb	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d120      	bne.n	800277a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	4413      	add	r3, r2
 8002752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800275e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8083 	beq.w	800286c <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	6959      	ldr	r1, [r3, #20]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	88da      	ldrh	r2, [r3, #6]
 8002772:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002774:	f005 fb44 	bl	8007e00 <USB_ReadPMA>
 8002778:	e078      	b.n	800286c <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	78db      	ldrb	r3, [r3, #3]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d108      	bne.n	8002794 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002782:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002784:	461a      	mov	r2, r3
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f919 	bl	80029c0 <HAL_PCD_EP_DB_Receive>
 800278e:	4603      	mov	r3, r0
 8002790:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002792:	e06b      	b.n	800286c <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4413      	add	r3, r2
 8002808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	6959      	ldr	r1, [r3, #20]
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	891a      	ldrh	r2, [r3, #8]
 8002826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002828:	f005 faea 	bl	8007e00 <USB_ReadPMA>
 800282c:	e01e      	b.n	800286c <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	6959      	ldr	r1, [r3, #20]
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	895a      	ldrh	r2, [r3, #10]
 8002866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002868:	f005 faca 	bl	8007e00 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002872:	441a      	add	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	441a      	add	r2, r3
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <PCD_EP_ISR_Handler+0x4aa>
 800288c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d206      	bcs.n	80028a4 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f007 f983 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 80028a2:	e005      	b.n	80028b0 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fe35 	bl	800651a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d074      	beq.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 80028ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	843b      	strh	r3, [r7, #32]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8c3b      	ldrh	r3, [r7, #32]
 80028fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002902:	b29b      	uxth	r3, r3
 8002904:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d144      	bne.n	8002998 <PCD_EP_ISR_Handler+0x5ac>
 800290e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13f      	bne.n	8002998 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	4413      	add	r3, r2
 8002932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	8bfb      	ldrh	r3, [r7, #30]
 8002944:	429a      	cmp	r2, r3
 8002946:	d906      	bls.n	8002956 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	8bfb      	ldrh	r3, [r7, #30]
 800294e:	1ad2      	subs	r2, r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	619a      	str	r2, [r3, #24]
 8002954:	e002      	b.n	800295c <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f007 f937 	bl	8009bde <HAL_PCD_DataInStageCallback>
 8002970:	e018      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	8bfb      	ldrh	r3, [r7, #30]
 8002978:	441a      	add	r2, r3
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	8bfb      	ldrh	r3, [r7, #30]
 8002984:	441a      	add	r2, r3
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fdc2 	bl	800651a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002996:	e005      	b.n	80029a4 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002998:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800299a:	461a      	mov	r2, r3
 800299c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f917 	bl	8002bd2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f6ff ad20 	blt.w	80023f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3738      	adds	r7, #56	; 0x38
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07c      	beq.n	8002ad2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d306      	bcc.n	8002a16 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e002      	b.n	8002a1c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d123      	bne.n	8002a6c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	833b      	strh	r3, [r7, #24]
 8002a40:	8b3b      	ldrh	r3, [r7, #24]
 8002a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a46:	833b      	strh	r3, [r7, #24]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	8b3b      	ldrh	r3, [r7, #24]
 8002a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01f      	beq.n	8002ab6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	82fb      	strh	r3, [r7, #22]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	8afb      	ldrh	r3, [r7, #22]
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ab6:	8b7b      	ldrh	r3, [r7, #26]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8085 	beq.w	8002bc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	891a      	ldrh	r2, [r3, #8]
 8002aca:	8b7b      	ldrh	r3, [r7, #26]
 8002acc:	f005 f998 	bl	8007e00 <USB_ReadPMA>
 8002ad0:	e07a      	b.n	8002bc8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	8b7b      	ldrh	r3, [r7, #26]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d306      	bcc.n	8002b10 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	8b7b      	ldrh	r3, [r7, #26]
 8002b08:	1ad2      	subs	r2, r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	619a      	str	r2, [r3, #24]
 8002b0e:	e002      	b.n	8002b16 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d123      	bne.n	8002b66 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b38:	83fb      	strh	r3, [r7, #30]
 8002b3a:	8bfb      	ldrh	r3, [r7, #30]
 8002b3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b40:	83fb      	strh	r3, [r7, #30]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	441a      	add	r2, r3
 8002b50:	8bfb      	ldrh	r3, [r7, #30]
 8002b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11f      	bne.n	8002bb0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	83bb      	strh	r3, [r7, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	8bbb      	ldrh	r3, [r7, #28]
 8002b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bb0:	8b7b      	ldrh	r3, [r7, #26]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6959      	ldr	r1, [r3, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	895a      	ldrh	r2, [r3, #10]
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	f005 f91c 	bl	8007e00 <USB_ReadPMA>
    }
  }

  return count;
 8002bc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b0a2      	sub	sp, #136	; 0x88
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 81c5 	beq.w	8002f76 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d907      	bls.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	e002      	b.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80b9 	bne.w	8002db2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d126      	bne.n	8002c96 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	4413      	add	r3, r2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00da      	lsls	r2, r3, #3
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	e01a      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	785b      	ldrb	r3, [r3, #1]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d116      	bne.n	8002ccc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	4413      	add	r3, r2
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	00da      	lsls	r2, r3, #3
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d126      	bne.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x156>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	00da      	lsls	r2, r3, #3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	e017      	b.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d113      	bne.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4413      	add	r3, r2
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00da      	lsls	r2, r3, #3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2200      	movs	r2, #0
 8002d56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f006 ff3d 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 82d2 	beq.w	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	827b      	strh	r3, [r7, #18]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	8a7b      	ldrh	r3, [r7, #18]
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
 8002db0:	e2b0      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d021      	beq.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f040 8284 	bne.w	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e14:	441a      	add	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e22:	441a      	add	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d309      	bcc.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e40:	1ad2      	subs	r2, r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	621a      	str	r2, [r3, #32]
 8002e46:	e015      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e5e:	e009      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d155      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x356>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	4413      	add	r3, r2
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	00da      	lsls	r2, r3, #3
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	e047      	b.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed4:	d811      	bhi.n	8002efa <HAL_PCD_EP_DB_Transmit+0x328>
 8002ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_PCD_EP_DB_Transmit+0x31a>
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	3301      	adds	r3, #1
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	029b      	lsls	r3, r3, #10
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	801a      	strh	r2, [r3, #0]
 8002ef8:	e032      	b.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	e01b      	b.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d117      	bne.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f44:	4413      	add	r3, r2
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	00da      	lsls	r2, r3, #3
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	4413      	add	r3, r2
 8002f52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	891a      	ldrh	r2, [r3, #8]
 8002f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f004 ff04 	bl	8007d7c <USB_WritePMA>
 8002f74:	e1ce      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d307      	bcc.n	8002fba <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	619a      	str	r2, [r3, #24]
 8002fb8:	e002      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 80c4 	bne.w	8003152 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d126      	bne.n	8003020 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003004:	b29a      	uxth	r2, r3
 8003006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003018:	b29a      	uxth	r2, r3
 800301a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	e01a      	b.n	8003056 <HAL_PCD_EP_DB_Transmit+0x484>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d116      	bne.n	8003056 <HAL_PCD_EP_DB_Transmit+0x484>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	677b      	str	r3, [r7, #116]	; 0x74
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	4413      	add	r3, r2
 800303e:	677b      	str	r3, [r7, #116]	; 0x74
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	4413      	add	r3, r2
 800304a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800304e:	673b      	str	r3, [r7, #112]	; 0x70
 8003050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	67bb      	str	r3, [r7, #120]	; 0x78
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12f      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800307c:	4413      	add	r3, r2
 800307e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	00da      	lsls	r2, r3, #3
 8003088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800308c:	4413      	add	r3, r2
 800308e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	e017      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d113      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030da:	4413      	add	r3, r2
 80030dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	00da      	lsls	r2, r3, #3
 80030e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f006 fd6f 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8104 	bne.w	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
 8003150:	e0e0      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d121      	bne.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800318c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319c:	b29b      	uxth	r3, r3
 800319e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	f040 80b4 	bne.w	8003314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b4:	441a      	add	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c2:	441a      	add	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d309      	bcc.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6a1a      	ldr	r2, [r3, #32]
 80031de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e0:	1ad2      	subs	r2, r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	621a      	str	r2, [r3, #32]
 80031e6:	e015      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 80031f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031fe:	e009      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	667b      	str	r3, [r7, #100]	; 0x64
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d155      	bne.n	80032ce <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003236:	4413      	add	r3, r2
 8003238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00da      	lsls	r2, r3, #3
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	4413      	add	r3, r2
 8003244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003248:	65bb      	str	r3, [r7, #88]	; 0x58
 800324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324c:	2b00      	cmp	r3, #0
 800324e:	d112      	bne.n	8003276 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800325a:	b29a      	uxth	r2, r3
 800325c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326e:	b29a      	uxth	r2, r3
 8003270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	e044      	b.n	8003300 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003278:	2b3e      	cmp	r3, #62	; 0x3e
 800327a:	d811      	bhi.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800327c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	657b      	str	r3, [r7, #84]	; 0x54
 8003282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_PCD_EP_DB_Transmit+0x6c0>
 800328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328e:	3301      	adds	r3, #1
 8003290:	657b      	str	r3, [r7, #84]	; 0x54
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	b29b      	uxth	r3, r3
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	b29a      	uxth	r2, r3
 800329a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	e02f      	b.n	8003300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	657b      	str	r3, [r7, #84]	; 0x54
 80032a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x6e4>
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	3b01      	subs	r3, #1
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	b29b      	uxth	r3, r3
 80032be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ca:	801a      	strh	r2, [r3, #0]
 80032cc:	e018      	b.n	8003300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d114      	bne.n	8003300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e4:	4413      	add	r3, r2
 80032e6:	667b      	str	r3, [r7, #100]	; 0x64
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	00da      	lsls	r2, r3, #3
 80032ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f0:	4413      	add	r3, r2
 80032f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032f6:	663b      	str	r3, [r7, #96]	; 0x60
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6959      	ldr	r1, [r3, #20]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	895a      	ldrh	r2, [r3, #10]
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	b29b      	uxth	r3, r3
 8003310:	f004 fd34 	bl	8007d7c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332e:	823b      	strh	r3, [r7, #16]
 8003330:	8a3b      	ldrh	r3, [r7, #16]
 8003332:	f083 0310 	eor.w	r3, r3, #16
 8003336:	823b      	strh	r3, [r7, #16]
 8003338:	8a3b      	ldrh	r3, [r7, #16]
 800333a:	f083 0320 	eor.w	r3, r3, #32
 800333e:	823b      	strh	r3, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	8a3b      	ldrh	r3, [r7, #16]
 8003350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3788      	adds	r7, #136	; 0x88
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
 800337c:	4613      	mov	r3, r2
 800337e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003380:	897b      	ldrh	r3, [r7, #10]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338c:	897b      	ldrh	r3, [r7, #10]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e009      	b.n	80033b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a4:	897a      	ldrh	r2, [r7, #10]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	80da      	strh	r2, [r3, #6]
 80033cc:	e00b      	b.n	80033e6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2201      	movs	r2, #1
 80033d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003418:	b29b      	uxth	r3, r3
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800342c:	b29b      	uxth	r3, r3
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d141      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d131      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003464:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346a:	4a46      	ldr	r2, [pc, #280]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347c:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2232      	movs	r2, #50	; 0x32
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349a:	e002      	b.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d102      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d158      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e057      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034d8:	e04d      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d141      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d131      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	4a23      	ldr	r2, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2232      	movs	r2, #50	; 0x32
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003526:	e002      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b01      	subs	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d102      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d112      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e011      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003564:	e007      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003574:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40007000 	.word	0x40007000
 8003588:	20000050 	.word	0x20000050
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800359a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359e:	6093      	str	r3, [r2, #8]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40007000 	.word	0x40007000

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e308      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d075      	beq.n	80036ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ce:	4ba3      	ldr	r3, [pc, #652]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d8:	4ba0      	ldr	r3, [pc, #640]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_OscConfig+0x3e>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_OscConfig+0x44>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10b      	bne.n	800360c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	4b99      	ldr	r3, [pc, #612]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05b      	beq.n	80036b8 <HAL_RCC_OscConfig+0x108>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d157      	bne.n	80036b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e2e3      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x74>
 8003616:	4b91      	ldr	r3, [pc, #580]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a90      	ldr	r2, [pc, #576]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x98>
 800362e:	4b8b      	ldr	r3, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a8a      	ldr	r2, [pc, #552]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a87      	ldr	r2, [pc, #540]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003648:	4b84      	ldr	r3, [pc, #528]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a83      	ldr	r2, [pc, #524]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fe5e 	bl	8001328 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd fe5a 	bl	8001328 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e2a8      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xc0>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd fe4a 	bl	8001328 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd fe46 	bl	8001328 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e294      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036aa:	4b6c      	ldr	r3, [pc, #432]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0xe8>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d075      	beq.n	80037b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d0:	4b62      	ldr	r3, [pc, #392]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_OscConfig+0x136>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d002      	beq.n	80036ec <HAL_RCC_OscConfig+0x13c>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d11f      	bne.n	800372c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ec:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_OscConfig+0x154>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e267      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	4952      	ldr	r1, [pc, #328]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003718:	4b51      	ldr	r3, [pc, #324]	; (8003860 <HAL_RCC_OscConfig+0x2b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fdb7 	bl	8001290 <HAL_InitTick>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d043      	beq.n	80037b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e253      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d023      	beq.n	800377c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fdf2 	bl	8001328 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fd fdee 	bl	8001328 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e23c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375a:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	4939      	ldr	r1, [pc, #228]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
 800377a:	e01a      	b.n	80037b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a36      	ldr	r2, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd fdce 	bl	8001328 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fd fdca 	bl	8001328 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e218      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1e0>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03c      	beq.n	8003838 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01c      	beq.n	8003800 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037cc:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fd fda7 	bl	8001328 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037de:	f7fd fda3 	bl	8001328 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1f1      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <HAL_RCC_OscConfig+0x22e>
 80037fe:	e01b      	b.n	8003838 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd fd8a 	bl	8001328 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fd fd86 	bl	8001328 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1d4      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ef      	bne.n	8003818 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80ab 	beq.w	800399c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_RCC_OscConfig+0x2ac>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x2b4>
 8003856:	2301      	movs	r3, #1
 8003858:	e005      	b.n	8003866 <HAL_RCC_OscConfig+0x2b6>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	20000054 	.word	0x20000054
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4baf      	ldr	r3, [pc, #700]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4aae      	ldr	r2, [pc, #696]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
 8003876:	4bac      	ldr	r3, [pc, #688]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4ba9      	ldr	r3, [pc, #676]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4aa5      	ldr	r2, [pc, #660]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fd fd43 	bl	8001328 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd fd3f 	bl	8001328 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e18d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b9c      	ldr	r3, [pc, #624]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d108      	bne.n	80038de <HAL_RCC_OscConfig+0x32e>
 80038cc:	4b96      	ldr	r3, [pc, #600]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	4a95      	ldr	r2, [pc, #596]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038dc:	e024      	b.n	8003928 <HAL_RCC_OscConfig+0x378>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b05      	cmp	r3, #5
 80038e4:	d110      	bne.n	8003908 <HAL_RCC_OscConfig+0x358>
 80038e6:	4b90      	ldr	r3, [pc, #576]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	4a8e      	ldr	r2, [pc, #568]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f6:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	4a8a      	ldr	r2, [pc, #552]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003906:	e00f      	b.n	8003928 <HAL_RCC_OscConfig+0x378>
 8003908:	4b87      	ldr	r3, [pc, #540]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	4a86      	ldr	r2, [pc, #536]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003918:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	4a82      	ldr	r2, [pc, #520]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003920:	f023 0304 	bic.w	r3, r3, #4
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fcfa 	bl	8001328 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd fcf6 	bl	8001328 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e142      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ed      	beq.n	8003938 <HAL_RCC_OscConfig+0x388>
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fd fce3 	bl	8001328 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fcdf 	bl	8001328 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e12b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ed      	bne.n	8003966 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01c      	beq.n	80039ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039b0:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b6:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fd fcb2 	bl	8001328 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039c8:	f7fd fcae 	bl	8001328 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0fc      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <HAL_RCC_OscConfig+0x418>
 80039e8:	e01b      	b.n	8003a22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039ea:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f0:	4a4d      	ldr	r2, [pc, #308]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fd fc95 	bl	8001328 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a02:	f7fd fc91 	bl	8001328 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0df      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a14:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ef      	bne.n	8003a02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80d3 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	f000 808d 	beq.w	8003b54 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d15a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a38      	ldr	r2, [pc, #224]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fc6b 	bl	8001328 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fd fc67 	bl	8001328 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0b5      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a74:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCC_OscConfig+0x580>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a11      	ldr	r1, [r2, #32]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a8e:	0212      	lsls	r2, r2, #8
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0552      	lsls	r2, r2, #21
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0652      	lsls	r2, r2, #25
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aae:	06d2      	lsls	r2, r2, #27
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	491d      	ldr	r1, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fc2a 	bl	8001328 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fc26 	bl	8001328 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e074      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x528>
 8003af6:	e06c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003b16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fc02 	bl	8001328 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b26:	e00e      	b.n	8003b46 <HAL_RCC_OscConfig+0x596>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fbf8 	bl	8001328 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e046      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b46:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_RCC_OscConfig+0x62c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x584>
 8003b52:	e03e      	b.n	8003bd2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e039      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_OscConfig+0x62c>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d12c      	bne.n	8003bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d123      	bne.n	8003bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11b      	bne.n	8003bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d113      	bne.n	8003bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d109      	bne.n	8003bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e11e      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d910      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b8e      	ldr	r3, [pc, #568]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 020f 	bic.w	r2, r3, #15
 8003c0e:	498c      	ldr	r1, [pc, #560]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e106      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d073      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d129      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3c:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0f4      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c4c:	f000 f966 	bl	8003f1c <RCC_GetSysClockFreqFromPLLSource>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_RCC_ClockConfig+0x268>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d93f      	bls.n	8003cda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d033      	beq.n	8003cda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d12f      	bne.n	8003cda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c7a:	4b72      	ldr	r3, [pc, #456]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c82:	4a70      	ldr	r2, [pc, #448]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e024      	b.n	8003cda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0c6      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca8:	4b66      	ldr	r3, [pc, #408]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0be      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003cb8:	f000 f8ce 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4a61      	ldr	r2, [pc, #388]	; (8003e48 <HAL_RCC_ClockConfig+0x268>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d909      	bls.n	8003cda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cce:	4a5d      	ldr	r2, [pc, #372]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4957      	ldr	r1, [pc, #348]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd fb1c 	bl	8001328 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fd fb18 	bl	8001328 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e095      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b4e      	ldr	r3, [pc, #312]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a42      	ldr	r2, [pc, #264]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d4c:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d105      	bne.n	8003d82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d21d      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 020f 	bic.w	r2, r3, #15
 8003d98:	4929      	ldr	r1, [pc, #164]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003da0:	f7fd fac2 	bl	8001328 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fd fabe 	bl	8001328 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e03b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1ed      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4917      	ldr	r1, [pc, #92]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490f      	ldr	r1, [pc, #60]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0a:	f000 f825 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCC_ClockConfig+0x264>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	490c      	ldr	r1, [pc, #48]	; (8003e4c <HAL_RCC_ClockConfig+0x26c>)
 8003e1c:	5ccb      	ldrb	r3, [r1, r3]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd fa2e 	bl	8001290 <HAL_InitTick>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40021000 	.word	0x40021000
 8003e48:	04c4b400 	.word	0x04c4b400
 8003e4c:	0800a1ec 	.word	0x0800a1ec
 8003e50:	20000050 	.word	0x20000050
 8003e54:	20000054 	.word	0x20000054

08003e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e047      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e03e      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d136      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eac:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb6:	68d2      	ldr	r2, [r2, #12]
 8003eb8:	0a12      	lsrs	r2, r2, #8
 8003eba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
      break;
 8003ec4:	e00c      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	0a12      	lsrs	r2, r2, #8
 8003ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0e5b      	lsrs	r3, r3, #25
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e001      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f00:	693b      	ldr	r3, [r7, #16]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d10c      	bne.n	8003f5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f4a:	68d2      	ldr	r2, [r2, #12]
 8003f4c:	0a12      	lsrs	r2, r2, #8
 8003f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	617b      	str	r3, [r7, #20]
    break;
 8003f58:	e00c      	b.n	8003f74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f64:	68d2      	ldr	r2, [r2, #12]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    break;
 8003f72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0e5b      	lsrs	r3, r3, #25
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f8e:	687b      	ldr	r3, [r7, #4]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	007a1200 	.word	0x007a1200
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8098 	beq.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	4a3f      	ldr	r2, [pc, #252]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a39      	ldr	r2, [pc, #228]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd f993 	bl	8001328 <HAL_GetTick>
 8004002:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004004:	e009      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7fd f98f 	bl	8001328 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d902      	bls.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	74fb      	strb	r3, [r7, #19]
        break;
 8004018:	e005      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ef      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d159      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	d019      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd f94f 	bl	8001328 <HAL_GetTick>
 800408a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408c:	e00b      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd f94b 	bl	8001328 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d902      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	74fb      	strb	r3, [r7, #19]
            break;
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ec      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	4903      	ldr	r1, [pc, #12]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040d0:	e008      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	74bb      	strb	r3, [r7, #18]
 80040d6:	e005      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7c7b      	ldrb	r3, [r7, #17]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4ba6      	ldr	r3, [pc, #664]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	4aa5      	ldr	r2, [pc, #660]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004102:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	499c      	ldr	r1, [pc, #624]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004124:	4b97      	ldr	r3, [pc, #604]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4994      	ldr	r1, [pc, #592]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004146:	4b8f      	ldr	r3, [pc, #572]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	498b      	ldr	r1, [pc, #556]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004168:	4b86      	ldr	r3, [pc, #536]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4983      	ldr	r1, [pc, #524]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800418a:	4b7e      	ldr	r3, [pc, #504]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	497a      	ldr	r1, [pc, #488]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ac:	4b75      	ldr	r3, [pc, #468]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	4972      	ldr	r1, [pc, #456]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ce:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4969      	ldr	r1, [pc, #420]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4961      	ldr	r1, [pc, #388]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004212:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	4958      	ldr	r1, [pc, #352]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004234:	4b53      	ldr	r3, [pc, #332]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	4950      	ldr	r1, [pc, #320]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004252:	d105      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a4a      	ldr	r2, [pc, #296]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800426c:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	4942      	ldr	r1, [pc, #264]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428a:	d105      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042a4:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4934      	ldr	r1, [pc, #208]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4926      	ldr	r1, [pc, #152]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4918      	ldr	r1, [pc, #96]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004378:	7cbb      	ldrb	r3, [r7, #18]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fe14 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 fde4 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04a      	b.n	80044e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d018      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x6c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447a:	d013      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x6c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00e      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x6c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_TIM_Base_Start_IT+0xc4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d009      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x6c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_TIM_Base_Start_IT+0xc8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x6c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_TIM_Base_Start_IT+0xcc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d115      	bne.n	80044d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d015      	beq.n	80044e2 <HAL_TIM_Base_Start_IT+0xaa>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d011      	beq.n	80044e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	e008      	b.n	80044e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e000      	b.n	80044e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e049      	b.n	80045b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fd18 	bl	8000f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fd22 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x24>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e03c      	b.n	800465a <HAL_TIM_PWM_Start+0x9e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d109      	bne.n	80045fa <HAL_TIM_PWM_Start+0x3e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e02f      	b.n	800465a <HAL_TIM_PWM_Start+0x9e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x58>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e022      	b.n	800465a <HAL_TIM_PWM_Start+0x9e>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start+0x72>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e015      	b.n	800465a <HAL_TIM_PWM_Start+0x9e>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b10      	cmp	r3, #16
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start+0x8c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e008      	b.n	800465a <HAL_TIM_PWM_Start+0x9e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e097      	b.n	8004792 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0xb6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	e023      	b.n	80046ba <HAL_TIM_PWM_Start+0xfe>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0xc6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	e01b      	b.n	80046ba <HAL_TIM_PWM_Start+0xfe>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xd6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	e013      	b.n	80046ba <HAL_TIM_PWM_Start+0xfe>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0xe6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a0:	e00b      	b.n	80046ba <HAL_TIM_PWM_Start+0xfe>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0xf6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b0:	e003      	b.n	80046ba <HAL_TIM_PWM_Start+0xfe>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2201      	movs	r2, #1
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 ffec 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_TIM_PWM_Start+0x1e0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_TIM_PWM_Start+0x13e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_TIM_PWM_Start+0x1e4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_TIM_PWM_Start+0x13e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_TIM_PWM_Start+0x1e8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_TIM_PWM_Start+0x13e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2f      	ldr	r2, [pc, #188]	; (80047a8 <HAL_TIM_PWM_Start+0x1ec>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_TIM_PWM_Start+0x13e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <HAL_TIM_PWM_Start+0x1f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_Start+0x142>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_TIM_PWM_Start+0x144>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_TIM_PWM_Start+0x1e0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d018      	beq.n	8004750 <HAL_TIM_PWM_Start+0x194>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d013      	beq.n	8004750 <HAL_TIM_PWM_Start+0x194>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <HAL_TIM_PWM_Start+0x1f4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00e      	beq.n	8004750 <HAL_TIM_PWM_Start+0x194>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_TIM_PWM_Start+0x1f8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_TIM_PWM_Start+0x194>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_TIM_PWM_Start+0x1e4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIM_PWM_Start+0x194>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIM_PWM_Start+0x1e8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d115      	bne.n	800477c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_TIM_PWM_Start+0x1fc>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b06      	cmp	r3, #6
 8004760:	d015      	beq.n	800478e <HAL_TIM_PWM_Start+0x1d2>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d011      	beq.n	800478e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e008      	b.n	800478e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e000      	b.n	8004790 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e097      	b.n	8004900 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fb1b 	bl	8000e20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 fbbf 	bl	8004f94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	4313      	orrs	r3, r2
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800485c:	f023 030c 	bic.w	r3, r3, #12
 8004860:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	4313      	orrs	r3, r2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	011a      	lsls	r2, r3, #4
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	031b      	lsls	r3, r3, #12
 800488c:	4313      	orrs	r3, r2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	4313      	orrs	r3, r2
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004918:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004920:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004930:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d110      	bne.n	800495a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800493e:	7b7b      	ldrb	r3, [r7, #13]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e069      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	e031      	b.n	80049be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d110      	bne.n	8004982 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004960:	7bbb      	ldrb	r3, [r7, #14]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004966:	7b3b      	ldrb	r3, [r7, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e055      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	e01d      	b.n	80049be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800498e:	7b7b      	ldrb	r3, [r7, #13]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004994:	7b3b      	ldrb	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e03e      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_TIM_Encoder_Start+0xc4>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d008      	beq.n	80049dc <HAL_TIM_Encoder_Start+0xd4>
 80049ca:	e00f      	b.n	80049ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fe63 	bl	80056a0 <TIM_CCxChannelCmd>
      break;
 80049da:	e016      	b.n	8004a0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	2104      	movs	r1, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fe5b 	bl	80056a0 <TIM_CCxChannelCmd>
      break;
 80049ea:	e00e      	b.n	8004a0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe53 	bl	80056a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	2104      	movs	r1, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe4c 	bl	80056a0 <TIM_CCxChannelCmd>
      break;
 8004a08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa76 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa68 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa79 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa4c 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa3e 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa4f 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa22 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa14 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa25 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9f8 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9ea 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9fb 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fb fbb4 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 feb8 	bl	8005944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d10e      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d107      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 feab 	bl	8005958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d10e      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d107      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f9a9 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0220 	mvn.w	r2, #32
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe6b 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c68:	d10f      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c78:	d107      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fe71 	bl	800596c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c98:	d10f      	bne.n	8004cba <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca8:	d107      	bne.n	8004cba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fe63 	bl	8005980 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc8:	d10f      	bne.n	8004cea <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fe55 	bl	8005994 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf8:	d10f      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fe47 	bl	80059a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e0fd      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b14      	cmp	r3, #20
 8004d4a:	f200 80f0 	bhi.w	8004f2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004f2f 	.word	0x08004f2f
 8004d5c:	08004f2f 	.word	0x08004f2f
 8004d60:	08004f2f 	.word	0x08004f2f
 8004d64:	08004de9 	.word	0x08004de9
 8004d68:	08004f2f 	.word	0x08004f2f
 8004d6c:	08004f2f 	.word	0x08004f2f
 8004d70:	08004f2f 	.word	0x08004f2f
 8004d74:	08004e2b 	.word	0x08004e2b
 8004d78:	08004f2f 	.word	0x08004f2f
 8004d7c:	08004f2f 	.word	0x08004f2f
 8004d80:	08004f2f 	.word	0x08004f2f
 8004d84:	08004e6b 	.word	0x08004e6b
 8004d88:	08004f2f 	.word	0x08004f2f
 8004d8c:	08004f2f 	.word	0x08004f2f
 8004d90:	08004f2f 	.word	0x08004f2f
 8004d94:	08004ead 	.word	0x08004ead
 8004d98:	08004f2f 	.word	0x08004f2f
 8004d9c:	08004f2f 	.word	0x08004f2f
 8004da0:	08004f2f 	.word	0x08004f2f
 8004da4:	08004eed 	.word	0x08004eed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f980 	bl	80050b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0208 	orr.w	r2, r2, #8
 8004dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0204 	bic.w	r2, r2, #4
 8004dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6999      	ldr	r1, [r3, #24]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	619a      	str	r2, [r3, #24]
      break;
 8004de6:	e0a3      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f9f0 	bl	80051d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6999      	ldr	r1, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]
      break;
 8004e28:	e082      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fa59 	bl	80052e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0208 	orr.w	r2, r2, #8
 8004e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0204 	bic.w	r2, r2, #4
 8004e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	61da      	str	r2, [r3, #28]
      break;
 8004e68:	e062      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fac1 	bl	80053f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69d9      	ldr	r1, [r3, #28]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	021a      	lsls	r2, r3, #8
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	61da      	str	r2, [r3, #28]
      break;
 8004eaa:	e041      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb2a 	bl	800550c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0204 	bic.w	r2, r2, #4
 8004ed6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004eea:	e021      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fb6e 	bl	80055d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004f2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <TIM_Base_SetConfig+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a39      	ldr	r2, [pc, #228]	; (800509c <TIM_Base_SetConfig+0x108>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a38      	ldr	r2, [pc, #224]	; (80050a0 <TIM_Base_SetConfig+0x10c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a37      	ldr	r2, [pc, #220]	; (80050a4 <TIM_Base_SetConfig+0x110>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2d      	ldr	r2, [pc, #180]	; (8005098 <TIM_Base_SetConfig+0x104>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d017      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	; (800509c <TIM_Base_SetConfig+0x108>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <TIM_Base_SetConfig+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <TIM_Base_SetConfig+0x110>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a27      	ldr	r2, [pc, #156]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_Base_SetConfig+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00f      	beq.n	800507c <TIM_Base_SetConfig+0xe8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <TIM_Base_SetConfig+0x110>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00b      	beq.n	800507c <TIM_Base_SetConfig+0xe8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_Base_SetConfig+0xe8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_Base_SetConfig+0xe8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0e      	ldr	r2, [pc, #56]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d103      	bne.n	8005084 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	615a      	str	r2, [r3, #20]
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0302 	bic.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <TIM_OC1_SetConfig+0x10c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00f      	beq.n	8005134 <TIM_OC1_SetConfig+0x80>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <TIM_OC1_SetConfig+0x110>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_OC1_SetConfig+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <TIM_OC1_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_OC1_SetConfig+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a29      	ldr	r2, [pc, #164]	; (80051cc <TIM_OC1_SetConfig+0x118>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC1_SetConfig+0x80>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <TIM_OC1_SetConfig+0x11c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10c      	bne.n	800514e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0308 	bic.w	r3, r3, #8
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <TIM_OC1_SetConfig+0x10c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_OC1_SetConfig+0xc2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <TIM_OC1_SetConfig+0x110>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_OC1_SetConfig+0xc2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <TIM_OC1_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_OC1_SetConfig+0xc2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <TIM_OC1_SetConfig+0x118>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC1_SetConfig+0xc2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <TIM_OC1_SetConfig+0x11c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800

080051d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0210 	bic.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0320 	bic.w	r3, r3, #32
 8005222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <TIM_OC2_SetConfig+0x100>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC2_SetConfig+0x6c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_OC2_SetConfig+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10d      	bne.n	800525c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <TIM_OC2_SetConfig+0x100>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00f      	beq.n	8005284 <TIM_OC2_SetConfig+0xb0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <TIM_OC2_SetConfig+0x104>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00b      	beq.n	8005284 <TIM_OC2_SetConfig+0xb0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <TIM_OC2_SetConfig+0x108>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d007      	beq.n	8005284 <TIM_OC2_SetConfig+0xb0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1a      	ldr	r2, [pc, #104]	; (80052e0 <TIM_OC2_SetConfig+0x10c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_OC2_SetConfig+0xb0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <TIM_OC2_SetConfig+0x110>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d113      	bne.n	80052ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <TIM_OC3_SetConfig+0xfc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_OC3_SetConfig+0x6a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <TIM_OC3_SetConfig+0x100>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10d      	bne.n	800536e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <TIM_OC3_SetConfig+0xfc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_OC3_SetConfig+0xae>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <TIM_OC3_SetConfig+0x100>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_OC3_SetConfig+0xae>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <TIM_OC3_SetConfig+0x104>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_OC3_SetConfig+0xae>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <TIM_OC3_SetConfig+0x108>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC3_SetConfig+0xae>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <TIM_OC3_SetConfig+0x10c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d113      	bne.n	80053be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800539c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <TIM_OC4_SetConfig+0x100>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC4_SetConfig+0x6c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <TIM_OC4_SetConfig+0x104>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_OC4_SetConfig+0x100>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_OC4_SetConfig+0xb0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <TIM_OC4_SetConfig+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_OC4_SetConfig+0xb0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <TIM_OC4_SetConfig+0x108>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_OC4_SetConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <TIM_OC4_SetConfig+0x10c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC4_SetConfig+0xb0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC4_SetConfig+0x110>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d113      	bne.n	80054d0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC5_SetConfig+0xb4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC5_SetConfig+0xb8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC5_SetConfig+0xbc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC5_SetConfig+0xc0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <TIM_OC5_SetConfig+0xc4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d109      	bne.n	800559a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40013400 	.word	0x40013400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	051b      	lsls	r3, r3, #20
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_OC6_SetConfig+0xb8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC6_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC6_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC6_SetConfig+0xc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <TIM_OC6_SetConfig+0xc8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d109      	bne.n	8005664 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40013400 	.word	0x40013400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e065      	b.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800573e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d013      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10c      	bne.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40014000 	.word	0x40014000

080057f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005808:	2302      	movs	r3, #2
 800580a:	e087      	b.n	800591c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a27      	ldr	r2, [pc, #156]	; (8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d106      	bne.n	80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d126      	bne.n	800590a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	051b      	lsls	r3, r3, #20
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0d      	ldr	r2, [pc, #52]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d106      	bne.n	800590a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80059d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80059f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a20:	b084      	sub	sp, #16
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	f107 0014 	add.w	r0, r7, #20
 8005a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	b004      	add	sp, #16
 8005a60:	4770      	bx	lr
	...

08005a64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b09b      	sub	sp, #108	; 0x6c
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d81f      	bhi.n	8005ad6 <USB_ActivateEndpoint+0x72>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <USB_ActivateEndpoint+0x38>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005adf 	.word	0x08005adf
 8005aa8:	08005abb 	.word	0x08005abb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005aac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ab8:	e012      	b.n	8005ae0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005aba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005abe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ac2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ac6:	e00b      	b.n	8005ae0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ac8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ad4:	e004      	b.n	8005ae0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005adc:	e000      	b.n	8005ae0 <USB_ActivateEndpoint+0x7c>
      break;
 8005ade:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	b21b      	sxth	r3, r3
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b21b      	sxth	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b21b      	sxth	r3, r3
 8005b26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	7b1b      	ldrb	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 8149 	bne.w	8005de8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8084 	beq.w	8005c68 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	00da      	lsls	r2, r3, #3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	88db      	ldrh	r3, [r3, #6]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	81fb      	strh	r3, [r7, #14]
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <USB_ActivateEndpoint+0x180>
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	81bb      	strh	r3, [r7, #12]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	89bb      	ldrh	r3, [r7, #12]
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d020      	beq.n	8005c2e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c02:	813b      	strh	r3, [r7, #8]
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	f083 0320 	eor.w	r3, r3, #32
 8005c0a:	813b      	strh	r3, [r7, #8]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	893b      	ldrh	r3, [r7, #8]
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
 8005c2c:	e27f      	b.n	800612e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	817b      	strh	r3, [r7, #10]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
 8005c66:	e262      	b.n	800612e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	4413      	add	r3, r2
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	00da      	lsls	r2, r3, #3
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	88db      	ldrh	r3, [r3, #6]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	4413      	add	r3, r2
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	00da      	lsls	r2, r3, #3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d112      	bne.n	8005cee <USB_ActivateEndpoint+0x28a>
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e02f      	b.n	8005d4e <USB_ActivateEndpoint+0x2ea>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf4:	d813      	bhi.n	8005d1e <USB_ActivateEndpoint+0x2ba>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <USB_ActivateEndpoint+0x2ac>
 8005d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e017      	b.n	8005d4e <USB_ActivateEndpoint+0x2ea>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	663b      	str	r3, [r7, #96]	; 0x60
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <USB_ActivateEndpoint+0x2d4>
 8005d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d34:	3b01      	subs	r3, #1
 8005d36:	663b      	str	r3, [r7, #96]	; 0x60
 8005d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	029b      	lsls	r3, r3, #10
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	83fb      	strh	r3, [r7, #30]
 8005d5c:	8bfb      	ldrh	r3, [r7, #30]
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <USB_ActivateEndpoint+0x33a>
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	83bb      	strh	r3, [r7, #28]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	441a      	add	r2, r3
 8005d88:	8bbb      	ldrh	r3, [r7, #28]
 8005d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	837b      	strh	r3, [r7, #26]
 8005db6:	8b7b      	ldrh	r3, [r7, #26]
 8005db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dbc:	837b      	strh	r3, [r7, #26]
 8005dbe:	8b7b      	ldrh	r3, [r7, #26]
 8005dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dc4:	837b      	strh	r3, [r7, #26]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	441a      	add	r2, r3
 8005dd0:	8b7b      	ldrh	r3, [r7, #26]
 8005dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	8013      	strh	r3, [r2, #0]
 8005de6:	e1a2      	b.n	800612e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e34:	4413      	add	r3, r2
 8005e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	00da      	lsls	r2, r3, #3
 8005e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	891b      	ldrh	r3, [r3, #8]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e68:	4413      	add	r3, r2
 8005e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	00da      	lsls	r2, r3, #3
 8005e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e74:	4413      	add	r3, r2
 8005e76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	895b      	ldrh	r3, [r3, #10]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8091 	bne.w	8005fb8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ea4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01b      	beq.n	8005ee6 <USB_ActivateEndpoint+0x482>
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ef4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01b      	beq.n	8005f36 <USB_ActivateEndpoint+0x4d2>
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	441a      	add	r2, r3
 8005f68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	867b      	strh	r3, [r7, #50]	; 0x32
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e0ba      	b.n	800612e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005fc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01d      	beq.n	8006010 <USB_ActivateEndpoint+0x5ac>
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01d      	beq.n	8006068 <USB_ActivateEndpoint+0x604>
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	78db      	ldrb	r3, [r3, #3]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d024      	beq.n	80060ba <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800608a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800608e:	f083 0320 	eor.w	r3, r3, #32
 8006092:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]
 80060b8:	e01d      	b.n	80060f6 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800612e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006132:	4618      	mov	r0, r3
 8006134:	376c      	adds	r7, #108	; 0x6c
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006140:	b480      	push	{r7}
 8006142:	b08d      	sub	sp, #52	; 0x34
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	7b1b      	ldrb	r3, [r3, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 808e 	bne.w	8006270 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d044      	beq.n	80061e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	81bb      	strh	r3, [r7, #12]
 800616a:	89bb      	ldrh	r3, [r7, #12]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <USB_DeactivateEndpoint+0x6c>
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	817b      	strh	r3, [r7, #10]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c2:	813b      	strh	r3, [r7, #8]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	893b      	ldrh	r3, [r7, #8]
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]
 80061e4:	e192      	b.n	800650c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	827b      	strh	r3, [r7, #18]
 80061f4:	8a7b      	ldrh	r3, [r7, #18]
 80061f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01b      	beq.n	8006236 <USB_DeactivateEndpoint+0xf6>
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	823b      	strh	r3, [r7, #16]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	8a3b      	ldrh	r3, [r7, #16]
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624c:	81fb      	strh	r3, [r7, #14]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	441a      	add	r2, r3
 8006258:	89fb      	ldrh	r3, [r7, #14]
 800625a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626a:	b29b      	uxth	r3, r3
 800626c:	8013      	strh	r3, [r2, #0]
 800626e:	e14d      	b.n	800650c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 80a5 	bne.w	80063c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	843b      	strh	r3, [r7, #32]
 8006288:	8c3b      	ldrh	r3, [r7, #32]
 800628a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <USB_DeactivateEndpoint+0x18a>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	83fb      	strh	r3, [r7, #30]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	8bfb      	ldrh	r3, [r7, #30]
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	83bb      	strh	r3, [r7, #28]
 80062d8:	8bbb      	ldrh	r3, [r7, #28]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01b      	beq.n	800631a <USB_DeactivateEndpoint+0x1da>
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	837b      	strh	r3, [r7, #26]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	8b7b      	ldrh	r3, [r7, #26]
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006330:	833b      	strh	r3, [r7, #24]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	441a      	add	r2, r3
 800633c:	8b3b      	ldrh	r3, [r7, #24]
 800633e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800634e:	b29b      	uxth	r3, r3
 8006350:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	82fb      	strh	r3, [r7, #22]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	8afb      	ldrh	r3, [r7, #22]
 8006376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	b29b      	uxth	r3, r3
 8006388:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a0:	82bb      	strh	r3, [r7, #20]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	441a      	add	r2, r3
 80063ac:	8abb      	ldrh	r3, [r7, #20]
 80063ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063be:	b29b      	uxth	r3, r3
 80063c0:	8013      	strh	r3, [r2, #0]
 80063c2:	e0a3      	b.n	800650c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <USB_DeactivateEndpoint+0x2d4>
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01b      	beq.n	8006464 <USB_DeactivateEndpoint+0x324>
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	853b      	strh	r3, [r7, #40]	; 0x28
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	b29b      	uxth	r3, r3
 800649a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	441a      	add	r2, r3
 80064f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006508:	b29b      	uxth	r3, r3
 800650a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3734      	adds	r7, #52	; 0x34
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b0cc      	sub	sp, #304	; 0x130
 800651e:	af00      	add	r7, sp, #0
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	6018      	str	r0, [r3, #0]
 8006524:	463b      	mov	r3, r7
 8006526:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	785b      	ldrb	r3, [r3, #1]
 800652e:	2b01      	cmp	r3, #1
 8006530:	f040 872e 	bne.w	8007390 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	429a      	cmp	r2, r3
 8006542:	d905      	bls.n	8006550 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800654e:	e004      	b.n	800655a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800655a:	463b      	mov	r3, r7
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	7b1b      	ldrb	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d134      	bne.n	80065ce <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6959      	ldr	r1, [r3, #20]
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	88da      	ldrh	r2, [r3, #6]
 8006570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006574:	b29b      	uxth	r3, r3
 8006576:	1d38      	adds	r0, r7, #4
 8006578:	6800      	ldr	r0, [r0, #0]
 800657a:	f001 fbff 	bl	8007d7c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800657e:	f107 0310 	add.w	r3, r7, #16
 8006582:	1d3a      	adds	r2, r7, #4
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	4619      	mov	r1, r3
 8006594:	f107 0310 	add.w	r3, r7, #16
 8006598:	f107 0210 	add.w	r2, r7, #16
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	440a      	add	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	00da      	lsls	r2, r3, #3
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f000 beac 	b.w	8007326 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	78db      	ldrb	r3, [r3, #3]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	f040 838c 	bne.w	8006cf2 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a1a      	ldr	r2, [r3, #32]
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f240 8330 	bls.w	8006c4c <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80065ec:	1d3b      	adds	r3, r7, #4
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800661c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006624:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662c:	b29b      	uxth	r3, r3
 800662e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6a1a      	ldr	r2, [r3, #32]
 8006636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006642:	1d3b      	adds	r3, r7, #4
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 819e 	beq.w	800699a <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800665e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006662:	1d3a      	adds	r2, r7, #4
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d17a      	bne.n	8006768 <USB_EPStartXfer+0x24e>
 8006672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	1d3b      	adds	r3, r7, #4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006684:	b29b      	uxth	r3, r3
 8006686:	4619      	mov	r1, r3
 8006688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800668c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	440a      	add	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	00da      	lsls	r2, r3, #3
 800669e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80066aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11a      	bne.n	80066ee <USB_EPStartXfer+0x1d4>
 80066b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e062      	b.n	80067b4 <USB_EPStartXfer+0x29a>
 80066ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f2:	2b3e      	cmp	r3, #62	; 0x3e
 80066f4:	d819      	bhi.n	800672a <USB_EPStartXfer+0x210>
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <USB_EPStartXfer+0x1fc>
 800670c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006710:	3301      	adds	r3, #1
 8006712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29a      	uxth	r2, r3
 8006720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e044      	b.n	80067b4 <USB_EPStartXfer+0x29a>
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <USB_EPStartXfer+0x230>
 8006740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006744:	3b01      	subs	r3, #1
 8006746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800674a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675c:	b29a      	uxth	r2, r3
 800675e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e025      	b.n	80067b4 <USB_EPStartXfer+0x29a>
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d120      	bne.n	80067b4 <USB_EPStartXfer+0x29a>
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006782:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	440a      	add	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	463b      	mov	r3, r7
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00da      	lsls	r2, r3, #3
 8006794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4413      	add	r3, r2
 800679c:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80067a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	895b      	ldrh	r3, [r3, #10]
 80067ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067be:	463b      	mov	r3, r7
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067ce:	1d38      	adds	r0, r7, #4
 80067d0:	6800      	ldr	r0, [r0, #0]
 80067d2:	f001 fad3 	bl	8007d7c <USB_WritePMA>
            ep->xfer_buff += len;
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e0:	441a      	add	r2, r3
 80067e2:	463b      	mov	r3, r7
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a1a      	ldr	r2, [r3, #32]
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d909      	bls.n	800680c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80067f8:	463b      	mov	r3, r7
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	621a      	str	r2, [r3, #32]
 800680a:	e008      	b.n	800681e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800681e:	463b      	mov	r3, r7
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d17a      	bne.n	800691e <USB_EPStartXfer+0x404>
 8006828:	f107 0318 	add.w	r3, r7, #24
 800682c:	1d3a      	adds	r2, r7, #4
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	f107 0318 	add.w	r3, r7, #24
 8006842:	f107 0218 	add.w	r2, r7, #24
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	440a      	add	r2, r1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	f107 0318 	add.w	r3, r7, #24
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4413      	add	r3, r2
 800685c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11a      	bne.n	80068a4 <USB_EPStartXfer+0x38a>
 800686e:	f107 0314 	add.w	r3, r7, #20
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800687c:	b29a      	uxth	r2, r3
 800687e:	f107 0314 	add.w	r3, r7, #20
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	f107 0314 	add.w	r3, r7, #20
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006898:	b29a      	uxth	r2, r3
 800689a:	f107 0314 	add.w	r3, r7, #20
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e067      	b.n	8006974 <USB_EPStartXfer+0x45a>
 80068a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a8:	2b3e      	cmp	r3, #62	; 0x3e
 80068aa:	d819      	bhi.n	80068e0 <USB_EPStartXfer+0x3c6>
 80068ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <USB_EPStartXfer+0x3b2>
 80068c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068c6:	3301      	adds	r3, #1
 80068c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e049      	b.n	8006974 <USB_EPStartXfer+0x45a>
 80068e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <USB_EPStartXfer+0x3e6>
 80068f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068fa:	3b01      	subs	r3, #1
 80068fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006904:	b29b      	uxth	r3, r3
 8006906:	029b      	lsls	r3, r3, #10
 8006908:	b29b      	uxth	r3, r3
 800690a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006912:	b29a      	uxth	r2, r3
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e02a      	b.n	8006974 <USB_EPStartXfer+0x45a>
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d125      	bne.n	8006974 <USB_EPStartXfer+0x45a>
 8006928:	f107 0320 	add.w	r3, r7, #32
 800692c:	1d3a      	adds	r2, r7, #4
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	f107 0320 	add.w	r3, r7, #32
 8006942:	f107 0220 	add.w	r2, r7, #32
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	440a      	add	r2, r1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	00da      	lsls	r2, r3, #3
 8006954:	f107 0320 	add.w	r3, r7, #32
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4413      	add	r3, r2
 800695c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006960:	f107 031c 	add.w	r3, r7, #28
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	b29a      	uxth	r2, r3
 800696c:	f107 031c 	add.w	r3, r7, #28
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006974:	463b      	mov	r3, r7
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	891b      	ldrh	r3, [r3, #8]
 800697a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800697e:	463b      	mov	r3, r7
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006988:	b29b      	uxth	r3, r3
 800698a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800698e:	1d38      	adds	r0, r7, #4
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	f001 f9f3 	bl	8007d7c <USB_WritePMA>
 8006996:	f000 bcc6 	b.w	8007326 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d164      	bne.n	8006a6e <USB_EPStartXfer+0x554>
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b8:	4413      	add	r3, r2
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	00da      	lsls	r2, r3, #3
 80069c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c6:	4413      	add	r3, r2
 80069c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
 80069ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d112      	bne.n	80069fc <USB_EPStartXfer+0x4e2>
 80069d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e057      	b.n	8006aac <USB_EPStartXfer+0x592>
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	2b3e      	cmp	r3, #62	; 0x3e
 8006a02:	d817      	bhi.n	8006a34 <USB_EPStartXfer+0x51a>
 8006a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <USB_EPStartXfer+0x50a>
 8006a1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e03b      	b.n	8006aac <USB_EPStartXfer+0x592>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USB_EPStartXfer+0x53a>
 8006a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e01e      	b.n	8006aac <USB_EPStartXfer+0x592>
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d119      	bne.n	8006aac <USB_EPStartXfer+0x592>
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	4413      	add	r3, r2
 8006a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00da      	lsls	r2, r3, #3
 8006a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	891b      	ldrh	r3, [r3, #8]
 8006ab2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6959      	ldr	r1, [r3, #20]
 8006abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ac6:	1d38      	adds	r0, r7, #4
 8006ac8:	6800      	ldr	r0, [r0, #0]
 8006aca:	f001 f957 	bl	8007d7c <USB_WritePMA>
            ep->xfer_buff += len;
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad8:	441a      	add	r2, r3
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d909      	bls.n	8006b04 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006af0:	463b      	mov	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	463b      	mov	r3, r7
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	621a      	str	r2, [r3, #32]
 8006b02:	e008      	b.n	8006b16 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b04:	463b      	mov	r3, r7
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b0e:	463b      	mov	r3, r7
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d164      	bne.n	8006bf0 <USB_EPStartXfer+0x6d6>
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	4413      	add	r3, r2
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	00da      	lsls	r2, r3, #3
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <USB_EPStartXfer+0x664>
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e054      	b.n	8006c28 <USB_EPStartXfer+0x70e>
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	2b3e      	cmp	r3, #62	; 0x3e
 8006b84:	d817      	bhi.n	8006bb6 <USB_EPStartXfer+0x69c>
 8006b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <USB_EPStartXfer+0x68c>
 8006b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	e038      	b.n	8006c28 <USB_EPStartXfer+0x70e>
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <USB_EPStartXfer+0x6bc>
 8006bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e01b      	b.n	8006c28 <USB_EPStartXfer+0x70e>
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d116      	bne.n	8006c28 <USB_EPStartXfer+0x70e>
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	4413      	add	r3, r2
 8006c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	00da      	lsls	r2, r3, #3
 8006c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c28:	463b      	mov	r3, r7
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	895b      	ldrh	r3, [r3, #10]
 8006c2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6959      	ldr	r1, [r3, #20]
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c42:	1d38      	adds	r0, r7, #4
 8006c44:	6800      	ldr	r0, [r0, #0]
 8006c46:	f001 f899 	bl	8007d7c <USB_WritePMA>
 8006c4a:	e36c      	b.n	8007326 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	463b      	mov	r3, r7
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cae:	4413      	add	r3, r2
 8006cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	00da      	lsls	r2, r3, #3
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ccc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	891b      	ldrh	r3, [r3, #8]
 8006cd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6959      	ldr	r1, [r3, #20]
 8006cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ce8:	1d38      	adds	r0, r7, #4
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	f001 f846 	bl	8007d7c <USB_WritePMA>
 8006cf0:	e319      	b.n	8007326 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d36:	463b      	mov	r3, r7
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d40:	1ad2      	subs	r2, r2, r3
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8162 	beq.w	8007028 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d64:	1d3b      	adds	r3, r7, #4
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d164      	bne.n	8006e40 <USB_EPStartXfer+0x926>
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	4413      	add	r3, r2
 8006d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d8e:	463b      	mov	r3, r7
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00da      	lsls	r2, r3, #3
 8006d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d9e:	677b      	str	r3, [r7, #116]	; 0x74
 8006da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d112      	bne.n	8006dce <USB_EPStartXfer+0x8b4>
 8006da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	e057      	b.n	8006e7e <USB_EPStartXfer+0x964>
 8006dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd4:	d817      	bhi.n	8006e06 <USB_EPStartXfer+0x8ec>
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <USB_EPStartXfer+0x8dc>
 8006dec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006df6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e03b      	b.n	8006e7e <USB_EPStartXfer+0x964>
 8006e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <USB_EPStartXfer+0x90c>
 8006e1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e20:	3b01      	subs	r3, #1
 8006e22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	e01e      	b.n	8006e7e <USB_EPStartXfer+0x964>
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d119      	bne.n	8006e7e <USB_EPStartXfer+0x964>
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e60:	463b      	mov	r3, r7
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	00da      	lsls	r2, r3, #3
 8006e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e7e:	463b      	mov	r3, r7
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e98:	1d38      	adds	r0, r7, #4
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	f000 ff6e 	bl	8007d7c <USB_WritePMA>
          ep->xfer_buff += len;
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	441a      	add	r2, r3
 8006eac:	463b      	mov	r3, r7
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6a1a      	ldr	r2, [r3, #32]
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d909      	bls.n	8006ed6 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	463b      	mov	r3, r7
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	621a      	str	r2, [r3, #32]
 8006ed4:	e008      	b.n	8006ee8 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 821a 	beq.w	8007326 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d164      	bne.n	8006fc6 <USB_EPStartXfer+0xaac>
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f10:	4413      	add	r3, r2
 8006f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f14:	463b      	mov	r3, r7
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00da      	lsls	r2, r3, #3
 8006f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f24:	667b      	str	r3, [r7, #100]	; 0x64
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d112      	bne.n	8006f54 <USB_EPStartXfer+0xa3a>
 8006f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e057      	b.n	8007004 <USB_EPStartXfer+0xaea>
 8006f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f58:	2b3e      	cmp	r3, #62	; 0x3e
 8006f5a:	d817      	bhi.n	8006f8c <USB_EPStartXfer+0xa72>
 8006f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <USB_EPStartXfer+0xa62>
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f76:	3301      	adds	r3, #1
 8006f78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	029b      	lsls	r3, r3, #10
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e03b      	b.n	8007004 <USB_EPStartXfer+0xaea>
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <USB_EPStartXfer+0xa92>
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	e01e      	b.n	8007004 <USB_EPStartXfer+0xaea>
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d119      	bne.n	8007004 <USB_EPStartXfer+0xaea>
 8006fd0:	1d3b      	adds	r3, r7, #4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd6:	1d3b      	adds	r3, r7, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe4:	4413      	add	r3, r2
 8006fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	00da      	lsls	r2, r3, #3
 8006ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	891b      	ldrh	r3, [r3, #8]
 800700a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800700e:	463b      	mov	r3, r7
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6959      	ldr	r1, [r3, #20]
 8007014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007018:	b29b      	uxth	r3, r3
 800701a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800701e:	1d38      	adds	r0, r7, #4
 8007020:	6800      	ldr	r0, [r0, #0]
 8007022:	f000 feab 	bl	8007d7c <USB_WritePMA>
 8007026:	e17e      	b.n	8007326 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d16f      	bne.n	8007112 <USB_EPStartXfer+0xbf8>
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	00da      	lsls	r2, r3, #3
 8007058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800705c:	4413      	add	r3, r2
 800705e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d116      	bne.n	800709c <USB_EPStartXfer+0xb82>
 800706e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e05f      	b.n	800715c <USB_EPStartXfer+0xc42>
 800709c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a0:	2b3e      	cmp	r3, #62	; 0x3e
 80070a2:	d818      	bhi.n	80070d6 <USB_EPStartXfer+0xbbc>
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <USB_EPStartXfer+0xbaa>
 80070ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070be:	3301      	adds	r3, #1
 80070c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	029b      	lsls	r3, r3, #10
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e042      	b.n	800715c <USB_EPStartXfer+0xc42>
 80070d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <USB_EPStartXfer+0xbdc>
 80070ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070f0:	3b01      	subs	r3, #1
 80070f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	029b      	lsls	r3, r3, #10
 80070fe:	b29b      	uxth	r3, r3
 8007100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e024      	b.n	800715c <USB_EPStartXfer+0xc42>
 8007112:	463b      	mov	r3, r7
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d11f      	bne.n	800715c <USB_EPStartXfer+0xc42>
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712c:	b29b      	uxth	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007134:	4413      	add	r3, r2
 8007136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	00da      	lsls	r2, r3, #3
 8007142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007146:	4413      	add	r3, r2
 8007148:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800714c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800715a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	891b      	ldrh	r3, [r3, #8]
 8007162:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007166:	463b      	mov	r3, r7
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6959      	ldr	r1, [r3, #20]
 800716c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007170:	b29b      	uxth	r3, r3
 8007172:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007176:	1d38      	adds	r0, r7, #4
 8007178:	6800      	ldr	r0, [r0, #0]
 800717a:	f000 fdff 	bl	8007d7c <USB_WritePMA>
          ep->xfer_buff += len;
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695a      	ldr	r2, [r3, #20]
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	441a      	add	r2, r3
 800718a:	463b      	mov	r3, r7
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6a1a      	ldr	r2, [r3, #32]
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d909      	bls.n	80071b4 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	621a      	str	r2, [r3, #32]
 80071b2:	e008      	b.n	80071c6 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80ab 	beq.w	8007326 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071d8:	463b      	mov	r3, r7
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d16f      	bne.n	80072c2 <USB_EPStartXfer+0xda8>
 80071e2:	1d3b      	adds	r3, r7, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071fa:	4413      	add	r3, r2
 80071fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	00da      	lsls	r2, r3, #3
 8007208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800720c:	4413      	add	r3, r2
 800720e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d116      	bne.n	800724c <USB_EPStartXfer+0xd32>
 800721e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e05b      	b.n	8007304 <USB_EPStartXfer+0xdea>
 800724c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007250:	2b3e      	cmp	r3, #62	; 0x3e
 8007252:	d818      	bhi.n	8007286 <USB_EPStartXfer+0xd6c>
 8007254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800725e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <USB_EPStartXfer+0xd5a>
 800726a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800726e:	3301      	adds	r3, #1
 8007270:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	e03e      	b.n	8007304 <USB_EPStartXfer+0xdea>
 8007286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <USB_EPStartXfer+0xd8c>
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a0:	3b01      	subs	r3, #1
 80072a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	029b      	lsls	r3, r3, #10
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e020      	b.n	8007304 <USB_EPStartXfer+0xdea>
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11b      	bne.n	8007304 <USB_EPStartXfer+0xdea>
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072dc:	4413      	add	r3, r2
 80072de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072e2:	463b      	mov	r3, r7
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	00da      	lsls	r2, r3, #3
 80072ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007302:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	895b      	ldrh	r3, [r3, #10]
 800730a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6959      	ldr	r1, [r3, #20]
 8007314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007318:	b29b      	uxth	r3, r3
 800731a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800731e:	1d38      	adds	r0, r7, #4
 8007320:	6800      	ldr	r0, [r0, #0]
 8007322:	f000 fd2b 	bl	8007d7c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	463b      	mov	r3, r7
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f107 020a 	add.w	r2, r7, #10
 800733c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007344:	8013      	strh	r3, [r2, #0]
 8007346:	f107 030a 	add.w	r3, r7, #10
 800734a:	f107 020a 	add.w	r2, r7, #10
 800734e:	8812      	ldrh	r2, [r2, #0]
 8007350:	f082 0210 	eor.w	r2, r2, #16
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	f107 030a 	add.w	r3, r7, #10
 800735a:	f107 020a 	add.w	r2, r7, #10
 800735e:	8812      	ldrh	r2, [r2, #0]
 8007360:	f082 0220 	eor.w	r2, r2, #32
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	f107 030a 	add.w	r3, r7, #10
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]
 800738e:	e3b5      	b.n	8007afc <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	7b1b      	ldrb	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 8090 	bne.w	80074bc <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d90e      	bls.n	80073ca <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80073b6:	463b      	mov	r3, r7
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	619a      	str	r2, [r3, #24]
 80073c8:	e008      	b.n	80073dc <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2200      	movs	r2, #0
 80073da:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073dc:	1d3b      	adds	r3, r7, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073e4:	1d3b      	adds	r3, r7, #4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073f4:	4413      	add	r3, r2
 80073f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073fa:	463b      	mov	r3, r7
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	00da      	lsls	r2, r3, #3
 8007402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007406:	4413      	add	r3, r2
 8007408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800740c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d116      	bne.n	8007446 <USB_EPStartXfer+0xf2c>
 8007418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007424:	b29a      	uxth	r2, r3
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29a      	uxth	r2, r3
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e32c      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
 8007446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744a:	2b3e      	cmp	r3, #62	; 0x3e
 800744c:	d818      	bhi.n	8007480 <USB_EPStartXfer+0xf66>
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <USB_EPStartXfer+0xf54>
 8007464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007468:	3301      	adds	r3, #1
 800746a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800746e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29a      	uxth	r2, r3
 8007478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e30f      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2b00      	cmp	r3, #0
 8007494:	d104      	bne.n	80074a0 <USB_EPStartXfer+0xf86>
 8007496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800749a:	3b01      	subs	r3, #1
 800749c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80074a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e2f1      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	78db      	ldrb	r3, [r3, #3]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	f040 818f 	bne.w	80077e6 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d175      	bne.n	80075be <USB_EPStartXfer+0x10a4>
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d116      	bne.n	800753e <USB_EPStartXfer+0x1024>
 8007510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800751c:	b29a      	uxth	r2, r3
 800751e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e065      	b.n	800760a <USB_EPStartXfer+0x10f0>
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b3e      	cmp	r3, #62	; 0x3e
 8007546:	d81a      	bhi.n	800757e <USB_EPStartXfer+0x1064>
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <USB_EPStartXfer+0x1052>
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007566:	3301      	adds	r3, #1
 8007568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e045      	b.n	800760a <USB_EPStartXfer+0x10f0>
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <USB_EPStartXfer+0x1088>
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	3b01      	subs	r3, #1
 800759e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e025      	b.n	800760a <USB_EPStartXfer+0x10f0>
 80075be:	463b      	mov	r3, r7
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d120      	bne.n	800760a <USB_EPStartXfer+0x10f0>
 80075c8:	1d3b      	adds	r3, r7, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075d0:	1d3b      	adds	r3, r7, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075e0:	4413      	add	r3, r2
 80075e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075e6:	463b      	mov	r3, r7
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00da      	lsls	r2, r3, #3
 80075ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	1d3b      	adds	r3, r7, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d175      	bne.n	8007708 <USB_EPStartXfer+0x11ee>
 800761c:	1d3b      	adds	r3, r7, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007634:	4413      	add	r3, r2
 8007636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800763a:	463b      	mov	r3, r7
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	00da      	lsls	r2, r3, #3
 8007642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007646:	4413      	add	r3, r2
 8007648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800764c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007650:	463b      	mov	r3, r7
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d116      	bne.n	8007688 <USB_EPStartXfer+0x116e>
 800765a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767e:	b29a      	uxth	r2, r3
 8007680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e061      	b.n	800774c <USB_EPStartXfer+0x1232>
 8007688:	463b      	mov	r3, r7
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b3e      	cmp	r3, #62	; 0x3e
 8007690:	d81a      	bhi.n	80076c8 <USB_EPStartXfer+0x11ae>
 8007692:	463b      	mov	r3, r7
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <USB_EPStartXfer+0x119c>
 80076ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076b0:	3301      	adds	r3, #1
 80076b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	029b      	lsls	r3, r3, #10
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	e041      	b.n	800774c <USB_EPStartXfer+0x1232>
 80076c8:	463b      	mov	r3, r7
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076d4:	463b      	mov	r3, r7
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <USB_EPStartXfer+0x11d2>
 80076e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076e6:	3b01      	subs	r3, #1
 80076e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	029b      	lsls	r3, r3, #10
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	e021      	b.n	800774c <USB_EPStartXfer+0x1232>
 8007708:	463b      	mov	r3, r7
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d11c      	bne.n	800774c <USB_EPStartXfer+0x1232>
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771a:	b29b      	uxth	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007722:	4413      	add	r3, r2
 8007724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	00da      	lsls	r2, r3, #3
 8007730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007734:	4413      	add	r3, r2
 8007736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800773a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800773e:	463b      	mov	r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800774a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800774c:	463b      	mov	r3, r7
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 81a4 	beq.w	8007aa0 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	463b      	mov	r3, r7
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800776c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <USB_EPStartXfer+0x126a>
 8007778:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007784:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800778c:	2b00      	cmp	r3, #0
 800778e:	f040 8187 	bne.w	8007aa0 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007792:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 8180 	bne.w	8007aa0 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80077a0:	1d3b      	adds	r3, r7, #4
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ba:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	463b      	mov	r3, r7
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	441a      	add	r2, r3
 80077cc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80077d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	8013      	strh	r3, [r2, #0]
 80077e4:	e15c      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	78db      	ldrb	r3, [r3, #3]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	f040 8155 	bne.w	8007a9c <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077f2:	463b      	mov	r3, r7
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d90e      	bls.n	8007820 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	619a      	str	r2, [r3, #24]
 800781e:	e008      	b.n	8007832 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2200      	movs	r2, #0
 8007830:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007832:	463b      	mov	r3, r7
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d16f      	bne.n	800791c <USB_EPStartXfer+0x1402>
 800783c:	1d3b      	adds	r3, r7, #4
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007844:	1d3b      	adds	r3, r7, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800784c:	b29b      	uxth	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007854:	4413      	add	r3, r2
 8007856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	00da      	lsls	r2, r3, #3
 8007862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007866:	4413      	add	r3, r2
 8007868:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800786c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d116      	bne.n	80078a6 <USB_EPStartXfer+0x138c>
 8007878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	e05f      	b.n	8007966 <USB_EPStartXfer+0x144c>
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	2b3e      	cmp	r3, #62	; 0x3e
 80078ac:	d818      	bhi.n	80078e0 <USB_EPStartXfer+0x13c6>
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <USB_EPStartXfer+0x13b4>
 80078c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c8:	3301      	adds	r3, #1
 80078ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e042      	b.n	8007966 <USB_EPStartXfer+0x144c>
 80078e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <USB_EPStartXfer+0x13e6>
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fa:	3b01      	subs	r3, #1
 80078fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007904:	b29b      	uxth	r3, r3
 8007906:	029b      	lsls	r3, r3, #10
 8007908:	b29b      	uxth	r3, r3
 800790a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e024      	b.n	8007966 <USB_EPStartXfer+0x144c>
 800791c:	463b      	mov	r3, r7
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d11f      	bne.n	8007966 <USB_EPStartXfer+0x144c>
 8007926:	1d3b      	adds	r3, r7, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800792e:	1d3b      	adds	r3, r7, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793e:	4413      	add	r3, r2
 8007940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007944:	463b      	mov	r3, r7
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	00da      	lsls	r2, r3, #3
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007950:	4413      	add	r3, r2
 8007952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800795a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	1d3b      	adds	r3, r7, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800796e:	463b      	mov	r3, r7
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d16f      	bne.n	8007a58 <USB_EPStartXfer+0x153e>
 8007978:	1d3b      	adds	r3, r7, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007980:	1d3b      	adds	r3, r7, #4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007988:	b29b      	uxth	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007990:	4413      	add	r3, r2
 8007992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007996:	463b      	mov	r3, r7
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	00da      	lsls	r2, r3, #3
 800799e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a2:	4413      	add	r3, r2
 80079a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d116      	bne.n	80079e2 <USB_EPStartXfer+0x14c8>
 80079b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e05e      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	2b3e      	cmp	r3, #62	; 0x3e
 80079e8:	d818      	bhi.n	8007a1c <USB_EPStartXfer+0x1502>
 80079ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <USB_EPStartXfer+0x14f0>
 8007a00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a04:	3301      	adds	r3, #1
 8007a06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e041      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USB_EPStartXfer+0x1522>
 8007a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a36:	3b01      	subs	r3, #1
 8007a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	029b      	lsls	r3, r3, #10
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e023      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d11e      	bne.n	8007aa0 <USB_EPStartXfer+0x1586>
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	4413      	add	r3, r2
 8007a74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	00da      	lsls	r2, r3, #3
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	4413      	add	r3, r2
 8007a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e001      	b.n	8007aa0 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e02e      	b.n	8007afe <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aa0:	1d3b      	adds	r3, r7, #4
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007abe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ac2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ac6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007aca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ad2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	463b      	mov	r3, r7
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d020      	beq.n	8007b5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b30:	81bb      	strh	r3, [r7, #12]
 8007b32:	89bb      	ldrh	r3, [r7, #12]
 8007b34:	f083 0310 	eor.w	r3, r3, #16
 8007b38:	81bb      	strh	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	89bb      	ldrh	r3, [r7, #12]
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
 8007b5a:	e01f      	b.n	8007b9c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	81fb      	strh	r3, [r7, #14]
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b7a:	81fb      	strh	r3, [r7, #14]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b087      	sub	sp, #28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	7b1b      	ldrb	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f040 809d 	bne.w	8007cf8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d04c      	beq.n	8007c60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	823b      	strh	r3, [r7, #16]
 8007bd4:	8a3b      	ldrh	r3, [r7, #16]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01b      	beq.n	8007c16 <USB_EPClearStall+0x6c>
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf4:	81fb      	strh	r3, [r7, #14]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	441a      	add	r2, r3
 8007c00:	89fb      	ldrh	r3, [r7, #14]
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	78db      	ldrb	r3, [r3, #3]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d06c      	beq.n	8007cf8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c34:	81bb      	strh	r3, [r7, #12]
 8007c36:	89bb      	ldrh	r3, [r7, #12]
 8007c38:	f083 0320 	eor.w	r3, r3, #32
 8007c3c:	81bb      	strh	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	89bb      	ldrh	r3, [r7, #12]
 8007c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	8013      	strh	r3, [r2, #0]
 8007c5e:	e04b      	b.n	8007cf8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	82fb      	strh	r3, [r7, #22]
 8007c6e:	8afb      	ldrh	r3, [r7, #22]
 8007c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01b      	beq.n	8007cb0 <USB_EPClearStall+0x106>
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	82bb      	strh	r3, [r7, #20]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	8abb      	ldrh	r3, [r7, #20]
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	827b      	strh	r3, [r7, #18]
 8007cc8:	8a7b      	ldrh	r3, [r7, #18]
 8007cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cce:	827b      	strh	r3, [r7, #18]
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
 8007cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cd6:	827b      	strh	r3, [r7, #18]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	8a7b      	ldrh	r3, [r7, #18]
 8007ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2280      	movs	r2, #128	; 0x80
 8007d1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b08d      	sub	sp, #52	; 0x34
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4611      	mov	r1, r2
 8007d88:	461a      	mov	r2, r3
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	80fb      	strh	r3, [r7, #6]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d92:	88bb      	ldrh	r3, [r7, #4]
 8007d94:	3301      	adds	r3, #1
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db2:	e01b      	b.n	8007dec <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	3302      	adds	r3, #2
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	3301      	adds	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	3b01      	subs	r3, #1
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e0      	bne.n	8007db4 <USB_WritePMA+0x38>
  }
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	3734      	adds	r7, #52	; 0x34
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b08b      	sub	sp, #44	; 0x2c
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	460b      	mov	r3, r1
 8007e10:	80fb      	strh	r3, [r7, #6]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e30:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
 8007e36:	e018      	b.n	8007e6a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	3302      	adds	r3, #2
 8007e44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	3b01      	subs	r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e3      	bne.n	8007e38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e70:	88bb      	ldrh	r3, [r7, #4]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	372c      	adds	r7, #44	; 0x2c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ea4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ea8:	f002 f8ec 	bl	800a084 <USBD_static_malloc>
 8007eac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e066      	b.n	8007f8e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7c1b      	ldrb	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d119      	bne.n	8007f04 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	2181      	movs	r1, #129	; 0x81
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 ff78 	bl	8009dce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee8:	2202      	movs	r2, #2
 8007eea:	2101      	movs	r1, #1
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 ff6e 	bl	8009dce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2210      	movs	r2, #16
 8007efe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f02:	e016      	b.n	8007f32 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	2202      	movs	r2, #2
 8007f08:	2181      	movs	r1, #129	; 0x81
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 ff5f 	bl	8009dce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	2202      	movs	r2, #2
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 ff56 	bl	8009dce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f32:	2308      	movs	r3, #8
 8007f34:	2203      	movs	r2, #3
 8007f36:	2182      	movs	r1, #130	; 0x82
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 ff48 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f72:	2101      	movs	r1, #1
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f002 f81a 	bl	8009fae <USBD_LL_PrepareReceive>
 8007f7a:	e007      	b.n	8007f8c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	2101      	movs	r1, #1
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f002 f811 	bl	8009fae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fa2:	2181      	movs	r1, #129	; 0x81
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 ff38 	bl	8009e1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 ff31 	bl	8009e1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007fc0:	2182      	movs	r1, #130	; 0x82
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 ff29 	bl	8009e1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f002 f854 	bl	800a0a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800801c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e0af      	b.n	8008194 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800803c:	2b00      	cmp	r3, #0
 800803e:	d03f      	beq.n	80080c0 <USBD_CDC_Setup+0xb4>
 8008040:	2b20      	cmp	r3, #32
 8008042:	f040 809f 	bne.w	8008184 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02e      	beq.n	80080ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b25b      	sxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	da16      	bge.n	8008086 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008064:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	88d2      	ldrh	r2, [r2, #6]
 800806a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	88db      	ldrh	r3, [r3, #6]
 8008070:	2b07      	cmp	r3, #7
 8008072:	bf28      	it	cs
 8008074:	2307      	movcs	r3, #7
 8008076:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	89fa      	ldrh	r2, [r7, #14]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 facf 	bl	8009622 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008084:	e085      	b.n	8008192 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	785a      	ldrb	r2, [r3, #1]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	b2da      	uxtb	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800809c:	6939      	ldr	r1, [r7, #16]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	88db      	ldrh	r3, [r3, #6]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fae8 	bl	800967a <USBD_CtlPrepareRx>
      break;
 80080aa:	e072      	b.n	8008192 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	7850      	ldrb	r0, [r2, #1]
 80080b8:	2200      	movs	r2, #0
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	4798      	blx	r3
      break;
 80080be:	e068      	b.n	8008192 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b0b      	cmp	r3, #11
 80080c6:	d852      	bhi.n	800816e <USBD_CDC_Setup+0x162>
 80080c8:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USBD_CDC_Setup+0xc4>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	08008101 	.word	0x08008101
 80080d4:	0800817d 	.word	0x0800817d
 80080d8:	0800816f 	.word	0x0800816f
 80080dc:	0800816f 	.word	0x0800816f
 80080e0:	0800816f 	.word	0x0800816f
 80080e4:	0800816f 	.word	0x0800816f
 80080e8:	0800816f 	.word	0x0800816f
 80080ec:	0800816f 	.word	0x0800816f
 80080f0:	0800816f 	.word	0x0800816f
 80080f4:	0800816f 	.word	0x0800816f
 80080f8:	0800812b 	.word	0x0800812b
 80080fc:	08008155 	.word	0x08008155
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d107      	bne.n	800811c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800810c:	f107 030a 	add.w	r3, r7, #10
 8008110:	2202      	movs	r2, #2
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fa84 	bl	8009622 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800811a:	e032      	b.n	8008182 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fa0e 	bl	8009540 <USBD_CtlError>
            ret = USBD_FAIL;
 8008124:	2303      	movs	r3, #3
 8008126:	75fb      	strb	r3, [r7, #23]
          break;
 8008128:	e02b      	b.n	8008182 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b03      	cmp	r3, #3
 8008134:	d107      	bne.n	8008146 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008136:	f107 030d 	add.w	r3, r7, #13
 800813a:	2201      	movs	r2, #1
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fa6f 	bl	8009622 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008144:	e01d      	b.n	8008182 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 f9f9 	bl	8009540 <USBD_CtlError>
            ret = USBD_FAIL;
 800814e:	2303      	movs	r3, #3
 8008150:	75fb      	strb	r3, [r7, #23]
          break;
 8008152:	e016      	b.n	8008182 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d00f      	beq.n	8008180 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 f9ec 	bl	8009540 <USBD_CtlError>
            ret = USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800816c:	e008      	b.n	8008180 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f9e5 	bl	8009540 <USBD_CtlError>
          ret = USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
          break;
 800817a:	e002      	b.n	8008182 <USBD_CDC_Setup+0x176>
          break;
 800817c:	bf00      	nop
 800817e:	e008      	b.n	8008192 <USBD_CDC_Setup+0x186>
          break;
 8008180:	bf00      	nop
      }
      break;
 8008182:	e006      	b.n	8008192 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f9da 	bl	8009540 <USBD_CtlError>
      ret = USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	bf00      	nop
  }

  return (uint8_t)ret;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e04f      	b.n	800825e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	3318      	adds	r3, #24
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d029      	beq.n	8008230 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	3318      	adds	r3, #24
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	78f9      	ldrb	r1, [r7, #3]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	460b      	mov	r3, r1
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	4403      	add	r3, r0
 80081fc:	3338      	adds	r3, #56	; 0x38
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	fbb2 f1f3 	udiv	r1, r2, r3
 8008204:	fb03 f301 	mul.w	r3, r3, r1
 8008208:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800820a:	2b00      	cmp	r3, #0
 800820c:	d110      	bne.n	8008230 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	3318      	adds	r3, #24
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008222:	78f9      	ldrb	r1, [r7, #3]
 8008224:	2300      	movs	r3, #0
 8008226:	2200      	movs	r2, #0
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fe9f 	bl	8009f6c <USBD_LL_Transmit>
 800822e:	e015      	b.n	800825c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008278:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	e015      	b.n	80082b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 feaf 	bl	8009ff0 <USBD_LL_GetRxDataSize>
 8008292:	4602      	mov	r2, r0
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082ae:	4611      	mov	r1, r2
 80082b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e01b      	b.n	800830e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d015      	beq.n	800830c <USBD_CDC_EP0_RxReady+0x50>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082e6:	2bff      	cmp	r3, #255	; 0xff
 80082e8:	d010      	beq.n	800830c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80082f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008300:	b292      	uxth	r2, r2
 8008302:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	22ff      	movs	r2, #255	; 0xff
 8008308:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2243      	movs	r2, #67	; 0x43
 8008324:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008326:	4b03      	ldr	r3, [pc, #12]	; (8008334 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	200000e4 	.word	0x200000e4

08008338 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2243      	movs	r2, #67	; 0x43
 8008344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	200000a0 	.word	0x200000a0

08008358 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2243      	movs	r2, #67	; 0x43
 8008364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20000128 	.word	0x20000128

08008378 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	220a      	movs	r2, #10
 8008384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008386:	4b03      	ldr	r3, [pc, #12]	; (8008394 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	2000005c 	.word	0x2000005c

08008398 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e004      	b.n	80083b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083dc:	2303      	movs	r3, #3
 80083de:	e008      	b.n	80083f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800840e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008416:	2303      	movs	r3, #3
 8008418:	e004      	b.n	8008424 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800843e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008440:	2301      	movs	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	e01a      	b.n	8008488 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008458:	2b00      	cmp	r3, #0
 800845a:	d114      	bne.n	8008486 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2201      	movs	r2, #1
 8008460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800847a:	2181      	movs	r1, #129	; 0x81
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 fd75 	bl	8009f6c <USBD_LL_Transmit>

    ret = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e016      	b.n	80084dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7c1b      	ldrb	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c0:	2101      	movs	r1, #1
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fd73 	bl	8009fae <USBD_LL_PrepareReceive>
 80084c8:	e007      	b.n	80084da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	2101      	movs	r1, #1
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fd6a 	bl	8009fae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e01f      	b.n	800853c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	79fa      	ldrb	r2, [r7, #7]
 800852e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f001 fbd1 	bl	8009cd8 <USBD_LL_Init>
 8008536:	4603      	mov	r3, r0
 8008538:	75fb      	strb	r3, [r7, #23]

  return ret;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008558:	2303      	movs	r3, #3
 800855a:	e016      	b.n	800858a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f107 020e 	add.w	r2, r7, #14
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 fbfc 	bl	8009d98 <USBD_LL_Start>
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085cc:	2303      	movs	r3, #3
 80085ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
  }

  return USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 ff46 	bl	80094cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2b02      	cmp	r3, #2
 8008662:	d01a      	beq.n	800869a <USBD_LL_SetupStage+0x72>
 8008664:	2b02      	cmp	r3, #2
 8008666:	d822      	bhi.n	80086ae <USBD_LL_SetupStage+0x86>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <USBD_LL_SetupStage+0x4a>
 800866c:	2b01      	cmp	r3, #1
 800866e:	d00a      	beq.n	8008686 <USBD_LL_SetupStage+0x5e>
 8008670:	e01d      	b.n	80086ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f9ee 	bl	8008a5c <USBD_StdDevReq>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	e020      	b.n	80086c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa52 	bl	8008b38 <USBD_StdItfReq>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
      break;
 8008698:	e016      	b.n	80086c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa91 	bl	8008bca <USBD_StdEPReq>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
      break;
 80086ac:	e00c      	b.n	80086c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fbcb 	bl	8009e58 <USBD_LL_StallEP>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b086      	sub	sp, #24
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	460b      	mov	r3, r1
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d138      	bne.n	8008758 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d14a      	bne.n	800878e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	429a      	cmp	r2, r3
 8008702:	d913      	bls.n	800872c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4293      	cmp	r3, r2
 800871c:	bf28      	it	cs
 800871e:	4613      	movcs	r3, r2
 8008720:	461a      	mov	r2, r3
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 ffc5 	bl	80096b4 <USBD_CtlContinueRx>
 800872a:	e030      	b.n	800878e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b03      	cmp	r3, #3
 8008736:	d10b      	bne.n	8008750 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 ffc0 	bl	80096d6 <USBD_CtlSendStatus>
 8008756:	e01a      	b.n	800878e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d114      	bne.n	800878e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00e      	beq.n	800878e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	7afa      	ldrb	r2, [r7, #11]
 800877a:	4611      	mov	r1, r2
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	4798      	blx	r3
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	e000      	b.n	8008790 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d16b      	bne.n	8008884 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3314      	adds	r3, #20
 80087b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d156      	bne.n	800886a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d914      	bls.n	80087f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	461a      	mov	r2, r3
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 ff3a 	bl	8009658 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087e4:	2300      	movs	r3, #0
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 fbdf 	bl	8009fae <USBD_LL_PrepareReceive>
 80087f0:	e03b      	b.n	800886a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d11c      	bne.n	8008838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008806:	429a      	cmp	r2, r3
 8008808:	d316      	bcc.n	8008838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008814:	429a      	cmp	r2, r3
 8008816:	d20f      	bcs.n	8008838 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 ff1b 	bl	8009658 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800882a:	2300      	movs	r3, #0
 800882c:	2200      	movs	r2, #0
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 fbbc 	bl	8009fae <USBD_LL_PrepareReceive>
 8008836:	e018      	b.n	800886a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b03      	cmp	r3, #3
 8008842:	d10b      	bne.n	800885c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800885c:	2180      	movs	r1, #128	; 0x80
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f001 fafa 	bl	8009e58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 ff49 	bl	80096fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008870:	2b01      	cmp	r3, #1
 8008872:	d122      	bne.n	80088ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fe98 	bl	80085aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008882:	e01a      	b.n	80088ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b03      	cmp	r3, #3
 800888e:	d114      	bne.n	80088ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00e      	beq.n	80088ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	7afa      	ldrb	r2, [r7, #11]
 80088a6:	4611      	mov	r1, r2
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	4798      	blx	r3
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	e000      	b.n	80088bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e02f      	b.n	8008958 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6852      	ldr	r2, [r2, #4]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	4611      	mov	r1, r2
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008922:	2340      	movs	r3, #64	; 0x40
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fa50 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2240      	movs	r2, #64	; 0x40
 800893a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	2200      	movs	r2, #0
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 fa42 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898e:	b2da      	uxtb	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2204      	movs	r2, #4
 800899a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d106      	bne.n	80089ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e012      	b.n	8008a18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d10b      	bne.n	8008a16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3301      	adds	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a3e:	8a3b      	ldrh	r3, [r7, #16]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b21a      	sxth	r2, r3
 8008a44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	b21b      	sxth	r3, r3
 8008a4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a72:	2b40      	cmp	r3, #64	; 0x40
 8008a74:	d005      	beq.n	8008a82 <USBD_StdDevReq+0x26>
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d853      	bhi.n	8008b22 <USBD_StdDevReq+0xc6>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <USBD_StdDevReq+0x3a>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d14f      	bne.n	8008b22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
      break;
 8008a94:	e04a      	b.n	8008b2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b09      	cmp	r3, #9
 8008a9c:	d83b      	bhi.n	8008b16 <USBD_StdDevReq+0xba>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <USBD_StdDevReq+0x48>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b17 	.word	0x08008b17
 8008ab0:	08008b03 	.word	0x08008b03
 8008ab4:	08008b17 	.word	0x08008b17
 8008ab8:	08008ad7 	.word	0x08008ad7
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008b17 	.word	0x08008b17
 8008ac4:	08008aef 	.word	0x08008aef
 8008ac8:	08008ae1 	.word	0x08008ae1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9de 	bl	8008e90 <USBD_GetDescriptor>
          break;
 8008ad4:	e024      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb6d 	bl	80091b8 <USBD_SetAddress>
          break;
 8008ade:	e01f      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbac 	bl	8009240 <USBD_SetConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]
          break;
 8008aec:	e018      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc4b 	bl	800938c <USBD_GetConfig>
          break;
 8008af6:	e013      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fc7c 	bl	80093f8 <USBD_GetStatus>
          break;
 8008b00:	e00e      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fcab 	bl	8009460 <USBD_SetFeature>
          break;
 8008b0a:	e009      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fcba 	bl	8009488 <USBD_ClrFeature>
          break;
 8008b14:	e004      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fd11 	bl	8009540 <USBD_CtlError>
          break;
 8008b1e:	bf00      	nop
      }
      break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fd0b 	bl	8009540 <USBD_CtlError>
      break;
 8008b2a:	bf00      	nop
  }

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d005      	beq.n	8008b5e <USBD_StdItfReq+0x26>
 8008b52:	2b40      	cmp	r3, #64	; 0x40
 8008b54:	d82f      	bhi.n	8008bb6 <USBD_StdItfReq+0x7e>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <USBD_StdItfReq+0x26>
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d12b      	bne.n	8008bb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d81d      	bhi.n	8008ba8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	889b      	ldrh	r3, [r3, #4]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d813      	bhi.n	8008b9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d110      	bne.n	8008bb2 <USBD_StdItfReq+0x7a>
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10d      	bne.n	8008bb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fd9d 	bl	80096d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b9c:	e009      	b.n	8008bb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fccd 	bl	8009540 <USBD_CtlError>
          break;
 8008ba6:	e004      	b.n	8008bb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fcc8 	bl	8009540 <USBD_CtlError>
          break;
 8008bb0:	e000      	b.n	8008bb4 <USBD_StdItfReq+0x7c>
          break;
 8008bb2:	bf00      	nop
      }
      break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fcc1 	bl	8009540 <USBD_CtlError>
      break;
 8008bbe:	bf00      	nop
  }

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	889b      	ldrh	r3, [r3, #4]
 8008bdc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008be6:	2b40      	cmp	r3, #64	; 0x40
 8008be8:	d007      	beq.n	8008bfa <USBD_StdEPReq+0x30>
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	f200 8145 	bhi.w	8008e7a <USBD_StdEPReq+0x2b0>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00c      	beq.n	8008c0e <USBD_StdEPReq+0x44>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f040 8140 	bne.w	8008e7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4798      	blx	r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c0c:	e13a      	b.n	8008e84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d007      	beq.n	8008c26 <USBD_StdEPReq+0x5c>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	f300 8129 	bgt.w	8008e6e <USBD_StdEPReq+0x2a4>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d07f      	beq.n	8008d20 <USBD_StdEPReq+0x156>
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d03c      	beq.n	8008c9e <USBD_StdEPReq+0xd4>
 8008c24:	e123      	b.n	8008e6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d002      	beq.n	8008c38 <USBD_StdEPReq+0x6e>
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d016      	beq.n	8008c64 <USBD_StdEPReq+0x9a>
 8008c36:	e02c      	b.n	8008c92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00d      	beq.n	8008c5a <USBD_StdEPReq+0x90>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b80      	cmp	r3, #128	; 0x80
 8008c42:	d00a      	beq.n	8008c5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f905 	bl	8009e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4e:	2180      	movs	r1, #128	; 0x80
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f901 	bl	8009e58 <USBD_LL_StallEP>
 8008c56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c58:	e020      	b.n	8008c9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc6f 	bl	8009540 <USBD_CtlError>
              break;
 8008c62:	e01b      	b.n	8008c9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10e      	bne.n	8008c8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <USBD_StdEPReq+0xc0>
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d008      	beq.n	8008c8a <USBD_StdEPReq+0xc0>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	88db      	ldrh	r3, [r3, #6]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f8e7 	bl	8009e58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fd23 	bl	80096d6 <USBD_CtlSendStatus>

              break;
 8008c90:	e004      	b.n	8008c9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc53 	bl	8009540 <USBD_CtlError>
              break;
 8008c9a:	bf00      	nop
          }
          break;
 8008c9c:	e0ec      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d002      	beq.n	8008cb0 <USBD_StdEPReq+0xe6>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d016      	beq.n	8008cdc <USBD_StdEPReq+0x112>
 8008cae:	e030      	b.n	8008d12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <USBD_StdEPReq+0x108>
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b80      	cmp	r3, #128	; 0x80
 8008cba:	d00a      	beq.n	8008cd2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f8c9 	bl	8009e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f8c5 	bl	8009e58 <USBD_LL_StallEP>
 8008cce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd0:	e025      	b.n	8008d1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc33 	bl	8009540 <USBD_CtlError>
              break;
 8008cda:	e020      	b.n	8008d1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	885b      	ldrh	r3, [r3, #2]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d11b      	bne.n	8008d1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f8cf 	bl	8009e96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fcec 	bl	80096d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc13 	bl	8009540 <USBD_CtlError>
              break;
 8008d1a:	e000      	b.n	8008d1e <USBD_StdEPReq+0x154>
              break;
 8008d1c:	bf00      	nop
          }
          break;
 8008d1e:	e0ab      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d002      	beq.n	8008d32 <USBD_StdEPReq+0x168>
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d032      	beq.n	8008d96 <USBD_StdEPReq+0x1cc>
 8008d30:	e097      	b.n	8008e62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <USBD_StdEPReq+0x17e>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d004      	beq.n	8008d48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fbfd 	bl	8009540 <USBD_CtlError>
                break;
 8008d46:	e091      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	da0b      	bge.n	8008d68 <USBD_StdEPReq+0x19e>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	3310      	adds	r3, #16
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	3304      	adds	r3, #4
 8008d66:	e00b      	b.n	8008d80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3304      	adds	r3, #4
 8008d80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc47 	bl	8009622 <USBD_CtlSendData>
              break;
 8008d94:	e06a      	b.n	8008e6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da11      	bge.n	8008dc2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d117      	bne.n	8008de8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fbc0 	bl	8009540 <USBD_CtlError>
                  break;
 8008dc0:	e054      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fbad 	bl	8009540 <USBD_CtlError>
                  break;
 8008de6:	e041      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da0b      	bge.n	8008e08 <USBD_StdEPReq+0x23e>
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	3310      	adds	r3, #16
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	e00b      	b.n	8008e20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3304      	adds	r3, #4
 8008e20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USBD_StdEPReq+0x264>
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	d103      	bne.n	8008e36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e00e      	b.n	8008e54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f84a 	bl	8009ed4 <USBD_LL_IsStallEP>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2202      	movs	r2, #2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fbe1 	bl	8009622 <USBD_CtlSendData>
              break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb6b 	bl	8009540 <USBD_CtlError>
              break;
 8008e6a:	bf00      	nop
          }
          break;
 8008e6c:	e004      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb65 	bl	8009540 <USBD_CtlError>
          break;
 8008e76:	bf00      	nop
      }
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb5f 	bl	8009540 <USBD_CtlError>
      break;
 8008e82:	bf00      	nop
  }

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	885b      	ldrh	r3, [r3, #2]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b0e      	cmp	r3, #14
 8008eb2:	f200 8152 	bhi.w	800915a <USBD_GetDescriptor+0x2ca>
 8008eb6:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_GetDescriptor+0x2c>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008f2d 	.word	0x08008f2d
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	08008f85 	.word	0x08008f85
 8008ec8:	0800915b 	.word	0x0800915b
 8008ecc:	0800915b 	.word	0x0800915b
 8008ed0:	080090fb 	.word	0x080090fb
 8008ed4:	08009127 	.word	0x08009127
 8008ed8:	0800915b 	.word	0x0800915b
 8008edc:	0800915b 	.word	0x0800915b
 8008ee0:	0800915b 	.word	0x0800915b
 8008ee4:	0800915b 	.word	0x0800915b
 8008ee8:	0800915b 	.word	0x0800915b
 8008eec:	0800915b 	.word	0x0800915b
 8008ef0:	0800915b 	.word	0x0800915b
 8008ef4:	08008ef9 	.word	0x08008ef9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f1a:	e126      	b.n	800916a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb0e 	bl	8009540 <USBD_CtlError>
        err++;
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	3301      	adds	r3, #1
 8008f28:	72fb      	strb	r3, [r7, #11]
      break;
 8008f2a:	e11e      	b.n	800916a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
      break;
 8008f42:	e112      	b.n	800916a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7c1b      	ldrb	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10d      	bne.n	8008f68 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	f107 0208 	add.w	r2, r7, #8
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	2202      	movs	r2, #2
 8008f64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f66:	e100      	b.n	800916a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	f107 0208 	add.w	r2, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e0f2      	b.n	800916a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	f200 80ac 	bhi.w	80090e8 <USBD_GetDescriptor+0x258>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <USBD_GetDescriptor+0x108>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08009019 	.word	0x08009019
 8008fa4:	0800904d 	.word	0x0800904d
 8008fa8:	08009081 	.word	0x08009081
 8008fac:	080090b5 	.word	0x080090b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	7c12      	ldrb	r2, [r2, #16]
 8008fc8:	f107 0108 	add.w	r1, r7, #8
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd2:	e091      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fab2 	bl	8009540 <USBD_CtlError>
            err++;
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe2:	e089      	b.n	80090f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	7c12      	ldrb	r2, [r2, #16]
 8008ffc:	f107 0108 	add.w	r1, r7, #8
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009006:	e077      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa98 	bl	8009540 <USBD_CtlError>
            err++;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3301      	adds	r3, #1
 8009014:	72fb      	strb	r3, [r7, #11]
          break;
 8009016:	e06f      	b.n	80090f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7c12      	ldrb	r2, [r2, #16]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
 8009038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903a:	e05d      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa7e 	bl	8009540 <USBD_CtlError>
            err++;
 8009044:	7afb      	ldrb	r3, [r7, #11]
 8009046:	3301      	adds	r3, #1
 8009048:	72fb      	strb	r3, [r7, #11]
          break;
 800904a:	e055      	b.n	80090f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	7c12      	ldrb	r2, [r2, #16]
 8009064:	f107 0108 	add.w	r1, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906e:	e043      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa64 	bl	8009540 <USBD_CtlError>
            err++;
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	3301      	adds	r3, #1
 800907c:	72fb      	strb	r3, [r7, #11]
          break;
 800907e:	e03b      	b.n	80090f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	7c12      	ldrb	r2, [r2, #16]
 8009098:	f107 0108 	add.w	r1, r7, #8
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a2:	e029      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa4a 	bl	8009540 <USBD_CtlError>
            err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
          break;
 80090b2:	e021      	b.n	80090f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f107 0108 	add.w	r1, r7, #8
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d6:	e00f      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa30 	bl	8009540 <USBD_CtlError>
            err++;
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	3301      	adds	r3, #1
 80090e4:	72fb      	strb	r3, [r7, #11]
          break;
 80090e6:	e007      	b.n	80090f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa28 	bl	8009540 <USBD_CtlError>
          err++;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	3301      	adds	r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80090f6:	bf00      	nop
      }
      break;
 80090f8:	e037      	b.n	800916a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7c1b      	ldrb	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d109      	bne.n	8009116 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	f107 0208 	add.w	r2, r7, #8
 800910e:	4610      	mov	r0, r2
 8009110:	4798      	blx	r3
 8009112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009114:	e029      	b.n	800916a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa11 	bl	8009540 <USBD_CtlError>
        err++;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	3301      	adds	r3, #1
 8009122:	72fb      	strb	r3, [r7, #11]
      break;
 8009124:	e021      	b.n	800916a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7c1b      	ldrb	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10d      	bne.n	800914a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	f107 0208 	add.w	r2, r7, #8
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	2207      	movs	r2, #7
 8009146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009148:	e00f      	b.n	800916a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9f7 	bl	8009540 <USBD_CtlError>
        err++;
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	3301      	adds	r3, #1
 8009156:	72fb      	strb	r3, [r7, #11]
      break;
 8009158:	e007      	b.n	800916a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f9ef 	bl	8009540 <USBD_CtlError>
      err++;
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	3301      	adds	r3, #1
 8009166:	72fb      	strb	r3, [r7, #11]
      break;
 8009168:	bf00      	nop
  }

  if (err != 0U)
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d11e      	bne.n	80091ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	88db      	ldrh	r3, [r3, #6]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d016      	beq.n	80091a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009178:	893b      	ldrh	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00e      	beq.n	800919c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	88da      	ldrh	r2, [r3, #6]
 8009182:	893b      	ldrh	r3, [r7, #8]
 8009184:	4293      	cmp	r3, r2
 8009186:	bf28      	it	cs
 8009188:	4613      	movcs	r3, r2
 800918a:	b29b      	uxth	r3, r3
 800918c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800918e:	893b      	ldrh	r3, [r7, #8]
 8009190:	461a      	mov	r2, r3
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa44 	bl	8009622 <USBD_CtlSendData>
 800919a:	e009      	b.n	80091b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f9ce 	bl	8009540 <USBD_CtlError>
 80091a4:	e004      	b.n	80091b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa95 	bl	80096d6 <USBD_CtlSendStatus>
 80091ac:	e000      	b.n	80091b0 <USBD_GetDescriptor+0x320>
    return;
 80091ae:	bf00      	nop
  }
}
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop

080091b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	889b      	ldrh	r3, [r3, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d131      	bne.n	800922e <USBD_SetAddress+0x76>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	88db      	ldrh	r3, [r3, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d12d      	bne.n	800922e <USBD_SetAddress+0x76>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	2b7f      	cmp	r3, #127	; 0x7f
 80091d8:	d829      	bhi.n	800922e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d104      	bne.n	80091fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f9a3 	bl	8009540 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fa:	e01d      	b.n	8009238 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7bfa      	ldrb	r2, [r7, #15]
 8009200:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fe90 	bl	8009f2e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa61 	bl	80096d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2202      	movs	r2, #2
 800921e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	e009      	b.n	8009238 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922c:	e004      	b.n	8009238 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f985 	bl	8009540 <USBD_CtlError>
  }
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	885b      	ldrh	r3, [r3, #2]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b4c      	ldr	r3, [pc, #304]	; (8009388 <USBD_SetConfig+0x148>)
 8009256:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009258:	4b4b      	ldr	r3, [pc, #300]	; (8009388 <USBD_SetConfig+0x148>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d905      	bls.n	800926c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f96c 	bl	8009540 <USBD_CtlError>
    return USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e088      	b.n	800937e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b02      	cmp	r3, #2
 8009276:	d002      	beq.n	800927e <USBD_SetConfig+0x3e>
 8009278:	2b03      	cmp	r3, #3
 800927a:	d025      	beq.n	80092c8 <USBD_SetConfig+0x88>
 800927c:	e071      	b.n	8009362 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800927e:	4b42      	ldr	r3, [pc, #264]	; (8009388 <USBD_SetConfig+0x148>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01c      	beq.n	80092c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009286:	4b40      	ldr	r3, [pc, #256]	; (8009388 <USBD_SetConfig+0x148>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009290:	4b3d      	ldr	r3, [pc, #244]	; (8009388 <USBD_SetConfig+0x148>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff f992 	bl	80085c0 <USBD_SetClassConfig>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f949 	bl	8009540 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092ae:	e065      	b.n	800937c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fa10 	bl	80096d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2203      	movs	r2, #3
 80092ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092be:	e05d      	b.n	800937c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fa08 	bl	80096d6 <USBD_CtlSendStatus>
      break;
 80092c6:	e059      	b.n	800937c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092c8:	4b2f      	ldr	r3, [pc, #188]	; (8009388 <USBD_SetConfig+0x148>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d112      	bne.n	80092f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092d8:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <USBD_SetConfig+0x148>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092e2:	4b29      	ldr	r3, [pc, #164]	; (8009388 <USBD_SetConfig+0x148>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff f985 	bl	80085f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f9f1 	bl	80096d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092f4:	e042      	b.n	800937c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <USBD_SetConfig+0x148>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d02a      	beq.n	800935a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff f973 	bl	80085f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009312:	4b1d      	ldr	r3, [pc, #116]	; (8009388 <USBD_SetConfig+0x148>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800931c:	4b1a      	ldr	r3, [pc, #104]	; (8009388 <USBD_SetConfig+0x148>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f94c 	bl	80085c0 <USBD_SetClassConfig>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00f      	beq.n	8009352 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f903 	bl	8009540 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff f958 	bl	80085f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009350:	e014      	b.n	800937c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9bf 	bl	80096d6 <USBD_CtlSendStatus>
      break;
 8009358:	e010      	b.n	800937c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9bb 	bl	80096d6 <USBD_CtlSendStatus>
      break;
 8009360:	e00c      	b.n	800937c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8eb 	bl	8009540 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <USBD_SetConfig+0x148>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff f941 	bl	80085f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009376:	2303      	movs	r3, #3
 8009378:	73fb      	strb	r3, [r7, #15]
      break;
 800937a:	bf00      	nop
  }

  return ret;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20000200 	.word	0x20000200

0800938c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88db      	ldrh	r3, [r3, #6]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d004      	beq.n	80093a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f8cd 	bl	8009540 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093a6:	e023      	b.n	80093f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	dc02      	bgt.n	80093ba <USBD_GetConfig+0x2e>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dc03      	bgt.n	80093c0 <USBD_GetConfig+0x34>
 80093b8:	e015      	b.n	80093e6 <USBD_GetConfig+0x5a>
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d00b      	beq.n	80093d6 <USBD_GetConfig+0x4a>
 80093be:	e012      	b.n	80093e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3308      	adds	r3, #8
 80093ca:	2201      	movs	r2, #1
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f927 	bl	8009622 <USBD_CtlSendData>
        break;
 80093d4:	e00c      	b.n	80093f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	2201      	movs	r2, #1
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f91f 	bl	8009622 <USBD_CtlSendData>
        break;
 80093e4:	e004      	b.n	80093f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8a9 	bl	8009540 <USBD_CtlError>
        break;
 80093ee:	bf00      	nop
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009408:	b2db      	uxtb	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	2b02      	cmp	r3, #2
 800940e:	d81e      	bhi.n	800944e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	88db      	ldrh	r3, [r3, #6]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d004      	beq.n	8009422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f890 	bl	8009540 <USBD_CtlError>
        break;
 8009420:	e01a      	b.n	8009458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f043 0202 	orr.w	r2, r3, #2
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	330c      	adds	r3, #12
 8009442:	2202      	movs	r2, #2
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8eb 	bl	8009622 <USBD_CtlSendData>
      break;
 800944c:	e004      	b.n	8009458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f875 	bl	8009540 <USBD_CtlError>
      break;
 8009456:	bf00      	nop
  }
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d106      	bne.n	8009480 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f92b 	bl	80096d6 <USBD_CtlSendStatus>
  }
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	2b02      	cmp	r3, #2
 800949e:	d80b      	bhi.n	80094b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	885b      	ldrh	r3, [r3, #2]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d10c      	bne.n	80094c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f910 	bl	80096d6 <USBD_CtlSendStatus>
      }
      break;
 80094b6:	e004      	b.n	80094c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f840 	bl	8009540 <USBD_CtlError>
      break;
 80094c0:	e000      	b.n	80094c4 <USBD_ClrFeature+0x3c>
      break;
 80094c2:	bf00      	nop
  }
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3301      	adds	r3, #1
 80094e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	781a      	ldrb	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fa92 	bl	8008a20 <SWAPBYTE>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3301      	adds	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fa85 	bl	8008a20 <SWAPBYTE>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7ff fa78 	bl	8008a20 <SWAPBYTE>
 8009530:	4603      	mov	r3, r0
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	80da      	strh	r2, [r3, #6]
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800954a:	2180      	movs	r1, #128	; 0x80
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc83 	bl	8009e58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009552:	2100      	movs	r1, #0
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fc7f 	bl	8009e58 <USBD_LL_StallEP>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b086      	sub	sp, #24
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d036      	beq.n	80095e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800957c:	6938      	ldr	r0, [r7, #16]
 800957e:	f000 f836 	bl	80095ee <USBD_GetLen>
 8009582:	4603      	mov	r3, r0
 8009584:	3301      	adds	r3, #1
 8009586:	b29b      	uxth	r3, r3
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4413      	add	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	7812      	ldrb	r2, [r2, #0]
 800959a:	701a      	strb	r2, [r3, #0]
  idx++;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	3301      	adds	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	4413      	add	r3, r2
 80095a8:	2203      	movs	r2, #3
 80095aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	3301      	adds	r3, #1
 80095b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095b2:	e013      	b.n	80095dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	4413      	add	r3, r2
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	7812      	ldrb	r2, [r2, #0]
 80095be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	3301      	adds	r3, #1
 80095c4:	613b      	str	r3, [r7, #16]
    idx++;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	3301      	adds	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	3301      	adds	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e7      	bne.n	80095b4 <USBD_GetString+0x52>
 80095e4:	e000      	b.n	80095e8 <USBD_GetString+0x86>
    return;
 80095e6:	bf00      	nop
  }
}
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095fe:	e005      	b.n	800960c <USBD_GetLen+0x1e>
  {
    len++;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	3301      	adds	r3, #1
 8009604:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3301      	adds	r3, #1
 800960a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f5      	bne.n	8009600 <USBD_GetLen+0x12>
  }

  return len;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2202      	movs	r2, #2
 8009632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fc8f 	bl	8009f6c <USBD_LL_Transmit>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	2100      	movs	r1, #0
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fc7e 	bl	8009f6c <USBD_LL_Transmit>

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2203      	movs	r2, #3
 800968a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	2100      	movs	r1, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fc82 	bl	8009fae <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fc71 	bl	8009fae <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2204      	movs	r2, #4
 80096e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	2100      	movs	r1, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fc3d 	bl	8009f6c <USBD_LL_Transmit>

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2205      	movs	r2, #5
 8009708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800970c:	2300      	movs	r3, #0
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fc4b 	bl	8009fae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009728:	2200      	movs	r2, #0
 800972a:	4912      	ldr	r1, [pc, #72]	; (8009774 <MX_USB_Device_Init+0x50>)
 800972c:	4812      	ldr	r0, [pc, #72]	; (8009778 <MX_USB_Device_Init+0x54>)
 800972e:	f7fe fed9 	bl	80084e4 <USBD_Init>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009738:	f7f7 fb48 	bl	8000dcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800973c:	490f      	ldr	r1, [pc, #60]	; (800977c <MX_USB_Device_Init+0x58>)
 800973e:	480e      	ldr	r0, [pc, #56]	; (8009778 <MX_USB_Device_Init+0x54>)
 8009740:	f7fe ff00 	bl	8008544 <USBD_RegisterClass>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800974a:	f7f7 fb3f 	bl	8000dcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800974e:	490c      	ldr	r1, [pc, #48]	; (8009780 <MX_USB_Device_Init+0x5c>)
 8009750:	4809      	ldr	r0, [pc, #36]	; (8009778 <MX_USB_Device_Init+0x54>)
 8009752:	f7fe fe21 	bl	8008398 <USBD_CDC_RegisterInterface>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800975c:	f7f7 fb36 	bl	8000dcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009760:	4805      	ldr	r0, [pc, #20]	; (8009778 <MX_USB_Device_Init+0x54>)
 8009762:	f7fe ff16 	bl	8008592 <USBD_Start>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800976c:	f7f7 fb2e 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009770:	bf00      	nop
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20000180 	.word	0x20000180
 8009778:	2000069c 	.word	0x2000069c
 800977c:	20000068 	.word	0x20000068
 8009780:	2000016c 	.word	0x2000016c

08009784 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009788:	2200      	movs	r2, #0
 800978a:	4905      	ldr	r1, [pc, #20]	; (80097a0 <CDC_Init_FS+0x1c>)
 800978c:	4805      	ldr	r0, [pc, #20]	; (80097a4 <CDC_Init_FS+0x20>)
 800978e:	f7fe fe18 	bl	80083c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009792:	4905      	ldr	r1, [pc, #20]	; (80097a8 <CDC_Init_FS+0x24>)
 8009794:	4803      	ldr	r0, [pc, #12]	; (80097a4 <CDC_Init_FS+0x20>)
 8009796:	f7fe fe32 	bl	80083fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800979a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800979c:	4618      	mov	r0, r3
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000d54 	.word	0x20000d54
 80097a4:	2000069c 	.word	0x2000069c
 80097a8:	2000096c 	.word	0x2000096c

080097ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
 80097c8:	4613      	mov	r3, r2
 80097ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	2b23      	cmp	r3, #35	; 0x23
 80097d0:	d84a      	bhi.n	8009868 <CDC_Control_FS+0xac>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <CDC_Control_FS+0x1c>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	08009869 	.word	0x08009869
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009869 	.word	0x08009869
 80097e4:	08009869 	.word	0x08009869
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009869 	.word	0x08009869
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	08009869 	.word	0x08009869
 8009810:	08009869 	.word	0x08009869
 8009814:	08009869 	.word	0x08009869
 8009818:	08009869 	.word	0x08009869
 800981c:	08009869 	.word	0x08009869
 8009820:	08009869 	.word	0x08009869
 8009824:	08009869 	.word	0x08009869
 8009828:	08009869 	.word	0x08009869
 800982c:	08009869 	.word	0x08009869
 8009830:	08009869 	.word	0x08009869
 8009834:	08009869 	.word	0x08009869
 8009838:	08009869 	.word	0x08009869
 800983c:	08009869 	.word	0x08009869
 8009840:	08009869 	.word	0x08009869
 8009844:	08009869 	.word	0x08009869
 8009848:	08009869 	.word	0x08009869
 800984c:	08009869 	.word	0x08009869
 8009850:	08009869 	.word	0x08009869
 8009854:	08009869 	.word	0x08009869
 8009858:	08009869 	.word	0x08009869
 800985c:	08009869 	.word	0x08009869
 8009860:	08009869 	.word	0x08009869
 8009864:	08009869 	.word	0x08009869
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009868:	bf00      	nop
  }

  return (USBD_OK);
 800986a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7f6 fce1 	bl	800024c <CDC_On_Receive>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4805      	ldr	r0, [pc, #20]	; (80098a4 <CDC_Receive_FS+0x2c>)
 800988e:	f7fe fdb6 	bl	80083fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009892:	4804      	ldr	r0, [pc, #16]	; (80098a4 <CDC_Receive_FS+0x2c>)
 8009894:	f7fe fdfc 	bl	8008490 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2000069c 	.word	0x2000069c

080098a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e00b      	b.n	80098e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ce:	887b      	ldrh	r3, [r7, #2]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4806      	ldr	r0, [pc, #24]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098d6:	f7fe fd74 	bl	80083c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098da:	4805      	ldr	r0, [pc, #20]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098dc:	f7fe fda8 	bl	8008430 <USBD_CDC_TransmitPacket>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	2000069c 	.word	0x2000069c

080098f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2212      	movs	r2, #18
 8009928:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800992a:	4b03      	ldr	r3, [pc, #12]	; (8009938 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	200001a0 	.word	0x200001a0

0800993c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2204      	movs	r2, #4
 800994c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800994e:	4b03      	ldr	r3, [pc, #12]	; (800995c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200001b4 	.word	0x200001b4

08009960 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	6039      	str	r1, [r7, #0]
 800996a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d105      	bne.n	800997e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	4907      	ldr	r1, [pc, #28]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009976:	4808      	ldr	r0, [pc, #32]	; (8009998 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009978:	f7ff fdf3 	bl	8009562 <USBD_GetString>
 800997c:	e004      	b.n	8009988 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	4904      	ldr	r1, [pc, #16]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009982:	4805      	ldr	r0, [pc, #20]	; (8009998 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009984:	f7ff fded 	bl	8009562 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	2000113c 	.word	0x2000113c
 8009998:	0800a1a4 	.word	0x0800a1a4

0800999c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	4904      	ldr	r1, [pc, #16]	; (80099bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80099ac:	4804      	ldr	r0, [pc, #16]	; (80099c0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80099ae:	f7ff fdd8 	bl	8009562 <USBD_GetString>
  return USBD_StrDesc;
 80099b2:	4b02      	ldr	r3, [pc, #8]	; (80099bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	2000113c 	.word	0x2000113c
 80099c0:	0800a1bc 	.word	0x0800a1bc

080099c4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	221a      	movs	r2, #26
 80099d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099d6:	f000 f843 	bl	8009a60 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80099da:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	200001b8 	.word	0x200001b8

080099e8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4907      	ldr	r1, [pc, #28]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80099fe:	4808      	ldr	r0, [pc, #32]	; (8009a20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a00:	f7ff fdaf 	bl	8009562 <USBD_GetString>
 8009a04:	e004      	b.n	8009a10 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4904      	ldr	r1, [pc, #16]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009a0a:	4805      	ldr	r0, [pc, #20]	; (8009a20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a0c:	f7ff fda9 	bl	8009562 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a10:	4b02      	ldr	r3, [pc, #8]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	2000113c 	.word	0x2000113c
 8009a20:	0800a1d0 	.word	0x0800a1d0

08009a24 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a3c:	f7ff fd91 	bl	8009562 <USBD_GetString>
 8009a40:	e004      	b.n	8009a4c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4904      	ldr	r1, [pc, #16]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a46:	4805      	ldr	r0, [pc, #20]	; (8009a5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a48:	f7ff fd8b 	bl	8009562 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	2000113c 	.word	0x2000113c
 8009a5c:	0800a1dc 	.word	0x0800a1dc

08009a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <Get_SerialNum+0x44>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <Get_SerialNum+0x48>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a72:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <Get_SerialNum+0x4c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a86:	2208      	movs	r2, #8
 8009a88:	4909      	ldr	r1, [pc, #36]	; (8009ab0 <Get_SerialNum+0x50>)
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f814 	bl	8009ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a90:	2204      	movs	r2, #4
 8009a92:	4908      	ldr	r1, [pc, #32]	; (8009ab4 <Get_SerialNum+0x54>)
 8009a94:	68b8      	ldr	r0, [r7, #8]
 8009a96:	f000 f80f 	bl	8009ab8 <IntToUnicode>
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	1fff7590 	.word	0x1fff7590
 8009aa8:	1fff7594 	.word	0x1fff7594
 8009aac:	1fff7598 	.word	0x1fff7598
 8009ab0:	200001ba 	.word	0x200001ba
 8009ab4:	200001ca 	.word	0x200001ca

08009ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e027      	b.n	8009b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	0f1b      	lsrs	r3, r3, #28
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d80b      	bhi.n	8009af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3230      	adds	r2, #48	; 0x30
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e00a      	b.n	8009b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	0f1b      	lsrs	r3, r3, #28
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4619      	mov	r1, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	440b      	add	r3, r1
 8009b00:	3237      	adds	r2, #55	; 0x37
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	3301      	adds	r3, #1
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	4413      	add	r3, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
 8009b20:	7dfa      	ldrb	r2, [r7, #23]
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3d3      	bcc.n	8009ad0 <IntToUnicode+0x18>
  }
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
	...

08009b38 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a0d      	ldr	r2, [pc, #52]	; (8009b7c <HAL_PCD_MspInit+0x44>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d113      	bne.n	8009b72 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <HAL_PCD_MspInit+0x48>)
 8009b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4e:	4a0c      	ldr	r2, [pc, #48]	; (8009b80 <HAL_PCD_MspInit+0x48>)
 8009b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b54:	6593      	str	r3, [r2, #88]	; 0x58
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <HAL_PCD_MspInit+0x48>)
 8009b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009b62:	2200      	movs	r2, #0
 8009b64:	2100      	movs	r1, #0
 8009b66:	2014      	movs	r0, #20
 8009b68:	f7f7 fce7 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009b6c:	2014      	movs	r0, #20
 8009b6e:	f7f7 fcfe 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40005c00 	.word	0x40005c00
 8009b80:	40021000 	.word	0x40021000

08009b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fe fd44 	bl	8008628 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	00db      	lsls	r3, r3, #3
 8009bc6:	440b      	add	r3, r1
 8009bc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f7fe fd7e 	bl	80086d2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	440b      	add	r3, r1
 8009bfe:	333c      	adds	r3, #60	; 0x3c
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7fe fdc7 	bl	8008798 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fedb 	bl	80089dc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d001      	beq.n	8009c46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c42:	f7f7 f8c3 	bl	8000dcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c4c:	7bfa      	ldrb	r2, [r7, #15]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fe85 	bl	8008960 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fe31 	bl	80088c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fe80 	bl	8008980 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <HAL_PCD_SuspendCallback+0x30>)
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	4a03      	ldr	r2, [pc, #12]	; (8009c9c <HAL_PCD_SuspendCallback+0x30>)
 8009c8e:	f043 0306 	orr.w	r3, r3, #6
 8009c92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	e000ed00 	.word	0xe000ed00

08009ca0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cb0:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <HAL_PCD_ResumeCallback+0x34>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	4a07      	ldr	r2, [pc, #28]	; (8009cd4 <HAL_PCD_ResumeCallback+0x34>)
 8009cb6:	f023 0306 	bic.w	r3, r3, #6
 8009cba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009cbc:	f000 f9fa 	bl	800a0b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fe70 	bl	80089ac <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	e000ed00 	.word	0xe000ed00

08009cd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ce0:	4a2b      	ldr	r2, [pc, #172]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009cec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009cf0:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009cf2:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <USBD_LL_Init+0xbc>)
 8009cf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009cf8:	2208      	movs	r2, #8
 8009cfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009cfc:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009cfe:	2202      	movs	r2, #2
 8009d00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d04:	2202      	movs	r2, #2
 8009d06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009d08:	4b21      	ldr	r3, [pc, #132]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d0e:	4b20      	ldr	r3, [pc, #128]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d14:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d1a:	4b1d      	ldr	r3, [pc, #116]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d20:	481b      	ldr	r0, [pc, #108]	; (8009d90 <USBD_LL_Init+0xb8>)
 8009d22:	f7f7 fefd 	bl	8001b20 <HAL_PCD_Init>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009d2c:	f7f7 f84e 	bl	8000dcc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d36:	2318      	movs	r3, #24
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	f7f9 fb17 	bl	800336e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d46:	2358      	movs	r3, #88	; 0x58
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2180      	movs	r1, #128	; 0x80
 8009d4c:	f7f9 fb0f 	bl	800336e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d56:	23c0      	movs	r3, #192	; 0xc0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2181      	movs	r1, #129	; 0x81
 8009d5c:	f7f9 fb07 	bl	800336e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	f7f9 fafe 	bl	800336e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2182      	movs	r1, #130	; 0x82
 8009d80:	f7f9 faf5 	bl	800336e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	2000133c 	.word	0x2000133c
 8009d94:	40005c00 	.word	0x40005c00

08009d98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7f7 ff9b 	bl	8001cea <HAL_PCD_Start>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 f980 	bl	800a0c0 <USBD_Get_USB_Status>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4603      	mov	r3, r0
 8009dde:	70fb      	strb	r3, [r7, #3]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70bb      	strb	r3, [r7, #2]
 8009de4:	4613      	mov	r3, r2
 8009de6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009df6:	78bb      	ldrb	r3, [r7, #2]
 8009df8:	883a      	ldrh	r2, [r7, #0]
 8009dfa:	78f9      	ldrb	r1, [r7, #3]
 8009dfc:	f7f8 f90a 	bl	8002014 <HAL_PCD_EP_Open>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 f95a 	bl	800a0c0 <USBD_Get_USB_Status>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f8 f951 	bl	80020e0 <HAL_PCD_EP_Close>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 f93b 	bl	800a0c0 <USBD_Get_USB_Status>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e72:	78fa      	ldrb	r2, [r7, #3]
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7f8 fa12 	bl	80022a0 <HAL_PCD_EP_SetStall>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 f91c 	bl	800a0c0 <USBD_Get_USB_Status>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7f8 fa45 	bl	8002344 <HAL_PCD_EP_ClrStall>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f8fd 	bl	800a0c0 <USBD_Get_USB_Status>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da0c      	bge.n	8009f0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	440b      	add	r3, r1
 8009f04:	3302      	adds	r3, #2
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	e00b      	b.n	8009f22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f10:	68f9      	ldr	r1, [r7, #12]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7f8 f83c 	bl	8001fca <HAL_PCD_SetAddress>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 f8b1 	bl	800a0c0 <USBD_Get_USB_Status>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f8a:	7af9      	ldrb	r1, [r7, #11]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f7f8 f943 	bl	800221a <HAL_PCD_EP_Transmit>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f890 	bl	800a0c0 <USBD_Get_USB_Status>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fcc:	7af9      	ldrb	r1, [r7, #11]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f7f8 f8cd 	bl	8002170 <HAL_PCD_EP_Receive>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f86f 	bl	800a0c0 <USBD_Get_USB_Status>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7f8 f8ef 	bl	80021ea <HAL_PCD_EP_GetRxCount>
 800a00c:	4603      	mov	r3, r0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_PCDEx_LPM_Callback+0x18>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d013      	beq.n	800a056 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a02e:	e023      	b.n	800a078 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a038:	f000 f83c 	bl	800a0b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <HAL_PCDEx_LPM_Callback+0x68>)
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	4a0f      	ldr	r2, [pc, #60]	; (800a080 <HAL_PCDEx_LPM_Callback+0x68>)
 800a042:	f023 0306 	bic.w	r3, r3, #6
 800a046:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fcac 	bl	80089ac <USBD_LL_Resume>
    break;
 800a054:	e010      	b.n	800a078 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fc8f 	bl	8008980 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <HAL_PCDEx_LPM_Callback+0x68>)
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4a04      	ldr	r2, [pc, #16]	; (800a080 <HAL_PCDEx_LPM_Callback+0x68>)
 800a070:	f043 0306 	orr.w	r3, r3, #6
 800a074:	6113      	str	r3, [r2, #16]
    break;
 800a076:	bf00      	nop
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	e000ed00 	.word	0xe000ed00

0800a084 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <USBD_static_malloc+0x18>)
}
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000204 	.word	0x20000204

0800a0a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]

}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a0b8:	f7f6 fac6 	bl	8000648 <SystemClock_Config>
}
 800a0bc:	bf00      	nop
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d817      	bhi.n	800a104 <USBD_Get_USB_Status+0x44>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBD_Get_USB_Status+0x1c>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0f3 	.word	0x0800a0f3
 800a0e4:	0800a0f9 	.word	0x0800a0f9
 800a0e8:	0800a0ff 	.word	0x0800a0ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	e00b      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f6:	e008      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fc:	e005      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0fe:	2303      	movs	r3, #3
 800a100:	73fb      	strb	r3, [r7, #15]
    break;
 800a102:	e002      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a104:	2303      	movs	r3, #3
 800a106:	73fb      	strb	r3, [r7, #15]
    break;
 800a108:	bf00      	nop
  }
  return usb_status;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <__libc_init_array>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4d0d      	ldr	r5, [pc, #52]	; (800a150 <__libc_init_array+0x38>)
 800a11c:	4c0d      	ldr	r4, [pc, #52]	; (800a154 <__libc_init_array+0x3c>)
 800a11e:	1b64      	subs	r4, r4, r5
 800a120:	10a4      	asrs	r4, r4, #2
 800a122:	2600      	movs	r6, #0
 800a124:	42a6      	cmp	r6, r4
 800a126:	d109      	bne.n	800a13c <__libc_init_array+0x24>
 800a128:	4d0b      	ldr	r5, [pc, #44]	; (800a158 <__libc_init_array+0x40>)
 800a12a:	4c0c      	ldr	r4, [pc, #48]	; (800a15c <__libc_init_array+0x44>)
 800a12c:	f000 f82e 	bl	800a18c <_init>
 800a130:	1b64      	subs	r4, r4, r5
 800a132:	10a4      	asrs	r4, r4, #2
 800a134:	2600      	movs	r6, #0
 800a136:	42a6      	cmp	r6, r4
 800a138:	d105      	bne.n	800a146 <__libc_init_array+0x2e>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a140:	4798      	blx	r3
 800a142:	3601      	adds	r6, #1
 800a144:	e7ee      	b.n	800a124 <__libc_init_array+0xc>
 800a146:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14a:	4798      	blx	r3
 800a14c:	3601      	adds	r6, #1
 800a14e:	e7f2      	b.n	800a136 <__libc_init_array+0x1e>
 800a150:	0800a1fc 	.word	0x0800a1fc
 800a154:	0800a1fc 	.word	0x0800a1fc
 800a158:	0800a1fc 	.word	0x0800a1fc
 800a15c:	0800a200 	.word	0x0800a200

0800a160 <memcpy>:
 800a160:	440a      	add	r2, r1
 800a162:	4291      	cmp	r1, r2
 800a164:	f100 33ff 	add.w	r3, r0, #4294967295
 800a168:	d100      	bne.n	800a16c <memcpy+0xc>
 800a16a:	4770      	bx	lr
 800a16c:	b510      	push	{r4, lr}
 800a16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a176:	4291      	cmp	r1, r2
 800a178:	d1f9      	bne.n	800a16e <memcpy+0xe>
 800a17a:	bd10      	pop	{r4, pc}

0800a17c <memset>:
 800a17c:	4402      	add	r2, r0
 800a17e:	4603      	mov	r3, r0
 800a180:	4293      	cmp	r3, r2
 800a182:	d100      	bne.n	800a186 <memset+0xa>
 800a184:	4770      	bx	lr
 800a186:	f803 1b01 	strb.w	r1, [r3], #1
 800a18a:	e7f9      	b.n	800a180 <memset+0x4>

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
