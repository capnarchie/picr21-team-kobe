
KobeMotorTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae8c  0800ae8c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae8c  0800ae8c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae8c  0800ae8c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae8c  0800ae8c  0001ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ae94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  200001d4  0800b068  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0800b068  000216e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbb3  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b33  00000000  00000000  0003ddb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000418f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00042cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d64  00000000  00000000  00043f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017450  00000000  00000000  00064c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d8e  00000000  00000000  0007c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141e7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005274  00000000  00000000  00141ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ae1c 	.word	0x0800ae1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800ae1c 	.word	0x0800ae1c

08000218 <clamp>:
		.delimiter = 0xAAAA

};


int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return maxValue;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < minValue) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return minValue;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}

	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d116      	bne.n	800028c <CDC_On_Receive+0x40>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800025e:	220a      	movs	r2, #10
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <CDC_On_Receive+0x48>)
 8000264:	f00a fdc4 	bl	800adf0 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <CDC_On_Receive+0x48>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000270:	4293      	cmp	r3, r2
 8000272:	d102      	bne.n	800027a <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <CDC_On_Receive+0x4c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
    }
    if (command.delimiter == 0xBBBB) { // (9)
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <CDC_On_Receive+0x48>)
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000282:	4293      	cmp	r3, r2
 8000284:	d102      	bne.n	800028c <CDC_On_Receive+0x40>
          sendData = 1;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <CDC_On_Receive+0x50>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
        }
  }
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200001f0 	.word	0x200001f0
 8000298:	200001fa 	.word	0x200001fa
 800029c:	200001fb 	.word	0x200001fb

080002a0 <PIDcontrol>:
    packet = (packet << 4) | csum;

    return packet;
}*/

int32_t PIDcontrol(MotorControl* control, int16_t position){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position; //Lahutab vana positsiooni, et saada kiiruse
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	821a      	strh	r2, [r3, #16]
	control->position = position; //Salvestab asendi struktuuri
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	887a      	ldrh	r2, [r7, #2]
 80002c4:	805a      	strh	r2, [r3, #2]
	int32_t error = control->speed -control->positionChange; //Kui suur on erinevus kiiruste vahel
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	control->integraal += error;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]

	return control->p_gain * error + control->i_gain * control->integraal;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	fb03 f202 	mul.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f8:	4619      	mov	r1, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	fb03 f301 	mul.w	r3, r3, r1
 8000302:	4413      	add	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <Thrower_Send>:

uint16_t ThrData[20];
uint16_t pwmData[20];

void Thrower_Send (uint16_t command)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]

	// compute checksum

	uint16_t packet = (command << 1) | 0;
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	817b      	strh	r3, [r7, #10]

	HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 8000320:	2100      	movs	r1, #0
 8000322:	4837      	ldr	r0, [pc, #220]	; (8000400 <Thrower_Send+0xf0>)
 8000324:	f004 febc 	bl	80050a0 <HAL_TIM_PWM_Stop_DMA>
	int csum = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
	int csum_data = packet;
 800032c:	897b      	ldrh	r3, [r7, #10]
 800032e:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 3; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	61fb      	str	r3, [r7, #28]
 8000334:	e009      	b.n	800034a <Thrower_Send+0x3a>
		csum ^=  csum_data;   // xor data by nibbles
 8000336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4053      	eors	r3, r2
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
		csum_data >>= 4;
 800033e:	6a3b      	ldr	r3, [r7, #32]
 8000340:	111b      	asrs	r3, r3, #4
 8000342:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 3; i++) {
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	3301      	adds	r3, #1
 8000348:	61fb      	str	r3, [r7, #28]
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	2b02      	cmp	r3, #2
 800034e:	ddf2      	ble.n	8000336 <Thrower_Send+0x26>
	}
	csum &= 0xf;
 8000350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	627b      	str	r3, [r7, #36]	; 0x24
	// append checksum
	packet = (packet << 4) | csum;
 8000358:	897b      	ldrh	r3, [r7, #10]
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	b21a      	sxth	r2, r3
 800035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000360:	b21b      	sxth	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b21b      	sxth	r3, r3
 8000366:	817b      	strh	r3, [r7, #10]

	for (int i=15; i>=0; i--)
 8000368:	230f      	movs	r3, #15
 800036a:	61bb      	str	r3, [r7, #24]
 800036c:	e017      	b.n	800039e <Thrower_Send+0x8e>
	{
		if (packet&(1<<i))
 800036e:	897a      	ldrh	r2, [r7, #10]
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	fa42 f303 	asr.w	r3, r2, r3
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d006      	beq.n	800038c <Thrower_Send+0x7c>
		{
			pwmData[i] = 798;
 800037e:	4a21      	ldr	r2, [pc, #132]	; (8000404 <Thrower_Send+0xf4>)
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	f240 311e 	movw	r1, #798	; 0x31e
 8000386:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800038a:	e005      	b.n	8000398 <Thrower_Send+0x88>
		}
		else pwmData[i] = 399;
 800038c:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <Thrower_Send+0xf4>)
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	f240 118f 	movw	r1, #399	; 0x18f
 8000394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=15; i>=0; i--)
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	3b01      	subs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	dae4      	bge.n	800036e <Thrower_Send+0x5e>
	}

	//pwmData[11] = 399;

	for (int i=19; i>=16; i--)
 80003a4:	2313      	movs	r3, #19
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	e007      	b.n	80003ba <Thrower_Send+0xaa>
	{
		pwmData[i] = 0;
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <Thrower_Send+0xf4>)
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	2100      	movs	r1, #0
 80003b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=19; i>=16; i--)
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	2b0f      	cmp	r3, #15
 80003be:	dcf4      	bgt.n	80003aa <Thrower_Send+0x9a>
	}
	int counter = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
	for (int i = 19; i >= 0; i--){
 80003c4:	2313      	movs	r3, #19
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e00d      	b.n	80003e6 <Thrower_Send+0xd6>
		ThrData[counter] = pwmData[i];
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <Thrower_Send+0xf4>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <Thrower_Send+0xf8>)
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counter++;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	3301      	adds	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
	for (int i = 19; i >= 0; i--){
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	daee      	bge.n	80003ca <Thrower_Send+0xba>
	}

	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t *)ThrData, 20);
 80003ec:	2314      	movs	r3, #20
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <Thrower_Send+0xf8>)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <Thrower_Send+0xf0>)
 80003f4:	f004 fc42 	bl	8004c7c <HAL_TIM_PWM_Start_DMA>
}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	; 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000424 	.word	0x20000424
 8000404:	20000614 	.word	0x20000614
 8000408:	2000063c 	.word	0x2000063c

0800040c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
	if (enable_pid == 1){
 8000414:	4b55      	ldr	r3, [pc, #340]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	f040 80a2 	bne.w	8000562 <HAL_TIM_PeriodElapsedCallback+0x156>
				motor1Control.newspeed = new_speed;
				HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, 1);
			}

		TIM4->CCR1 = motor1Control.newspeed;*/
		position = (int16_t)TIM1->CNT;
 800041e:	4b54      	ldr	r3, [pc, #336]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000422:	81fb      	strh	r3, [r7, #14]
		int32_t pwmValue = PIDcontrol(&motor1Control, position);
 8000424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000428:	4619      	mov	r1, r3
 800042a:	4852      	ldr	r0, [pc, #328]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800042c:	f7ff ff38 	bl	80002a0 <PIDcontrol>
 8000430:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	0fdb      	lsrs	r3, r3, #31
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	2108      	movs	r1, #8
 800043c:	484e      	ldr	r0, [pc, #312]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800043e:	f001 fdb7 	bl	8001fb0 <HAL_GPIO_WritePin>
		TIM4->CCR1 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bfb8      	it	lt
 8000448:	425b      	neglt	r3, r3
 800044a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fee1 	bl	8000218 <clamp>
 8000456:	4603      	mov	r3, r0
 8000458:	b29a      	uxth	r2, r3
 800045a:	4b48      	ldr	r3, [pc, #288]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, GPIO_PIN_SET);
		//TIM4->CCR1 = TIM4->CCR1 > 65500 ? 0 : TIM4->CCR1 + 100;

		encoder.m1_pwm = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2b00      	cmp	r3, #0
 8000462:	bfb8      	it	lt
 8000464:	425b      	neglt	r3, r3
 8000466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fed3 	bl	8000218 <clamp>
 8000472:	4603      	mov	r3, r0
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b42      	ldr	r3, [pc, #264]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000478:	80da      	strh	r2, [r3, #6]

		position = (int16_t)TIM2->CNT;
 800047a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor2Control, position);
 8000482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000486:	4619      	mov	r1, r3
 8000488:	483e      	ldr	r0, [pc, #248]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800048a:	f7ff ff09 	bl	80002a0 <PIDcontrol>
 800048e:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	0fdb      	lsrs	r3, r3, #31
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	2110      	movs	r1, #16
 800049a:	4837      	ldr	r0, [pc, #220]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800049c:	f001 fd88 	bl	8001fb0 <HAL_GPIO_WritePin>
		TIM4->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bfb8      	it	lt
 80004a6:	425b      	neglt	r3, r3
 80004a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff feb2 	bl	8000218 <clamp>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	4b30      	ldr	r3, [pc, #192]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80004ba:	639a      	str	r2, [r3, #56]	; 0x38

		encoder.m2_pwm = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	bfb8      	it	lt
 80004c2:	425b      	neglt	r3, r3
 80004c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea4 	bl	8000218 <clamp>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80004d6:	811a      	strh	r2, [r3, #8]
		position = (int16_t)TIM3->CNT;
 80004d8:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor3Control, position);
 80004de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004e2:	4619      	mov	r1, r3
 80004e4:	4829      	ldr	r0, [pc, #164]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80004e6:	f7ff fedb 	bl	80002a0 <PIDcontrol>
 80004ea:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	0fdb      	lsrs	r3, r3, #31
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	2120      	movs	r1, #32
 80004f6:	4820      	ldr	r0, [pc, #128]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80004f8:	f001 fd5a 	bl	8001fb0 <HAL_GPIO_WritePin>
		TIM4->CCR3 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe84 	bl	8000218 <clamp>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
						HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 1);
					}

		TIM4->CCR3 = motor3Control.newspeed;*/

		timer+=1;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000522:	801a      	strh	r2, [r3, #0]
		if (timer == 50){
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	2b32      	cmp	r3, #50	; 0x32
 800052a:	d11a      	bne.n	8000562 <HAL_TIM_PeriodElapsedCallback+0x156>
			timer = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
			enable_pid = 0;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000534:	2200      	movs	r2, #0
 8000536:	801a      	strh	r2, [r3, #0]

			motor1Control.speed = 0;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
			TIM4->CCR1 = 0;
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000546:	2200      	movs	r2, #0
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800054c:	2200      	movs	r2, #0
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
			motor2Control.speed = 0;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000552:	2200      	movs	r2, #0
 8000554:	801a      	strh	r2, [r3, #0]
			motor3Control.speed = 0;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000558:	2200      	movs	r2, #0
 800055a:	801a      	strh	r2, [r3, #0]
			Thrower_Send(0);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fed7 	bl	8000310 <Thrower_Send>

		}

	}

}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200001fe 	.word	0x200001fe
 8000570:	40012c00 	.word	0x40012c00
 8000574:	20000000 	.word	0x20000000
 8000578:	48000400 	.word	0x48000400
 800057c:	40000800 	.word	0x40000800
 8000580:	20000044 	.word	0x20000044
 8000584:	20000014 	.word	0x20000014
 8000588:	40000400 	.word	0x40000400
 800058c:	20000028 	.word	0x20000028
 8000590:	200001fc 	.word	0x200001fc

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 ff0b 	bl	80013b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f8bc 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fc30 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 fbda 	bl	8000d5c <MX_DMA_Init>
  MX_TIM2_Init();
 80005a8:	f000 f978 	bl	800089c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 f9ca 	bl	8000944 <MX_TIM3_Init>
  MX_TIM1_Init();
 80005b0:	f000 f91a 	bl	80007e8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80005b4:	f000 fa1c 	bl	80009f0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005b8:	f000 fac2 	bl	8000b40 <MX_TIM8_Init>
  MX_TIM6_Init();
 80005bc:	f000 fa88 	bl	8000ad0 <MX_TIM6_Init>
  MX_USB_Device_Init();
 80005c0:	f009 fef8 	bl	800a3b4 <MX_USB_Device_Init>
  MX_TIM17_Init();
 80005c4:	f000 fb50 	bl	8000c68 <MX_TIM17_Init>
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 0);
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 1);



  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4842      	ldr	r0, [pc, #264]	; (80006d4 <main+0x140>)
 80005cc:	f004 fa56 	bl	8004a7c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005d0:	2104      	movs	r1, #4
 80005d2:	4841      	ldr	r0, [pc, #260]	; (80006d8 <main+0x144>)
 80005d4:	f004 fefa 	bl	80053cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005d8:	2104      	movs	r1, #4
 80005da:	4840      	ldr	r0, [pc, #256]	; (80006dc <main+0x148>)
 80005dc:	f004 fef6 	bl	80053cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	483f      	ldr	r0, [pc, #252]	; (80006e0 <main+0x14c>)
 80005e4:	f004 fef2 	bl	80053cc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	483e      	ldr	r0, [pc, #248]	; (80006e4 <main+0x150>)
 80005ec:	f004 fa46 	bl	8004a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005f0:	2104      	movs	r1, #4
 80005f2:	483c      	ldr	r0, [pc, #240]	; (80006e4 <main+0x150>)
 80005f4:	f004 fa42 	bl	8004a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005f8:	2108      	movs	r1, #8
 80005fa:	483a      	ldr	r0, [pc, #232]	; (80006e4 <main+0x150>)
 80005fc:	f004 fa3e 	bl	8004a7c <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);



  TIM17->CCR1 = 65535;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <main+0x154>)
 8000602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 8000608:	2064      	movs	r0, #100	; 0x64
 800060a:	f000 ff43 	bl	8001494 <HAL_Delay>
  TIM17->CCR1 = 61750;
 800060e:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <main+0x154>)
 8000610:	f24f 1236 	movw	r2, #61750	; 0xf136
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 ff3c 	bl	8001494 <HAL_Delay>
  TIM17->CCR1 = 65535;
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <main+0x154>)
 800061e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR1 = 0;
 8000624:	4b31      	ldr	r3, [pc, #196]	; (80006ec <main+0x158>)
 8000626:	2200      	movs	r2, #0
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <main+0x158>)
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 0;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <main+0x158>)
 8000632:	2200      	movs	r2, #0
 8000634:	63da      	str	r2, [r3, #60]	; 0x3c

  Thrower_Send(0);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe6a 	bl	8000310 <Thrower_Send>
  //TIM4->CCR2 = 20000;
  //TIM4->CCR1 = 10000;
  //TIM4->CCR2 = 10000;
  //TIM4->CCR3 = 9000;

  HAL_TIM_Base_Start_IT(&htim6);
 800063c:	482c      	ldr	r0, [pc, #176]	; (80006f0 <main+0x15c>)
 800063e:	f004 f95b 	bl	80048f8 <HAL_TIM_Base_Start_IT>
	  TIM4->CCR1 = 5000;
	  TIM4->CCR2 = 5000;
	  TIM4->CCR3 = 5000;
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/

	  if (sendData) {
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <main+0x160>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00d      	beq.n	8000668 <main+0xd4>
		  sendData = 0;
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <main+0x160>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
		  TIM17->CCR1 = 61750;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <main+0x154>)
 8000654:	f24f 1236 	movw	r2, #61750	; 0xf136
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 800065a:	2064      	movs	r0, #100	; 0x64
 800065c:	f000 ff1a 	bl	8001494 <HAL_Delay>
	   	  TIM17->CCR1 = 65535;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0x154>)
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	635a      	str	r2, [r3, #52]	; 0x34

	  }



	  if (isCommandReceived) { // (2)
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <main+0x164>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e7      	beq.n	8000642 <main+0xae>
	        isCommandReceived = 0;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0x164>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3)
	        motor1Control.speed = command.speed1;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0x168>)
 800067a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <main+0x16c>)
 8000680:	801a      	strh	r2, [r3, #0]
	        motor2Control.speed = command.speed2;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0x168>)
 8000684:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <main+0x170>)
 800068a:	801a      	strh	r2, [r3, #0]
	        motor3Control.speed = command.speed3;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0x168>)
 800068e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <main+0x174>)
 8000694:	801a      	strh	r2, [r3, #0]
	        	TIM8->CCR1 = 1800;
	        }
	        else{
	        	TIM8->CCR1 = command.throwerSpeed;
	        }*/
	        Thrower_Send(command.throwerSpeed);
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x168>)
 8000698:	88db      	ldrh	r3, [r3, #6]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fe38 	bl	8000310 <Thrower_Send>
  	        timer = 0;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <main+0x178>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
  	        enable_pid = 1;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x17c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	801a      	strh	r2, [r3, #0]

	        feedback.speed1 = motor1Control.speed; // (4)
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <main+0x16c>)
 80006ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0x180>)
 80006b4:	801a      	strh	r2, [r3, #0]
	        feedback.speed2 = motor2Control.speed;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <main+0x170>)
 80006b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <main+0x180>)
 80006be:	805a      	strh	r2, [r3, #2]
	        feedback.speed3 = motor3Control.speed;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x174>)
 80006c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <main+0x180>)
 80006c8:	809a      	strh	r2, [r3, #4]

	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 80006ca:	2108      	movs	r1, #8
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <main+0x180>)
 80006ce:	f009 ff33 	bl	800a538 <CDC_Transmit_FS>
	  if (sendData) {
 80006d2:	e7b6      	b.n	8000642 <main+0xae>
 80006d4:	2000051c 	.word	0x2000051c
 80006d8:	200006b0 	.word	0x200006b0
 80006dc:	200006fc 	.word	0x200006fc
 80006e0:	200005c8 	.word	0x200005c8
 80006e4:	200004d0 	.word	0x200004d0
 80006e8:	40014800 	.word	0x40014800
 80006ec:	40000800 	.word	0x40000800
 80006f0:	20000664 	.word	0x20000664
 80006f4:	200001fb 	.word	0x200001fb
 80006f8:	200001fa 	.word	0x200001fa
 80006fc:	200001f0 	.word	0x200001f0
 8000700:	20000000 	.word	0x20000000
 8000704:	20000014 	.word	0x20000014
 8000708:	20000028 	.word	0x20000028
 800070c:	200001fc 	.word	0x200001fc
 8000710:	200001fe 	.word	0x200001fe
 8000714:	2000003c 	.word	0x2000003c

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0a4      	sub	sp, #144	; 0x90
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000722:	2238      	movs	r2, #56	; 0x38
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00a fb70 	bl	800ae0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00a fb62 	bl	800ae0c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000748:	2000      	movs	r0, #0
 800074a:	f003 f8dd 	bl	8003908 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800074e:	2322      	movs	r3, #34	; 0x22
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000768:	2301      	movs	r3, #1
 800076a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800076c:	2314      	movs	r3, #20
 800076e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000778:	2304      	movs	r3, #4
 800077a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000788:	4618      	mov	r0, r3
 800078a:	f003 f971 	bl	8003a70 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000794:	f000 fb8a 	bl	8000eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b0:	2104      	movs	r1, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fc74 	bl	80040a0 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007be:	f000 fb75 	bl	8000eac <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fe4a 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007da:	f000 fb67 	bl	8000eac <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3790      	adds	r7, #144	; 0x90
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2224      	movs	r2, #36	; 0x24
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00a fb08 	bl	800ae0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_TIM1_Init+0xac>)
 8000808:	4a23      	ldr	r2, [pc, #140]	; (8000898 <MX_TIM1_Init+0xb0>)
 800080a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_TIM1_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_TIM1_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_TIM1_Init+0xac>)
 800081a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_TIM1_Init+0xac>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM1_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_TIM1_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000832:	2303      	movs	r3, #3
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800083a:	2301      	movs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_TIM1_Init+0xac>)
 800085e:	f004 fd0f 	bl	8005280 <HAL_TIM_Encoder_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000868:	f000 fb20 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM1_Init+0xac>)
 800087e:	f005 fd7d 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000888:	f000 fb10 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200006b0 	.word	0x200006b0
 8000898:	40012c00 	.word	0x40012c00

0800089c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2224      	movs	r2, #36	; 0x24
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00a faae 	bl	800ae0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_TIM2_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ea:	2301      	movs	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_TIM2_Init+0xa4>)
 800090e:	f004 fcb7 	bl	8005280 <HAL_TIM_Encoder_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000918:	f000 fac8 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_TIM2_Init+0xa4>)
 800092a:	f005 fd27 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000934:	f000 faba 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200006fc 	.word	0x200006fc

08000944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2224      	movs	r2, #36	; 0x24
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00a fa5a 	bl	800ae0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_TIM3_Init+0xa4>)
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_TIM3_Init+0xa8>)
 8000966:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM3_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM3_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM3_Init+0xa4>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM3_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM3_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000988:	2303      	movs	r3, #3
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_TIM3_Init+0xa4>)
 80009b4:	f004 fc64 	bl	8005280 <HAL_TIM_Encoder_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009be:	f000 fa75 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_TIM3_Init+0xa4>)
 80009d0:	f005 fcd4 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009da:	f000 fa67 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200005c8 	.word	0x200005c8
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <MX_TIM4_Init+0xdc>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a3a:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a3c:	f003 ffc6 	bl	80049cc <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a46:	f000 fa31 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a5a:	f005 fc8f 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a64:	f000 fa22 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a80:	f004 feb2 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a8a:	f000 fa0f 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000a96:	f004 fea7 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000aa0:	f000 fa04 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000aac:	f004 fe9c 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000ab6:	f000 f9f9 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM4_Init+0xd8>)
 8000abc:	f000 fb68 	bl	8001190 <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200004d0 	.word	0x200004d0
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <MX_TIM6_Init+0x6c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000ae8:	f240 623f 	movw	r2, #1599	; 0x63f
 8000aec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000af6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000b04:	f003 fea0 	bl	8004848 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b0e:	f000 f9cd 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_TIM6_Init+0x68>)
 8000b20:	f005 fc2c 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b2a:	f000 f9bf 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000664 	.word	0x20000664
 8000b3c:	40001000 	.word	0x40001000

08000b40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2234      	movs	r2, #52	; 0x34
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00a f94d 	bl	800ae0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b74:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <MX_TIM8_Init+0x124>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b78:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1066;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b86:	f240 422a 	movw	r2, #1066	; 0x42a
 8000b8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b9e:	4830      	ldr	r0, [pc, #192]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000ba0:	f003 ff14 	bl	80049cc <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f97f 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4827      	ldr	r0, [pc, #156]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000bc2:	f005 fbdb 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f000 f96e 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481a      	ldr	r0, [pc, #104]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000bf6:	f004 fdf7 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000c00:	f000 f954 	bl	8000eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000c42:	f005 fc1d 	bl	8006480 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c4c:	f000 f92e 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_TIM8_Init+0x120>)
 8000c52:	f000 fa9d 	bl	8001190 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3760      	adds	r7, #96	; 0x60
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000424 	.word	0x20000424
 8000c64:	40013400 	.word	0x40013400

08000c68 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2234      	movs	r2, #52	; 0x34
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00a f8bf 	bl	800ae0c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000c90:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <MX_TIM17_Init+0xf0>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cba:	4826      	ldr	r0, [pc, #152]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000cbc:	f003 fdc4 	bl	8004848 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000cc6:	f000 f8f1 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000ccc:	f003 fe7e 	bl	80049cc <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000cd6:	f000 f8e9 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4815      	ldr	r0, [pc, #84]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000d00:	f004 fd72 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d0a:	f000 f8cf 	bl	8000eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4807      	ldr	r0, [pc, #28]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000d36:	f005 fba3 	bl	8006480 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d40:	f000 f8b4 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <MX_TIM17_Init+0xec>)
 8000d46:	f000 fa23 	bl	8001190 <HAL_TIM_MspPostInit>

}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000051c 	.word	0x2000051c
 8000d58:	40014800 	.word	0x40014800

08000d5c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6493      	str	r3, [r2, #72]	; 0x48
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_DMA_Init+0x9c>)
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <MX_DMA_Init+0xa4>)
 8000d96:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db6:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dbe:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <MX_DMA_Init+0xa0>)
 8000dd0:	f000 fc92 	bl	80016f8 <HAL_DMA_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000dda:	f000 f867 	bl	8000eac <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200c      	movs	r0, #12
 8000de4:	f000 fc53 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000de8:	200c      	movs	r0, #12
 8000dea:	f000 fc6a 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	20000470 	.word	0x20000470
 8000e00:	40020008 	.word	0x40020008

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f001 f8ad 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_D_Pin|M2_D_Pin|M3_D_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2138      	movs	r1, #56	; 0x38
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e5c:	f001 f8a8 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e60:	2304      	movs	r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7a:	f000 ff17 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_D_Pin M2_D_Pin M3_D_Pin */
  GPIO_InitStruct.Pin = M1_D_Pin|M2_D_Pin|M3_D_Pin;
 8000e7e:	2338      	movs	r3, #56	; 0x38
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e96:	f000 ff09 	bl	8001cac <HAL_GPIO_Init>

}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x44>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x44>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x44>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x44>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eee:	f002 fdaf 	bl	8003a50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a47      	ldr	r2, [pc, #284]	; (800103c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12a      	bne.n	8000f78 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a46      	ldr	r2, [pc, #280]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f64:	2306      	movs	r3, #6
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f000 fe9b 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f76:	e05c      	b.n	8001032 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d129      	bne.n	8000fd6 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f000 fe6c 	bl	8001cac <HAL_GPIO_Init>
}
 8000fd4:	e02d      	b.n	8001032 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <HAL_TIM_Encoder_MspInit+0x144>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d128      	bne.n	8001032 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_TIM_Encoder_MspInit+0x140>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001010:	2350      	movs	r3, #80	; 0x50
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001020:	2302      	movs	r3, #2
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f000 fe3d 	bl	8001cac <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3738      	adds	r7, #56	; 0x38
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40000400 	.word	0x40000400

08001048 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <HAL_TIM_PWM_MspInit+0xc0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d114      	bne.n	8001084 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a2b      	ldr	r2, [pc, #172]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	201e      	movs	r0, #30
 8001078:	f000 fb09 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800107c:	201e      	movs	r0, #30
 800107e:	f000 fb20 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001082:	e03c      	b.n	80010fe <HAL_TIM_PWM_MspInit+0xb6>
  else if(htim_pwm->Instance==TIM8)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_TIM_PWM_MspInit+0xc8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d137      	bne.n	80010fe <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 8001094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_TIM_PWM_MspInit+0xc4>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Channel2;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_TIM_PWM_MspInit+0xd0>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010ae:	2231      	movs	r2, #49	; 0x31
 80010b0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010b4:	2210      	movs	r2, #16
 80010b6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010d6:	2220      	movs	r2, #32
 80010d8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010e4:	f000 fb08 	bl	80016f8 <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 80010ee:	f7ff fedd 	bl	8000eac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_TIM_PWM_MspInit+0xcc>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6293      	str	r3, [r2, #40]	; 0x28
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000800 	.word	0x40000800
 800110c:	40021000 	.word	0x40021000
 8001110:	40013400 	.word	0x40013400
 8001114:	20000568 	.word	0x20000568
 8001118:	4002001c 	.word	0x4002001c

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d114      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2036      	movs	r0, #54	; 0x36
 800114c:	f000 fa9f 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001150:	2036      	movs	r0, #54	; 0x36
 8001152:	f000 fab6 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001156:	e010      	b.n	800117a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_TIM_Base_MspInit+0x70>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10b      	bne.n	800117a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_TIM_Base_MspInit+0x6c>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40001000 	.word	0x40001000
 8001188:	40021000 	.word	0x40021000
 800118c:	40014800 	.word	0x40014800

08001190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a35      	ldr	r2, [pc, #212]	; (8001284 <HAL_TIM_MspPostInit+0xf4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d11d      	bne.n	80011ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80011ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011dc:	2302      	movs	r3, #2
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4829      	ldr	r0, [pc, #164]	; (800128c <HAL_TIM_MspPostInit+0xfc>)
 80011e8:	f000 fd60 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011ec:	e045      	b.n	800127a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_TIM_MspPostInit+0x100>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d11e      	bne.n	8001236 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fd3c 	bl	8001cac <HAL_GPIO_Init>
}
 8001234:	e021      	b.n	800127a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM17)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_TIM_MspPostInit+0x104>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d11c      	bne.n	800127a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0xf8>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001268:	2301      	movs	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f000 fd19 	bl	8001cac <HAL_GPIO_Init>
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000800 	.word	0x40000800
 8001288:	40021000 	.word	0x40021000
 800128c:	48000400 	.word	0x48000400
 8001290:	40013400 	.word	0x40013400
 8001294:	40014800 	.word	0x40014800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f8b8 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA1_Channel2_IRQHandler+0x10>)
 80012f2:	f000 fb8b 	bl	8001a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000568 	.word	0x20000568

08001300 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USB_LP_IRQHandler+0x10>)
 8001306:	f000 ff72 	bl	80021ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200013ec 	.word	0x200013ec

08001314 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM4_IRQHandler+0x10>)
 800131a:	f004 f8e5 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200004d0 	.word	0x200004d0

08001328 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM6_DAC_IRQHandler+0x10>)
 800132e:	f004 f8db 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000664 	.word	0x20000664

0800133c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800137c:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff ffd7 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f009 fd0b 	bl	800ada8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff f8ff 	bl	8000594 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   r0, =_estack
 8001398:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013a4:	0800ae94 	.word	0x0800ae94
  ldr r2, =_sbss
 80013a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80013ac:	200016e0 	.word	0x200016e0

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>

080013b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f95b 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f80e 	bl	80013e4 <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	e001      	b.n	80013d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d4:	f7ff fd70 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d8:	79fb      	ldrb	r3, [r7, #7]

}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_InitTick+0x68>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d022      	beq.n	800143e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_InitTick+0x6c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_InitTick+0x68>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001404:	fbb1 f3f3 	udiv	r3, r1, r3
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f966 	bl	80016de <HAL_SYSTICK_Config>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10f      	bne.n	8001438 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d809      	bhi.n	8001432 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141e:	2200      	movs	r2, #0
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	f04f 30ff 	mov.w	r0, #4294967295
 8001426:	f000 f932 	bl	800168e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_InitTick+0x70>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e007      	b.n	8001442 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e004      	b.n	8001442 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000058 	.word	0x20000058
 8001450:	20000050 	.word	0x20000050
 8001454:	20000054 	.word	0x20000054

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x1c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x20>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_IncTick+0x1c>)
 8001468:	6013      	str	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000748 	.word	0x20000748
 8001478:	20000058 	.word	0x20000058

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000748 	.word	0x20000748

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d004      	beq.n	80014b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_Delay+0x40>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b8:	bf00      	nop
 80014ba:	f7ff ffdf 	bl	800147c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8f7      	bhi.n	80014ba <HAL_Delay+0x26>
  {
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000058 	.word	0x20000058

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff40 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa4 	bl	8001634 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e08d      	b.n	8001826 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_DMA_Init+0x138>)
 8001712:	429a      	cmp	r2, r3
 8001714:	d80f      	bhi.n	8001736 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_DMA_Init+0x13c>)
 800171e:	4413      	add	r3, r2
 8001720:	4a45      	ldr	r2, [pc, #276]	; (8001838 <HAL_DMA_Init+0x140>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	009a      	lsls	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a42      	ldr	r2, [pc, #264]	; (800183c <HAL_DMA_Init+0x144>)
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
 8001734:	e00e      	b.n	8001754 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_DMA_Init+0x148>)
 800173e:	4413      	add	r3, r2
 8001740:	4a3d      	ldr	r2, [pc, #244]	; (8001838 <HAL_DMA_Init+0x140>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a3c      	ldr	r2, [pc, #240]	; (8001844 <HAL_DMA_Init+0x14c>)
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800176a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fa1e 	bl	8001be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b4:	d102      	bne.n	80017bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d010      	beq.n	80017fc <HAL_DMA_Init+0x104>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d80c      	bhi.n	80017fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa3e 	bl	8001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e008      	b.n	800180e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40020407 	.word	0x40020407
 8001834:	bffdfff8 	.word	0xbffdfff8
 8001838:	cccccccd 	.word	0xcccccccd
 800183c:	40020000 	.word	0x40020000
 8001840:	bffdfbf8 	.word	0xbffdfbf8
 8001844:	40020400 	.word	0x40020400

08001848 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_DMA_Start_IT+0x20>
 8001864:	2302      	movs	r3, #2
 8001866:	e066      	b.n	8001936 <HAL_DMA_Start_IT+0xee>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d155      	bne.n	8001928 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f962 	bl	8001b6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 020e 	orr.w	r2, r2, #14
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e00f      	b.n	80018e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 020a 	orr.w	r2, r2, #10
 80018de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001914:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e005      	b.n	8001934 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001930:	2302      	movs	r3, #2
 8001932:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001934:	7dfb      	ldrb	r3, [r7, #23]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d00d      	beq.n	8001972 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e047      	b.n	8001a02 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 020e 	bic.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
    }
  }
  return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d026      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x7a>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d021      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d071      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a84:	e06c      	b.n	8001b60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2202      	movs	r2, #2
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d02e      	beq.n	8001af8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d029      	beq.n	8001af8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020a 	bic.w	r2, r2, #10
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 021f 	and.w	r2, r3, #31
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d038      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001af6:	e033      	b.n	8001b60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2208      	movs	r2, #8
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02a      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d025      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 020e 	bic.w	r2, r2, #14
 8001b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f003 021f 	and.w	r2, r3, #31
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
}
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b80:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b92:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d108      	bne.n	8001bca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc8:	e007      	b.n	8001bda <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	60da      	str	r2, [r3, #12]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d802      	bhi.n	8001c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e001      	b.n	8001c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c04:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3b08      	subs	r3, #8
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	009a      	lsls	r2, r3, #2
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40020407 	.word	0x40020407
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020820 	.word	0x40020820
 8001c5c:	cccccccd 	.word	0xcccccccd
 8001c60:	40020880 	.word	0x40020880

08001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	1000823f 	.word	0x1000823f
 8001ca8:	40020940 	.word	0x40020940

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cba:	e15a      	b.n	8001f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 814c 	beq.w	8001f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d00b      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce8:	2b11      	cmp	r3, #17
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0201 	and.w	r2, r3, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0xea>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d123      	bne.n	8001dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0203 	and.w	r2, r3, #3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a6 	beq.w	8001f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e2c:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e62:	d01f      	beq.n	8001ea4 <HAL_GPIO_Init+0x1f8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d019      	beq.n	8001ea0 <HAL_GPIO_Init+0x1f4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1f0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_GPIO_Init+0x2f8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	e00a      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e90:	2306      	movs	r3, #6
 8001e92:	e008      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb6:	4937      	ldr	r1, [pc, #220]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f66:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f ae9d 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	48000400 	.word	0x48000400
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	48000c00 	.word	0x48000c00
 8001fa4:	48001000 	.word	0x48001000
 8001fa8:	48001400 	.word	0x48001400
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af06      	add	r7, sp, #24
 8001fe6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d7      	b.n	80021a2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f008 fbde 	bl	800a7c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f004 fb2e 	bl	800667a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e04c      	b.n	80020be <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	3301      	adds	r3, #1
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	b298      	uxth	r0, r3
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3336      	adds	r3, #54	; 0x36
 8002062:	4602      	mov	r2, r0
 8002064:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3303      	adds	r3, #3
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3338      	adds	r3, #56	; 0x38
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	333c      	adds	r3, #60	; 0x3c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3340      	adds	r3, #64	; 0x40
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3ad      	bcc.n	8002024 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e044      	b.n	8002158 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3b5      	bcc.n	80020ce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	687e      	ldr	r6, [r7, #4]
 800216a:	466d      	mov	r5, sp
 800216c:	f106 0410 	add.w	r4, r6, #16
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	602b      	str	r3, [r5, #0]
 8002178:	1d33      	adds	r3, r6, #4
 800217a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f004 fa97 	bl	80066b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f001 fb8a 	bl	80038b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_PCD_Start+0x16>
 80021bc:	2302      	movs	r3, #2
 80021be:	e012      	b.n	80021e6 <HAL_PCD_Start+0x3c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fa3d 	bl	800664c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f006 fbf1 	bl	80089be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 fbf6 	bl	80089ec <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220a:	d102      	bne.n	8002212 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fb4d 	bl	80028ac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f006 fbe8 	bl	80089ec <USB_ReadInterrupts>
 800221c:	4603      	mov	r3, r0
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d112      	bne.n	800224e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f008 fb3c 	bl	800a8be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002246:	2100      	movs	r1, #0
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f91e 	bl	800248a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fbca 	bl	80089ec <USB_ReadInterrupts>
 8002258:	4603      	mov	r3, r0
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002262:	d10b      	bne.n	800227c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f006 fbb3 	bl	80089ec <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002290:	d10b      	bne.n	80022aa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a4:	b292      	uxth	r2, r2
 80022a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f006 fb9c 	bl	80089ec <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022be:	d133      	bne.n	8002328 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	b292      	uxth	r2, r2
 80022d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0208 	bic.w	r2, r2, #8
 80022ea:	b292      	uxth	r2, r2
 80022ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002302:	2100      	movs	r1, #0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f008 fccf 	bl	800aca8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f008 fb10 	bl	800a930 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f006 fb5d 	bl	80089ec <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800233c:	d126      	bne.n	800238c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	b292      	uxth	r2, r2
 8002352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002368:	b292      	uxth	r2, r2
 800236a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002376:	b29a      	uxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	b292      	uxth	r2, r2
 8002382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f008 fab8 	bl	800a8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f006 fb2b 	bl	80089ec <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d13f      	bne.n	8002420 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b2:	b292      	uxth	r2, r2
 80023b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12b      	bne.n	800241a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0204 	orr.w	r2, r2, #4
 80023d4:	b292      	uxth	r2, r2
 80023d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0208 	orr.w	r2, r2, #8
 80023ec:	b292      	uxth	r2, r2
 80023ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002402:	b29b      	uxth	r3, r3
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002410:	2101      	movs	r1, #1
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f008 fc48 	bl	800aca8 <HAL_PCDEx_LPM_Callback>
 8002418:	e002      	b.n	8002420 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f008 fa6e 	bl	800a8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f006 fae1 	bl	80089ec <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d10e      	bne.n	8002454 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002448:	b292      	uxth	r2, r2
 800244a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f008 fa27 	bl	800a8a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fac7 	bl	80089ec <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d10b      	bne.n	8002482 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	b292      	uxth	r2, r2
 800247e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_SetAddress+0x1a>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e013      	b.n	80024cc <HAL_PCD_SetAddress+0x42>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f006 fa6a 	bl	8008996 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	70fb      	strb	r3, [r7, #3]
 80024e6:	460b      	mov	r3, r1
 80024e8:	803b      	strh	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da0e      	bge.n	8002518 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
 8002516:	e00e      	b.n	8002536 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 0207 	and.w	r2, r3, #7
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002542:	883a      	ldrh	r2, [r7, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	78ba      	ldrb	r2, [r7, #2]
 800254c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002560:	78bb      	ldrb	r3, [r7, #2]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d102      	bne.n	800256c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_PCD_EP_Open+0xa6>
 8002576:	2302      	movs	r3, #2
 8002578:	e00e      	b.n	8002598 <HAL_PCD_EP_Open+0xc4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	4618      	mov	r0, r3
 800258a:	f004 f8b3 	bl	80066f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002596:	7afb      	ldrb	r3, [r7, #11]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da0e      	bge.n	80025d2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	705a      	strb	r2, [r3, #1]
 80025d0:	e00e      	b.n	80025f0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 0207 	and.w	r2, r3, #7
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_PCD_EP_Close+0x6a>
 8002606:	2302      	movs	r3, #2
 8002608:	e00e      	b.n	8002628 <HAL_PCD_EP_Close+0x88>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f004 fbd9 	bl	8006dd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	f003 0207 	and.w	r2, r3, #7
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002670:	7afb      	ldrb	r3, [r7, #11]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	b2da      	uxtb	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fd8c 	bl	80071aa <USB_EPStartXfer>
 8002692:	e005      	b.n	80026a0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6979      	ldr	r1, [r7, #20]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fd85 	bl	80071aa <USB_EPStartXfer>
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 0207 	and.w	r2, r3, #7
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80026cc:	681b      	ldr	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	460b      	mov	r3, r1
 80026e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2201      	movs	r2, #1
 8002724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	b2da      	uxtb	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	2b00      	cmp	r3, #0
 800273a:	d106      	bne.n	800274a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6979      	ldr	r1, [r7, #20]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fd31 	bl	80071aa <USB_EPStartXfer>
 8002748:	e005      	b.n	8002756 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	4618      	mov	r0, r3
 8002752:	f004 fd2a 	bl	80071aa <USB_EPStartXfer>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0207 	and.w	r2, r3, #7
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d901      	bls.n	800277e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e03e      	b.n	80027fc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800277e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	da0e      	bge.n	80027a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	705a      	strb	r2, [r3, #1]
 80027a2:	e00c      	b.n	80027be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_PCD_EP_SetStall+0x7e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e00e      	b.n	80027fc <HAL_PCD_EP_SetStall+0x9c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f005 ffd3 	bl	8008798 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d901      	bls.n	8002822 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e040      	b.n	80028a4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	da0e      	bge.n	8002848 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	705a      	strb	r2, [r3, #1]
 8002846:	e00e      	b.n	8002866 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 0207 	and.w	r2, r3, #7
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_PCD_EP_ClrStall+0x82>
 8002882:	2302      	movs	r3, #2
 8002884:	e00e      	b.n	80028a4 <HAL_PCD_EP_ClrStall+0xa0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	4618      	mov	r0, r3
 8002896:	f005 ffd0 	bl	800883a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028b4:	e2d6      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028be:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80028c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80028cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 815b 	bne.w	8002b8c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d150      	bne.n	8002982 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f0:	81fb      	strh	r3, [r7, #14]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002900:	b29b      	uxth	r3, r3
 8002902:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3328      	adds	r3, #40	; 0x28
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4413      	add	r3, r2
 8002924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	441a      	add	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002940:	2100      	movs	r1, #0
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f007 ff93 	bl	800a86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8287 	beq.w	8002e64 <PCD_EP_ISR_Handler+0x5b8>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 8282 	bne.w	8002e64 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296c:	b2da      	uxtb	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b292      	uxth	r2, r2
 8002974:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002980:	e270      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002992:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	2b00      	cmp	r3, #0
 800299a:	d032      	beq.n	8002a02 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f006 f85a 	bl	8008a90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029e8:	4013      	ands	r3, r2
 80029ea:	823b      	strh	r3, [r7, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	8a3a      	ldrh	r2, [r7, #16]
 80029f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f6:	b292      	uxth	r2, r2
 80029f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f007 ff0a 	bl	800a814 <HAL_PCD_SetupStageCallback>
 8002a00:	e230      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f280 822c 	bge.w	8002e64 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a18:	4013      	ands	r3, r2
 8002a1a:	83bb      	strh	r3, [r7, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	8bba      	ldrh	r2, [r7, #28]
 8002a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a26:	b292      	uxth	r2, r2
 8002a28:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <PCD_EP_ISR_Handler+0x1e2>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6959      	ldr	r1, [r3, #20]
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f006 f80c 	bl	8008a90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	441a      	add	r2, r3
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a86:	2100      	movs	r1, #0
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f007 fed5 	bl	800a838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 81e2 	bne.w	8002e64 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d112      	bne.n	8002aee <PCD_EP_ISR_Handler+0x242>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	e02f      	b.n	8002b4e <PCD_EP_ISR_Handler+0x2a2>
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b3e      	cmp	r3, #62	; 0x3e
 8002af4:	d813      	bhi.n	8002b1e <PCD_EP_ISR_Handler+0x272>
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <PCD_EP_ISR_Handler+0x264>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	029b      	lsls	r3, r3, #10
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	e017      	b.n	8002b4e <PCD_EP_ISR_Handler+0x2a2>
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <PCD_EP_ISR_Handler+0x28c>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	827b      	strh	r3, [r7, #18]
 8002b60:	8a7b      	ldrh	r3, [r7, #18]
 8002b62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b66:	827b      	strh	r3, [r7, #18]
 8002b68:	8a7b      	ldrh	r3, [r7, #18]
 8002b6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b6e:	827b      	strh	r3, [r7, #18]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	8a7b      	ldrh	r3, [r7, #18]
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
 8002b8a:	e16b      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b9e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f280 80e4 	bge.w	8002d70 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	853b      	strh	r3, [r7, #40]	; 0x28
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002bda:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	7b1b      	ldrb	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d120      	bne.n	8002c3a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002c1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8083 	beq.w	8002d2c <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	6959      	ldr	r1, [r3, #20]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	88da      	ldrh	r2, [r3, #6]
 8002c32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c34:	f005 ff2c 	bl	8008a90 <USB_ReadPMA>
 8002c38:	e078      	b.n	8002d2c <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	78db      	ldrb	r3, [r3, #3]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d108      	bne.n	8002c54 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c44:	461a      	mov	r2, r3
 8002c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f919 	bl	8002e80 <HAL_PCD_EP_DB_Receive>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c52:	e06b      	b.n	8002d2c <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01f      	beq.n	8002cee <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002cd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d028      	beq.n	8002d2c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	6959      	ldr	r1, [r3, #20]
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	891a      	ldrh	r2, [r3, #8]
 8002ce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ce8:	f005 fed2 	bl	8008a90 <USB_ReadPMA>
 8002cec:	e01e      	b.n	8002d2c <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d12:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	895a      	ldrh	r2, [r3, #10]
 8002d26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d28:	f005 feb2 	bl	8008a90 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d32:	441a      	add	r2, r3
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d3e:	441a      	add	r2, r3
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <PCD_EP_ISR_Handler+0x4aa>
 8002d4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d206      	bcs.n	8002d64 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f007 fd6b 	bl	800a838 <HAL_PCD_DataOutStageCallback>
 8002d62:	e005      	b.n	8002d70 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 fa1d 	bl	80071aa <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d074      	beq.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	843b      	strh	r3, [r7, #32]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	8c3b      	ldrh	r3, [r7, #32]
 8002dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	78db      	ldrb	r3, [r3, #3]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d144      	bne.n	8002e58 <PCD_EP_ISR_Handler+0x5ac>
 8002dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d13f      	bne.n	8002e58 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	8bfb      	ldrh	r3, [r7, #30]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d906      	bls.n	8002e16 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	8bfb      	ldrh	r3, [r7, #30]
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	619a      	str	r2, [r3, #24]
 8002e14:	e002      	b.n	8002e1c <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f007 fd1f 	bl	800a86e <HAL_PCD_DataInStageCallback>
 8002e30:	e018      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	8bfb      	ldrh	r3, [r7, #30]
 8002e38:	441a      	add	r2, r3
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	8bfb      	ldrh	r3, [r7, #30]
 8002e44:	441a      	add	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 f9aa 	bl	80071aa <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002e56:	e005      	b.n	8002e64 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f917 	bl	8003092 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f6ff ad20 	blt.w	80028b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3738      	adds	r7, #56	; 0x38
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07c      	beq.n	8002f92 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	8b7b      	ldrh	r3, [r7, #26]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d306      	bcc.n	8002ed6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	619a      	str	r2, [r3, #24]
 8002ed4:	e002      	b.n	8002edc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d123      	bne.n	8002f2c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	833b      	strh	r3, [r7, #24]
 8002f00:	8b3b      	ldrh	r3, [r7, #24]
 8002f02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f06:	833b      	strh	r3, [r7, #24]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	8b3b      	ldrh	r3, [r7, #24]
 8002f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01f      	beq.n	8002f76 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	82fb      	strh	r3, [r7, #22]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	8afb      	ldrh	r3, [r7, #22]
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f76:	8b7b      	ldrh	r3, [r7, #26]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8085 	beq.w	8003088 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6959      	ldr	r1, [r3, #20]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	891a      	ldrh	r2, [r3, #8]
 8002f8a:	8b7b      	ldrh	r3, [r7, #26]
 8002f8c:	f005 fd80 	bl	8008a90 <USB_ReadPMA>
 8002f90:	e07a      	b.n	8003088 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	8b7b      	ldrh	r3, [r7, #26]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d306      	bcc.n	8002fd0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	8b7b      	ldrh	r3, [r7, #26]
 8002fc8:	1ad2      	subs	r2, r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	619a      	str	r2, [r3, #24]
 8002fce:	e002      	b.n	8002fd6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d123      	bne.n	8003026 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	83fb      	strh	r3, [r7, #30]
 8002ffa:	8bfb      	ldrh	r3, [r7, #30]
 8002ffc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003000:	83fb      	strh	r3, [r7, #30]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	441a      	add	r2, r3
 8003010:	8bfb      	ldrh	r3, [r7, #30]
 8003012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003022:	b29b      	uxth	r3, r3
 8003024:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11f      	bne.n	8003070 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	83bb      	strh	r3, [r7, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	8bbb      	ldrh	r3, [r7, #28]
 800305c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800306c:	b29b      	uxth	r3, r3
 800306e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003070:	8b7b      	ldrh	r3, [r7, #26]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6959      	ldr	r1, [r3, #20]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	895a      	ldrh	r2, [r3, #10]
 8003082:	8b7b      	ldrh	r3, [r7, #26]
 8003084:	f005 fd04 	bl	8008a90 <USB_ReadPMA>
    }
  }

  return count;
 8003088:	8b7b      	ldrh	r3, [r7, #26]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b0a2      	sub	sp, #136	; 0x88
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	4613      	mov	r3, r2
 800309e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 81c5 	beq.w	8003436 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030dc:	429a      	cmp	r2, r3
 80030de:	d907      	bls.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e8:	1ad2      	subs	r2, r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	e002      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 80b9 	bne.w	8003272 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d126      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	4413      	add	r3, r2
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	4413      	add	r3, r2
 800312a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313a:	b29a      	uxth	r2, r3
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314e:	b29a      	uxth	r2, r3
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	e01a      	b.n	800318c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d116      	bne.n	800318c <HAL_PCD_EP_DB_Transmit+0xfa>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	4413      	add	r3, r2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00da      	lsls	r2, r3, #3
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	4413      	add	r3, r2
 8003180:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2200      	movs	r2, #0
 800318a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d126      	bne.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x156>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00da      	lsls	r2, r3, #3
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	e017      	b.n	8003218 <HAL_PCD_EP_DB_Transmit+0x186>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d113      	bne.n	8003218 <HAL_PCD_EP_DB_Transmit+0x186>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	4413      	add	r3, r2
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	00da      	lsls	r2, r3, #3
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	4413      	add	r3, r2
 800320c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2200      	movs	r2, #0
 8003216:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f007 fb25 	bl	800a86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 82d2 	beq.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	827b      	strh	r3, [r7, #18]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	8a7b      	ldrh	r3, [r7, #18]
 800325c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	b29b      	uxth	r3, r3
 800326e:	8013      	strh	r3, [r2, #0]
 8003270:	e2b0      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d021      	beq.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032bc:	b29b      	uxth	r3, r3
 80032be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 8284 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032d4:	441a      	add	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e2:	441a      	add	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d309      	bcc.n	8003308 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	621a      	str	r2, [r3, #32]
 8003306:	e015      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8003310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003314:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800331e:	e009      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d155      	bne.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x356>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	4413      	add	r3, r2
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	00da      	lsls	r2, r3, #3
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	4413      	add	r3, r2
 800335e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	2b00      	cmp	r3, #0
 8003368:	d112      	bne.n	8003390 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003374:	b29a      	uxth	r2, r3
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	801a      	strh	r2, [r3, #0]
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003388:	b29a      	uxth	r2, r3
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e047      	b.n	8003420 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003392:	2b3e      	cmp	r3, #62	; 0x3e
 8003394:	d811      	bhi.n	80033ba <HAL_PCD_EP_DB_Transmit+0x328>
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_PCD_EP_DB_Transmit+0x31a>
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	3301      	adds	r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	029b      	lsls	r3, r3, #10
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	e032      	b.n	8003420 <HAL_PCD_EP_DB_Transmit+0x38e>
 80033ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_PCD_EP_DB_Transmit+0x33e>
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	3b01      	subs	r3, #1
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e01b      	b.n	8003420 <HAL_PCD_EP_DB_Transmit+0x38e>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d117      	bne.n	8003420 <HAL_PCD_EP_DB_Transmit+0x38e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	643b      	str	r3, [r7, #64]	; 0x40
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003404:	4413      	add	r3, r2
 8003406:	643b      	str	r3, [r7, #64]	; 0x40
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	00da      	lsls	r2, r3, #3
 800340e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003410:	4413      	add	r3, r2
 8003412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341a:	b29a      	uxth	r2, r3
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6959      	ldr	r1, [r3, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	891a      	ldrh	r2, [r3, #8]
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	f005 faec 	bl	8008a0c <USB_WritePMA>
 8003434:	e1ce      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4413      	add	r3, r2
 8003450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003466:	429a      	cmp	r2, r3
 8003468:	d307      	bcc.n	800347a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	e002      	b.n	8003480 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 80c4 	bne.w	8003612 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d126      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a6:	4413      	add	r3, r2
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	00da      	lsls	r2, r3, #3
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e01a      	b.n	8003516 <HAL_PCD_EP_DB_Transmit+0x484>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d116      	bne.n	8003516 <HAL_PCD_EP_DB_Transmit+0x484>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	677b      	str	r3, [r7, #116]	; 0x74
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	4413      	add	r3, r2
 80034fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	00da      	lsls	r2, r3, #3
 8003506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003508:	4413      	add	r3, r2
 800350a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800350e:	673b      	str	r3, [r7, #112]	; 0x70
 8003510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	67bb      	str	r3, [r7, #120]	; 0x78
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d12f      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003534:	b29b      	uxth	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800353c:	4413      	add	r3, r2
 800353e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	00da      	lsls	r2, r3, #3
 8003548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800354c:	4413      	add	r3, r2
 800354e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003562:	b29a      	uxth	r2, r3
 8003564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357a:	b29a      	uxth	r2, r3
 800357c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	e017      	b.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x522>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d113      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x522>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359a:	4413      	add	r3, r2
 800359c:	67bb      	str	r3, [r7, #120]	; 0x78
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	00da      	lsls	r2, r3, #3
 80035a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035b0:	2200      	movs	r2, #0
 80035b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f007 f957 	bl	800a86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8104 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
 8003610:	e0e0      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800364c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365c:	b29b      	uxth	r3, r3
 800365e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003666:	2b01      	cmp	r3, #1
 8003668:	f040 80b4 	bne.w	80037d4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003674:	441a      	add	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003682:	441a      	add	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	429a      	cmp	r2, r3
 8003692:	d309      	bcc.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	621a      	str	r2, [r3, #32]
 80036a6:	e015      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 80036b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036be:	e009      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	667b      	str	r3, [r7, #100]	; 0x64
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d155      	bne.n	800378e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f6:	4413      	add	r3, r2
 80036f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	00da      	lsls	r2, r3, #3
 8003700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003702:	4413      	add	r3, r2
 8003704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003708:	65bb      	str	r3, [r7, #88]	; 0x58
 800370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370c:	2b00      	cmp	r3, #0
 800370e:	d112      	bne.n	8003736 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800371a:	b29a      	uxth	r2, r3
 800371c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800371e:	801a      	strh	r2, [r3, #0]
 8003720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800372a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800372e:	b29a      	uxth	r2, r3
 8003730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	e044      	b.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	2b3e      	cmp	r3, #62	; 0x3e
 800373a:	d811      	bhi.n	8003760 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	657b      	str	r3, [r7, #84]	; 0x54
 8003742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_PCD_EP_DB_Transmit+0x6c0>
 800374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374e:	3301      	adds	r3, #1
 8003750:	657b      	str	r3, [r7, #84]	; 0x54
 8003752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003754:	b29b      	uxth	r3, r3
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	b29a      	uxth	r2, r3
 800375a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e02f      	b.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	657b      	str	r3, [r7, #84]	; 0x54
 8003766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003772:	3b01      	subs	r3, #1
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	b29b      	uxth	r3, r3
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	b29b      	uxth	r3, r3
 800377e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003786:	b29a      	uxth	r2, r3
 8003788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	e018      	b.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d114      	bne.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037a4:	4413      	add	r3, r2
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	00da      	lsls	r2, r3, #3
 80037ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b0:	4413      	add	r3, r2
 80037b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037b6:	663b      	str	r3, [r7, #96]	; 0x60
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6959      	ldr	r1, [r3, #20]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	895a      	ldrh	r2, [r3, #10]
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f005 f91c 	bl	8008a0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	823b      	strh	r3, [r7, #16]
 80037f0:	8a3b      	ldrh	r3, [r7, #16]
 80037f2:	f083 0310 	eor.w	r3, r3, #16
 80037f6:	823b      	strh	r3, [r7, #16]
 80037f8:	8a3b      	ldrh	r3, [r7, #16]
 80037fa:	f083 0320 	eor.w	r3, r3, #32
 80037fe:	823b      	strh	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	8a3b      	ldrh	r3, [r7, #16]
 8003810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003820:	b29b      	uxth	r3, r3
 8003822:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3788      	adds	r7, #136	; 0x88
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	817b      	strh	r3, [r7, #10]
 800383c:	4613      	mov	r3, r2
 800383e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384c:	897b      	ldrh	r3, [r7, #10]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e009      	b.n	8003878 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003864:	897a      	ldrh	r2, [r7, #10]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003878:	893b      	ldrh	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	80da      	strh	r2, [r3, #6]
 800388c:	e00b      	b.n	80038a6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2201      	movs	r2, #1
 8003892:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	b29a      	uxth	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d141      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003916:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d131      	bne.n	8003988 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392a:	4a46      	ldr	r2, [pc, #280]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003934:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800393c:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003942:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2232      	movs	r2, #50	; 0x32
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800395a:	e002      	b.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3b01      	subs	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396e:	d102      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f2      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003976:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d158      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e057      	b.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398e:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003998:	e04d      	b.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a0:	d141      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d131      	bne.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b6:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2232      	movs	r2, #50	; 0x32
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e6:	e002      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d102      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f2      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0e:	d112      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e011      	b.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a24:	e007      	b.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40007000 	.word	0x40007000
 8003a48:	20000050 	.word	0x20000050
 8003a4c:	431bde83 	.word	0x431bde83

08003a50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5e:	6093      	str	r3, [r2, #8]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40007000 	.word	0x40007000

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e308      	b.n	8004094 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4ba3      	ldr	r3, [pc, #652]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	4ba0      	ldr	r3, [pc, #640]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x3e>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x44>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b99      	ldr	r3, [pc, #612]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05b      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d157      	bne.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e2e3      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x74>
 8003ad6:	4b91      	ldr	r3, [pc, #580]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a90      	ldr	r2, [pc, #576]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b8b      	ldr	r3, [pc, #556]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a8a      	ldr	r2, [pc, #552]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b88      	ldr	r3, [pc, #544]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a87      	ldr	r2, [pc, #540]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003b08:	4b84      	ldr	r3, [pc, #528]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a83      	ldr	r2, [pc, #524]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a80      	ldr	r2, [pc, #512]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd fca8 	bl	800147c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd fca4 	bl	800147c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e2a8      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	4b76      	ldr	r3, [pc, #472]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fc94 	bl	800147c <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fc90 	bl	800147c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e294      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d075      	beq.n	8003c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b90:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x136>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d002      	beq.n	8003bac <HAL_RCC_OscConfig+0x13c>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d11f      	bne.n	8003bec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x154>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e267      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	4952      	ldr	r1, [pc, #328]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bd8:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCC_OscConfig+0x2b0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fd fc01 	bl	80013e4 <HAL_InitTick>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d043      	beq.n	8003c70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e253      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a48      	ldr	r2, [pc, #288]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fc3c 	bl	800147c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd fc38 	bl	800147c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e23c      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1a:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	4939      	ldr	r1, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
 8003c3a:	e01a      	b.n	8003c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3c:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a36      	ldr	r2, [pc, #216]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fc18 	bl	800147c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd fc14 	bl	800147c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e218      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1e0>
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fd fbf1 	bl	800147c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fbed 	bl	800147c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1f1      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ef      	beq.n	8003c9e <HAL_RCC_OscConfig+0x22e>
 8003cbe:	e01b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc6:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fbd4 	bl	800147c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fd fbd0 	bl	800147c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e1d4      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ef      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80ab 	beq.w	8003e5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2b4>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e005      	b.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	20000054 	.word	0x20000054
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	4baf      	ldr	r3, [pc, #700]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	4aae      	ldr	r2, [pc, #696]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6593      	str	r3, [r2, #88]	; 0x58
 8003d36:	4bac      	ldr	r3, [pc, #688]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d42:	2301      	movs	r3, #1
 8003d44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d46:	4ba9      	ldr	r3, [pc, #676]	; (8003fec <HAL_RCC_OscConfig+0x57c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d118      	bne.n	8003d84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d52:	4ba6      	ldr	r3, [pc, #664]	; (8003fec <HAL_RCC_OscConfig+0x57c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4aa5      	ldr	r2, [pc, #660]	; (8003fec <HAL_RCC_OscConfig+0x57c>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fb8d 	bl	800147c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d66:	f7fd fb89 	bl	800147c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e18d      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d78:	4b9c      	ldr	r3, [pc, #624]	; (8003fec <HAL_RCC_OscConfig+0x57c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <HAL_RCC_OscConfig+0x32e>
 8003d8c:	4b96      	ldr	r3, [pc, #600]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a95      	ldr	r2, [pc, #596]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9c:	e024      	b.n	8003de8 <HAL_RCC_OscConfig+0x378>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d110      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x358>
 8003da6:	4b90      	ldr	r3, [pc, #576]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	4a8e      	ldr	r2, [pc, #568]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db6:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	4a8a      	ldr	r2, [pc, #552]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc6:	e00f      	b.n	8003de8 <HAL_RCC_OscConfig+0x378>
 8003dc8:	4b87      	ldr	r3, [pc, #540]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a86      	ldr	r2, [pc, #536]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd8:	4b83      	ldr	r3, [pc, #524]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a82      	ldr	r2, [pc, #520]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d016      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd fb44 	bl	800147c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd fb40 	bl	800147c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e142      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ed      	beq.n	8003df8 <HAL_RCC_OscConfig+0x388>
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fb2d 	bl	800147c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fb29 	bl	800147c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e12b      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ed      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	4a64      	ldr	r2, [pc, #400]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d03c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e70:	4b5d      	ldr	r3, [pc, #372]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e76:	4a5c      	ldr	r2, [pc, #368]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fd fafc 	bl	800147c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e88:	f7fd faf8 	bl	800147c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0fc      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e9a:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ef      	beq.n	8003e88 <HAL_RCC_OscConfig+0x418>
 8003ea8:	e01b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eaa:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb0:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd fadf 	bl	800147c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec2:	f7fd fadb 	bl	800147c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0df      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ed4:	4b44      	ldr	r3, [pc, #272]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1ef      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d3 	beq.w	8004092 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eec:	4b3e      	ldr	r3, [pc, #248]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	f000 808d 	beq.w	8004014 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d15a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd fab5 	bl	800147c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd fab1 	bl	800147c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0b5      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCC_OscConfig+0x580>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6a11      	ldr	r1, [r2, #32]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f4e:	0212      	lsls	r2, r2, #8
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f56:	0852      	lsrs	r2, r2, #1
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	0552      	lsls	r2, r2, #21
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f62:	0852      	lsrs	r2, r2, #1
 8003f64:	3a01      	subs	r2, #1
 8003f66:	0652      	lsls	r2, r2, #25
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f6e:	06d2      	lsls	r2, r2, #27
 8003f70:	430a      	orrs	r2, r1
 8003f72:	491d      	ldr	r1, [pc, #116]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd fa74 	bl	800147c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd fa70 	bl	800147c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e074      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x528>
 8003fb6:	e06c      	b.n	8004092 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <HAL_RCC_OscConfig+0x578>)
 8003fd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fa4c 	bl	800147c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe6:	e00e      	b.n	8004006 <HAL_RCC_OscConfig+0x596>
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd fa42 	bl	800147c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e046      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_RCC_OscConfig+0x62c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x584>
 8004012:	e03e      	b.n	8004092 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e039      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004020:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_RCC_OscConfig+0x62c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0203 	and.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	429a      	cmp	r2, r3
 8004032:	d12c      	bne.n	800408e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	3b01      	subs	r3, #1
 8004040:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d123      	bne.n	800408e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d11b      	bne.n	800408e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d113      	bne.n	800408e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d109      	bne.n	800408e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e11e      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b91      	ldr	r3, [pc, #580]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d910      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b8e      	ldr	r3, [pc, #568]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	498c      	ldr	r1, [pc, #560]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b8a      	ldr	r3, [pc, #552]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e106      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d073      	beq.n	80041dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d129      	bne.n	8004150 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fc:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0f4      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800410c:	f000 f966 	bl	80043dc <RCC_GetSysClockFreqFromPLLSource>
 8004110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4a7c      	ldr	r2, [pc, #496]	; (8004308 <HAL_RCC_ClockConfig+0x268>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d93f      	bls.n	800419a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800411a:	4b7a      	ldr	r3, [pc, #488]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800412e:	2b00      	cmp	r3, #0
 8004130:	d033      	beq.n	800419a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d12f      	bne.n	800419a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800413a:	4b72      	ldr	r3, [pc, #456]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	4a70      	ldr	r2, [pc, #448]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e024      	b.n	800419a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d107      	bne.n	8004168 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004158:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0c6      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0be      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004178:	f000 f8ce 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 800417c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4a61      	ldr	r2, [pc, #388]	; (8004308 <HAL_RCC_ClockConfig+0x268>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d909      	bls.n	800419a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004186:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418e:	4a5d      	ldr	r2, [pc, #372]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4957      	ldr	r1, [pc, #348]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fd f966 	bl	800147c <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fd f962 	bl	800147c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e095      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d023      	beq.n	8004230 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f4:	4b43      	ldr	r3, [pc, #268]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a42      	ldr	r2, [pc, #264]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800420c:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 8004216:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800421a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b39      	ldr	r3, [pc, #228]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4936      	ldr	r1, [pc, #216]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
 800422e:	e008      	b.n	8004242 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d105      	bne.n	8004242 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004236:	4b33      	ldr	r3, [pc, #204]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4a32      	ldr	r2, [pc, #200]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800423c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004240:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004242:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d21d      	bcs.n	800428c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 020f 	bic.w	r2, r3, #15
 8004258:	4929      	ldr	r1, [pc, #164]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004260:	f7fd f90c 	bl	800147c <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	e00a      	b.n	800427e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004268:	f7fd f908 	bl	800147c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e03b      	b.n	80042f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_RCC_ClockConfig+0x260>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d1ed      	bne.n	8004268 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4917      	ldr	r1, [pc, #92]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490f      	ldr	r1, [pc, #60]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ca:	f000 f825 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCC_ClockConfig+0x264>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	490c      	ldr	r1, [pc, #48]	; (800430c <HAL_RCC_ClockConfig+0x26c>)
 80042dc:	5ccb      	ldrb	r3, [r1, r3]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	fa22 f303 	lsr.w	r3, r2, r3
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x270>)
 80042e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x274>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd f878 	bl	80013e4 <HAL_InitTick>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40022000 	.word	0x40022000
 8004304:	40021000 	.word	0x40021000
 8004308:	04c4b400 	.word	0x04c4b400
 800430c:	0800ae7c 	.word	0x0800ae7c
 8004310:	20000050 	.word	0x20000050
 8004314:	20000054 	.word	0x20000054

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d102      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e047      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d102      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e03e      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d136      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	3301      	adds	r3, #1
 8004364:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d10c      	bne.n	8004386 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004376:	68d2      	ldr	r2, [r2, #12]
 8004378:	0a12      	lsrs	r2, r2, #8
 800437a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
      break;
 8004384:	e00c      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	0a12      	lsrs	r2, r2, #8
 8004394:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e001      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043c0:	693b      	ldr	r3, [r7, #16]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	007a1200 	.word	0x007a1200

080043dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d10c      	bne.n	800441a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800440a:	68d2      	ldr	r2, [r2, #12]
 800440c:	0a12      	lsrs	r2, r2, #8
 800440e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]
    break;
 8004418:	e00c      	b.n	8004434 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	4a0e      	ldr	r2, [pc, #56]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004424:	68d2      	ldr	r2, [r2, #12]
 8004426:	0a12      	lsrs	r2, r2, #8
 8004428:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
    break;
 8004432:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0e5b      	lsrs	r3, r3, #25
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800444e:	687b      	ldr	r3, [r7, #4]
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40021000 	.word	0x40021000
 8004460:	007a1200 	.word	0x007a1200
 8004464:	00f42400 	.word	0x00f42400

08004468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004470:	2300      	movs	r3, #0
 8004472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004474:	2300      	movs	r3, #0
 8004476:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8098 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6593      	str	r3, [r2, #88]	; 0x58
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b2:	4b3a      	ldr	r3, [pc, #232]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044be:	f7fc ffdd 	bl	800147c <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c4:	e009      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fc ffd9 	bl	800147c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	74fb      	strb	r3, [r7, #19]
        break;
 80044d8:	e005      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d159      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	d019      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004508:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fc ff99 	bl	800147c <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	e00b      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fc ff95 	bl	800147c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d902      	bls.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	74fb      	strb	r3, [r7, #19]
            break;
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ec      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	74bb      	strb	r3, [r7, #18]
 8004596:	e005      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a4:	7c7b      	ldrb	r3, [r7, #17]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4ba6      	ldr	r3, [pc, #664]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	4aa5      	ldr	r2, [pc, #660]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4ba0      	ldr	r3, [pc, #640]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f023 0203 	bic.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	499c      	ldr	r1, [pc, #624]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e4:	4b97      	ldr	r3, [pc, #604]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 020c 	bic.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4994      	ldr	r1, [pc, #592]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004606:	4b8f      	ldr	r3, [pc, #572]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	498b      	ldr	r1, [pc, #556]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004628:	4b86      	ldr	r3, [pc, #536]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4983      	ldr	r1, [pc, #524]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800464a:	4b7e      	ldr	r3, [pc, #504]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	497a      	ldr	r1, [pc, #488]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800466c:	4b75      	ldr	r3, [pc, #468]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	4972      	ldr	r1, [pc, #456]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4969      	ldr	r1, [pc, #420]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b0:	4b64      	ldr	r3, [pc, #400]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4961      	ldr	r1, [pc, #388]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	4958      	ldr	r1, [pc, #352]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d015      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	4950      	ldr	r1, [pc, #320]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004714:	4b4b      	ldr	r3, [pc, #300]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800472c:	4b45      	ldr	r3, [pc, #276]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4942      	ldr	r1, [pc, #264]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474a:	d105      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004764:	4b37      	ldr	r3, [pc, #220]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4934      	ldr	r1, [pc, #208]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004784:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a2e      	ldr	r2, [pc, #184]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	4926      	ldr	r1, [pc, #152]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	4918      	ldr	r1, [pc, #96]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a12      	ldr	r2, [pc, #72]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	490a      	ldr	r1, [pc, #40]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004838:	7cbb      	ldrb	r3, [r7, #18]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e049      	b.n	80048ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fc54 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f001 f9cc 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04a      	b.n	80049a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_TIM_Base_Start_IT+0xc4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d115      	bne.n	8004990 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d015      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0xaa>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d011      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	e008      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e000      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	00010007 	.word	0x00010007

080049cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e049      	b.n	8004a72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fc fb28 	bl	8001048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f001 f90a 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_TIM_PWM_Start+0x24>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e03c      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d109      	bne.n	8004aba <HAL_TIM_PWM_Start+0x3e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e02f      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d109      	bne.n	8004ad4 <HAL_TIM_PWM_Start+0x58>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e022      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d109      	bne.n	8004aee <HAL_TIM_PWM_Start+0x72>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	bf14      	ite	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	2300      	moveq	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e015      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d109      	bne.n	8004b08 <HAL_TIM_PWM_Start+0x8c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e008      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e097      	b.n	8004c52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xb6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	e023      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xc6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b40:	e01b      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0xd6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b50:	e013      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b0c      	cmp	r3, #12
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0xe6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0xf6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b70:	e003      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fbd4 	bl	8006330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a33      	ldr	r2, [pc, #204]	; (8004c5c <HAL_TIM_PWM_Start+0x1e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_TIM_PWM_Start+0x13e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a32      	ldr	r2, [pc, #200]	; (8004c60 <HAL_TIM_PWM_Start+0x1e4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_TIM_PWM_Start+0x13e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <HAL_TIM_PWM_Start+0x1e8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_TIM_PWM_Start+0x13e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <HAL_TIM_PWM_Start+0x1ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIM_PWM_Start+0x13e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <HAL_TIM_PWM_Start+0x1f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x142>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_PWM_Start+0x144>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <HAL_TIM_PWM_Start+0x1e0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x194>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x194>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a20      	ldr	r2, [pc, #128]	; (8004c70 <HAL_TIM_PWM_Start+0x1f4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x194>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_TIM_PWM_Start+0x1f8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x194>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_TIM_PWM_Start+0x1e4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_PWM_Start+0x194>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_TIM_PWM_Start+0x1e8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d115      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <HAL_TIM_PWM_Start+0x1fc>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d015      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x1d2>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d011      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	00010007 	.word	0x00010007

08004c7c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <HAL_TIM_PWM_Start_DMA+0x28>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e03c      	b.n	8004d1e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d109      	bne.n	8004cbe <HAL_TIM_PWM_Start_DMA+0x42>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	e02f      	b.n	8004d1e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d109      	bne.n	8004cd8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e022      	b.n	8004d1e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d109      	bne.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x76>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e015      	b.n	8004d1e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x90>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e008      	b.n	8004d1e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	e1a1      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e03c      	b.n	8004dba <HAL_TIM_PWM_Start_DMA+0x13e>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d109      	bne.n	8004d5a <HAL_TIM_PWM_Start_DMA+0xde>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	e02f      	b.n	8004dba <HAL_TIM_PWM_Start_DMA+0x13e>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d109      	bne.n	8004d74 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e022      	b.n	8004dba <HAL_TIM_PWM_Start_DMA+0x13e>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d109      	bne.n	8004d8e <HAL_TIM_PWM_Start_DMA+0x112>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	e015      	b.n	8004dba <HAL_TIM_PWM_Start_DMA+0x13e>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e008      	b.n	8004dba <HAL_TIM_PWM_Start_DMA+0x13e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d034      	beq.n	8004e28 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start_DMA+0x152>
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e14d      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start_DMA+0x162>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	e026      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start_DMA+0x172>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dec:	e01e      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Start_DMA+0x182>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dfc:	e016      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Start_DMA+0x192>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e0c:	e00e      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1c:	e006      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e26:	e001      	b.n	8004e2c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e11e      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	f200 80ae 	bhi.w	8004f90 <HAL_TIM_PWM_Start_DMA+0x314>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004f91 	.word	0x08004f91
 8004e44:	08004f91 	.word	0x08004f91
 8004e48:	08004f91 	.word	0x08004f91
 8004e4c:	08004eb9 	.word	0x08004eb9
 8004e50:	08004f91 	.word	0x08004f91
 8004e54:	08004f91 	.word	0x08004f91
 8004e58:	08004f91 	.word	0x08004f91
 8004e5c:	08004f01 	.word	0x08004f01
 8004e60:	08004f91 	.word	0x08004f91
 8004e64:	08004f91 	.word	0x08004f91
 8004e68:	08004f91 	.word	0x08004f91
 8004e6c:	08004f49 	.word	0x08004f49
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	4a7f      	ldr	r2, [pc, #508]	; (8005074 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	4a7e      	ldr	r2, [pc, #504]	; (8005078 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	4a7d      	ldr	r2, [pc, #500]	; (800507c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004e86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3334      	adds	r3, #52	; 0x34
 8004e94:	461a      	mov	r2, r3
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	f7fc fcd6 	bl	8001848 <HAL_DMA_Start_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0e1      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	60da      	str	r2, [r3, #12]
      break;
 8004eb6:	e06c      	b.n	8004f92 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	4a6d      	ldr	r2, [pc, #436]	; (8005074 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	4a6c      	ldr	r2, [pc, #432]	; (8005078 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	4a6b      	ldr	r2, [pc, #428]	; (800507c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3338      	adds	r3, #56	; 0x38
 8004edc:	461a      	mov	r2, r3
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	f7fc fcb2 	bl	8001848 <HAL_DMA_Start_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0bd      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efc:	60da      	str	r2, [r3, #12]
      break;
 8004efe:	e048      	b.n	8004f92 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a5b      	ldr	r2, [pc, #364]	; (8005074 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a59      	ldr	r2, [pc, #356]	; (800507c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	333c      	adds	r3, #60	; 0x3c
 8004f24:	461a      	mov	r2, r3
 8004f26:	887b      	ldrh	r3, [r7, #2]
 8004f28:	f7fc fc8e 	bl	8001848 <HAL_DMA_Start_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e099      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f44:	60da      	str	r2, [r3, #12]
      break;
 8004f46:	e024      	b.n	8004f92 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	4a49      	ldr	r2, [pc, #292]	; (8005074 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	4a48      	ldr	r2, [pc, #288]	; (8005078 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	4a47      	ldr	r2, [pc, #284]	; (800507c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3340      	adds	r3, #64	; 0x40
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	f7fc fc6a 	bl	8001848 <HAL_DMA_Start_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e075      	b.n	800506a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f8c:	60da      	str	r2, [r3, #12]
      break;
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004f90:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 f9c8 	bl	8006330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a36      	ldr	r2, [pc, #216]	; (8005080 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a35      	ldr	r2, [pc, #212]	; (8005084 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a33      	ldr	r2, [pc, #204]	; (8005088 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a32      	ldr	r2, [pc, #200]	; (800508c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_PWM_Start_DMA+0x35c>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_PWM_Start_DMA+0x3ac>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_TIM_PWM_Start_DMA+0x408>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_PWM_Start_DMA+0x3ac>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d115      	bne.n	8005054 <HAL_TIM_PWM_Start_DMA+0x3d8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_TIM_PWM_Start_DMA+0x420>)
 8005030:	4013      	ands	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d015      	beq.n	8005066 <HAL_TIM_PWM_Start_DMA+0x3ea>
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d011      	beq.n	8005066 <HAL_TIM_PWM_Start_DMA+0x3ea>
    {
      __HAL_TIM_ENABLE(htim);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	e008      	b.n	8005066 <HAL_TIM_PWM_Start_DMA+0x3ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e000      	b.n	8005068 <HAL_TIM_PWM_Start_DMA+0x3ec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	08005b13 	.word	0x08005b13
 8005078:	08005bbb 	.word	0x08005bbb
 800507c:	08005a81 	.word	0x08005a81
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	00010007 	.word	0x00010007

080050a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d855      	bhi.n	800515c <HAL_TIM_PWM_Stop_DMA+0xbc>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	0800515d 	.word	0x0800515d
 80050c0:	0800515d 	.word	0x0800515d
 80050c4:	0800515d 	.word	0x0800515d
 80050c8:	08005109 	.word	0x08005109
 80050cc:	0800515d 	.word	0x0800515d
 80050d0:	0800515d 	.word	0x0800515d
 80050d4:	0800515d 	.word	0x0800515d
 80050d8:	08005125 	.word	0x08005125
 80050dc:	0800515d 	.word	0x0800515d
 80050e0:	0800515d 	.word	0x0800515d
 80050e4:	0800515d 	.word	0x0800515d
 80050e8:	08005141 	.word	0x08005141
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	4618      	mov	r0, r3
 8005102:	f7fc fc1c 	bl	800193e <HAL_DMA_Abort_IT>
      break;
 8005106:	e02a      	b.n	800515e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	4618      	mov	r0, r3
 800511e:	f7fc fc0e 	bl	800193e <HAL_DMA_Abort_IT>
      break;
 8005122:	e01c      	b.n	800515e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005132:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc fc00 	bl	800193e <HAL_DMA_Abort_IT>
      break;
 800513e:	e00e      	b.n	800515e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800514e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc fbf2 	bl	800193e <HAL_DMA_Abort_IT>
      break;
 800515a:	e000      	b.n	800515e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800515c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f001 f8e2 	bl	8006330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3e      	ldr	r2, [pc, #248]	; (800526c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3d      	ldr	r2, [pc, #244]	; (8005270 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3a      	ldr	r2, [pc, #232]	; (8005278 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a38      	ldr	r2, [pc, #224]	; (800527c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_Stop_DMA+0x102>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <HAL_TIM_PWM_Stop_DMA+0x104>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d017      	beq.n	80051d8 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <HAL_TIM_PWM_Stop_DMA+0x138>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	f244 4344 	movw	r3, #17476	; 0x4444
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_PWM_Stop_DMA+0x138>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	f241 1311 	movw	r3, #4369	; 0x1111
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_TIM_PWM_Stop_DMA+0x168>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_PWM_Stop_DMA+0x168>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <HAL_TIM_PWM_Stop_DMA+0x178>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005216:	e023      	b.n	8005260 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d104      	bne.n	8005228 <HAL_TIM_PWM_Stop_DMA+0x188>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005226:	e01b      	b.n	8005260 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d104      	bne.n	8005238 <HAL_TIM_PWM_Stop_DMA+0x198>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005236:	e013      	b.n	8005260 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d104      	bne.n	8005248 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005246:	e00b      	b.n	8005260 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b10      	cmp	r3, #16
 800524c:	d104      	bne.n	8005258 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005256:	e003      	b.n	8005260 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800

08005280 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e097      	b.n	80053c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fb fe29 	bl	8000f00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 fca5 	bl	8005c24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	4313      	orrs	r3, r2
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005320:	f023 030c 	bic.w	r3, r3, #12
 8005324:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	4313      	orrs	r3, r2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	011a      	lsls	r2, r3, #4
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	031b      	lsls	r3, r3, #12
 8005350:	4313      	orrs	r3, r2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	4313      	orrs	r3, r2
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d110      	bne.n	800541e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d102      	bne.n	8005408 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005402:	7b7b      	ldrb	r3, [r7, #13]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e069      	b.n	80054e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	e031      	b.n	8005482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d110      	bne.n	8005446 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800542a:	7b3b      	ldrb	r3, [r7, #12]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e055      	b.n	80054e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005444:	e01d      	b.n	8005482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d108      	bne.n	800545e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d105      	bne.n	800545e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005452:	7b7b      	ldrb	r3, [r7, #13]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d102      	bne.n	800545e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005458:	7b3b      	ldrb	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e03e      	b.n	80054e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_TIM_Encoder_Start+0xc4>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d008      	beq.n	80054a0 <HAL_TIM_Encoder_Start+0xd4>
 800548e:	e00f      	b.n	80054b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f000 ff49 	bl	8006330 <TIM_CCxChannelCmd>
      break;
 800549e:	e016      	b.n	80054ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	2104      	movs	r1, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 ff41 	bl	8006330 <TIM_CCxChannelCmd>
      break;
 80054ae:	e00e      	b.n	80054ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 ff39 	bl	8006330 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	2104      	movs	r1, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ff32 	bl	8006330 <TIM_CCxChannelCmd>
      break;
 80054cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0202 	mvn.w	r2, #2
 8005514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa76 	bl	8005a1c <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa68 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa79 	bl	8005a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0204 	mvn.w	r2, #4
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa4c 	bl	8005a1c <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa3e 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa4f 	bl	8005a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0208 	mvn.w	r2, #8
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa22 	bl	8005a1c <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa14 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa25 	bl	8005a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0210 	mvn.w	r2, #16
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2208      	movs	r2, #8
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9f8 	bl	8005a1c <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9ea 	bl	8005a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f9fb 	bl	8005a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10e      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0201 	mvn.w	r2, #1
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fa fed0 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d10e      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d107      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 ff9e 	bl	80065d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 ff91 	bl	80065e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f9b3 	bl	8005a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0220 	mvn.w	r2, #32
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 ff51 	bl	80065c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572c:	d10f      	bne.n	800574e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 ff57 	bl	80065fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575c:	d10f      	bne.n	800577e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 ff49 	bl	8006610 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578c:	d10f      	bne.n	80057ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 ff3b 	bl	8006624 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057bc:	d10f      	bne.n	80057de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057cc:	d107      	bne.n	80057de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 ff2d 	bl	8006638 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0fd      	b.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b14      	cmp	r3, #20
 800580e:	f200 80f0 	bhi.w	80059f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800586d 	.word	0x0800586d
 800581c:	080059f3 	.word	0x080059f3
 8005820:	080059f3 	.word	0x080059f3
 8005824:	080059f3 	.word	0x080059f3
 8005828:	080058ad 	.word	0x080058ad
 800582c:	080059f3 	.word	0x080059f3
 8005830:	080059f3 	.word	0x080059f3
 8005834:	080059f3 	.word	0x080059f3
 8005838:	080058ef 	.word	0x080058ef
 800583c:	080059f3 	.word	0x080059f3
 8005840:	080059f3 	.word	0x080059f3
 8005844:	080059f3 	.word	0x080059f3
 8005848:	0800592f 	.word	0x0800592f
 800584c:	080059f3 	.word	0x080059f3
 8005850:	080059f3 	.word	0x080059f3
 8005854:	080059f3 	.word	0x080059f3
 8005858:	08005971 	.word	0x08005971
 800585c:	080059f3 	.word	0x080059f3
 8005860:	080059f3 	.word	0x080059f3
 8005864:	080059f3 	.word	0x080059f3
 8005868:	080059b1 	.word	0x080059b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fa66 	bl	8005d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]
      break;
 80058aa:	e0a3      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fad6 	bl	8005e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
      break;
 80058ec:	e082      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fb3f 	bl	8005f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	61da      	str	r2, [r3, #28]
      break;
 800592c:	e062      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fba7 	bl	8006088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e041      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc10 	bl	800619c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80059ae:	e021      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fc54 	bl	8006264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80059f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop

08005a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d107      	bne.n	8005aa8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa6:	e02a      	b.n	8005afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d107      	bne.n	8005ac2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac0:	e01d      	b.n	8005afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ada:	e010      	b.n	8005afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d107      	bne.n	8005af6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af4:	e003      	b.n	8005afe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ffb4 	bl	8005a6c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	771a      	strb	r2, [r3, #28]
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10b      	bne.n	8005b42 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d136      	bne.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b40:	e031      	b.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d10b      	bne.n	8005b64 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d125      	bne.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b62:	e020      	b.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10b      	bne.n	8005b86 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2204      	movs	r2, #4
 8005b72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d114      	bne.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b84:	e00f      	b.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d10a      	bne.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2208      	movs	r2, #8
 8005b94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff42 	bl	8005a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	771a      	strb	r2, [r3, #28]
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d103      	bne.n	8005bda <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	771a      	strb	r2, [r3, #28]
 8005bd8:	e019      	b.n	8005c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d103      	bne.n	8005bec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2202      	movs	r2, #2
 8005be8:	771a      	strb	r2, [r3, #28]
 8005bea:	e010      	b.n	8005c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d103      	bne.n	8005bfe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	771a      	strb	r2, [r3, #28]
 8005bfc:	e007      	b.n	8005c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d102      	bne.n	8005c0e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ff18 	bl	8005a44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	771a      	strb	r2, [r3, #28]
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3c      	ldr	r2, [pc, #240]	; (8005d28 <TIM_Base_SetConfig+0x104>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00f      	beq.n	8005c5c <TIM_Base_SetConfig+0x38>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x38>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a39      	ldr	r2, [pc, #228]	; (8005d2c <TIM_Base_SetConfig+0x108>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a38      	ldr	r2, [pc, #224]	; (8005d30 <TIM_Base_SetConfig+0x10c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x38>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a37      	ldr	r2, [pc, #220]	; (8005d34 <TIM_Base_SetConfig+0x110>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <TIM_Base_SetConfig+0x104>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01b      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d017      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <TIM_Base_SetConfig+0x108>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <TIM_Base_SetConfig+0x10c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00f      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <TIM_Base_SetConfig+0x110>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00b      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d007      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_Base_SetConfig+0x8a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d108      	bne.n	8005cc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a10      	ldr	r2, [pc, #64]	; (8005d28 <TIM_Base_SetConfig+0x104>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0xe8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <TIM_Base_SetConfig+0x110>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0xe8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0xe8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0f      	ldr	r2, [pc, #60]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xe8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 0302 	bic.w	r3, r3, #2
 8005d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <TIM_OC1_SetConfig+0x10c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_OC1_SetConfig+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <TIM_OC1_SetConfig+0x110>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC1_SetConfig+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <TIM_OC1_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC1_SetConfig+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <TIM_OC1_SetConfig+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC1_SetConfig+0x80>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a28      	ldr	r2, [pc, #160]	; (8005e60 <TIM_OC1_SetConfig+0x11c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d10c      	bne.n	8005dde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0308 	bic.w	r3, r3, #8
 8005dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0304 	bic.w	r3, r3, #4
 8005ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <TIM_OC1_SetConfig+0x10c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_OC1_SetConfig+0xc2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <TIM_OC1_SetConfig+0x110>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_OC1_SetConfig+0xc2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <TIM_OC1_SetConfig+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_OC1_SetConfig+0xc2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <TIM_OC1_SetConfig+0x118>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC1_SetConfig+0xc2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <TIM_OC1_SetConfig+0x11c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d111      	bne.n	8005e2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0210 	bic.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0320 	bic.w	r3, r3, #32
 8005eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <TIM_OC2_SetConfig+0x100>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x6c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <TIM_OC2_SetConfig+0x104>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10d      	bne.n	8005eec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <TIM_OC2_SetConfig+0x100>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00f      	beq.n	8005f14 <TIM_OC2_SetConfig+0xb0>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <TIM_OC2_SetConfig+0x104>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_OC2_SetConfig+0xb0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <TIM_OC2_SetConfig+0x108>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_OC2_SetConfig+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <TIM_OC2_SetConfig+0x10c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC2_SetConfig+0xb0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <TIM_OC2_SetConfig+0x110>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d113      	bne.n	8005f3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <TIM_OC3_SetConfig+0xfc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC3_SetConfig+0x6a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <TIM_OC3_SetConfig+0x100>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10d      	bne.n	8005ffe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <TIM_OC3_SetConfig+0xfc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00f      	beq.n	8006026 <TIM_OC3_SetConfig+0xae>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1b      	ldr	r2, [pc, #108]	; (8006078 <TIM_OC3_SetConfig+0x100>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00b      	beq.n	8006026 <TIM_OC3_SetConfig+0xae>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1a      	ldr	r2, [pc, #104]	; (800607c <TIM_OC3_SetConfig+0x104>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <TIM_OC3_SetConfig+0xae>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <TIM_OC3_SetConfig+0x108>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC3_SetConfig+0xae>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <TIM_OC3_SetConfig+0x10c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d113      	bne.n	800604e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	031b      	lsls	r3, r3, #12
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a28      	ldr	r2, [pc, #160]	; (8006188 <TIM_OC4_SetConfig+0x100>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC4_SetConfig+0x6c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a27      	ldr	r2, [pc, #156]	; (800618c <TIM_OC4_SetConfig+0x104>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10d      	bne.n	8006110 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <TIM_OC4_SetConfig+0x100>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <TIM_OC4_SetConfig+0xb0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <TIM_OC4_SetConfig+0x104>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_OC4_SetConfig+0xb0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <TIM_OC4_SetConfig+0x108>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_OC4_SetConfig+0xb0>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <TIM_OC4_SetConfig+0x10c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC4_SetConfig+0xb0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a19      	ldr	r2, [pc, #100]	; (8006198 <TIM_OC4_SetConfig+0x110>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d113      	bne.n	8006160 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006146:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	019b      	lsls	r3, r3, #6
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	019b      	lsls	r3, r3, #6
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40013400 	.word	0x40013400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800

0800619c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a17      	ldr	r2, [pc, #92]	; (8006250 <TIM_OC5_SetConfig+0xb4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00f      	beq.n	8006216 <TIM_OC5_SetConfig+0x7a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a16      	ldr	r2, [pc, #88]	; (8006254 <TIM_OC5_SetConfig+0xb8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_OC5_SetConfig+0x7a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <TIM_OC5_SetConfig+0xbc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_OC5_SetConfig+0x7a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a14      	ldr	r2, [pc, #80]	; (800625c <TIM_OC5_SetConfig+0xc0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC5_SetConfig+0x7a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <TIM_OC5_SetConfig+0xc4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d109      	bne.n	800622a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800

08006264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	051b      	lsls	r3, r3, #20
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <TIM_OC6_SetConfig+0xb8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00f      	beq.n	80062e0 <TIM_OC6_SetConfig+0x7c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <TIM_OC6_SetConfig+0xbc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <TIM_OC6_SetConfig+0x7c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <TIM_OC6_SetConfig+0xc0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d007      	beq.n	80062e0 <TIM_OC6_SetConfig+0x7c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <TIM_OC6_SetConfig+0xc4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_OC6_SetConfig+0x7c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a14      	ldr	r2, [pc, #80]	; (800632c <TIM_OC6_SetConfig+0xc8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d109      	bne.n	80062f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	029b      	lsls	r3, r3, #10
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2201      	movs	r2, #1
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	43db      	mvns	r3, r3
 8006352:	401a      	ands	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	fa01 f303 	lsl.w	r3, r1, r3
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e065      	b.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2c      	ldr	r2, [pc, #176]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2b      	ldr	r2, [pc, #172]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1b      	ldr	r2, [pc, #108]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d013      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a18      	ldr	r2, [pc, #96]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a12      	ldr	r2, [pc, #72]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10c      	bne.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4313      	orrs	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40014000 	.word	0x40014000

08006480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006498:	2302      	movs	r3, #2
 800649a:	e087      	b.n	80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a27      	ldr	r2, [pc, #156]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a25      	ldr	r2, [pc, #148]	; (80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d106      	bne.n	8006538 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d004      	beq.n	800654c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d126      	bne.n	800659a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	051b      	lsls	r3, r3, #20
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a0d      	ldr	r2, [pc, #52]	; (80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d106      	bne.n	800659a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400

080065c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800665c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006660:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006682:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006686:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	b29b      	uxth	r3, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	b29b      	uxth	r3, r3
 8006698:	4013      	ands	r3, r2
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066b0:	b084      	sub	sp, #16
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	f107 0014 	add.w	r0, r7, #20
 80066be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	b004      	add	sp, #16
 80066f0:	4770      	bx	lr
	...

080066f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b09b      	sub	sp, #108	; 0x6c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	2b03      	cmp	r3, #3
 8006724:	d81f      	bhi.n	8006766 <USB_ActivateEndpoint+0x72>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <USB_ActivateEndpoint+0x38>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	0800673d 	.word	0x0800673d
 8006730:	08006759 	.word	0x08006759
 8006734:	0800676f 	.word	0x0800676f
 8006738:	0800674b 	.word	0x0800674b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800673c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006744:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006748:	e012      	b.n	8006770 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800674a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800674e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006752:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006756:	e00b      	b.n	8006770 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006758:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800675c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006760:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006764:	e004      	b.n	8006770 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800676c:	e000      	b.n	8006770 <USB_ActivateEndpoint+0x7c>
      break;
 800676e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	b21a      	sxth	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	7b1b      	ldrb	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 8149 	bne.w	8006a78 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8084 	beq.w	80068f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00da      	lsls	r2, r3, #3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	88db      	ldrh	r3, [r3, #6]
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	b29b      	uxth	r3, r3
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	89fb      	ldrh	r3, [r7, #14]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <USB_ActivateEndpoint+0x180>
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	81bb      	strh	r3, [r7, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	89bb      	ldrh	r3, [r7, #12]
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	78db      	ldrb	r3, [r3, #3]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d020      	beq.n	80068be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006892:	813b      	strh	r3, [r7, #8]
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	f083 0320 	eor.w	r3, r3, #32
 800689a:	813b      	strh	r3, [r7, #8]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]
 80068bc:	e27f      	b.n	8006dbe <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	817b      	strh	r3, [r7, #10]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	897b      	ldrh	r3, [r7, #10]
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
 80068f6:	e262      	b.n	8006dbe <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	4413      	add	r3, r2
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00da      	lsls	r2, r3, #3
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	4413      	add	r3, r2
 8006916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	88db      	ldrh	r3, [r3, #6]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	4413      	add	r3, r2
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	00da      	lsls	r2, r3, #3
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	4413      	add	r3, r2
 800694a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d112      	bne.n	800697e <USB_ActivateEndpoint+0x28a>
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006962:	b29a      	uxth	r2, r3
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006976:	b29a      	uxth	r2, r3
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e02f      	b.n	80069de <USB_ActivateEndpoint+0x2ea>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b3e      	cmp	r3, #62	; 0x3e
 8006984:	d813      	bhi.n	80069ae <USB_ActivateEndpoint+0x2ba>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <USB_ActivateEndpoint+0x2ac>
 800699a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699c:	3301      	adds	r3, #1
 800699e:	663b      	str	r3, [r7, #96]	; 0x60
 80069a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	e017      	b.n	80069de <USB_ActivateEndpoint+0x2ea>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	663b      	str	r3, [r7, #96]	; 0x60
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <USB_ActivateEndpoint+0x2d4>
 80069c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c4:	3b01      	subs	r3, #1
 80069c6:	663b      	str	r3, [r7, #96]	; 0x60
 80069c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	83fb      	strh	r3, [r7, #30]
 80069ec:	8bfb      	ldrh	r3, [r7, #30]
 80069ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <USB_ActivateEndpoint+0x33a>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	83bb      	strh	r3, [r7, #28]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8bbb      	ldrh	r3, [r7, #28]
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	837b      	strh	r3, [r7, #26]
 8006a46:	8b7b      	ldrh	r3, [r7, #26]
 8006a48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4c:	837b      	strh	r3, [r7, #26]
 8006a4e:	8b7b      	ldrh	r3, [r7, #26]
 8006a50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a54:	837b      	strh	r3, [r7, #26]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	441a      	add	r2, r3
 8006a60:	8b7b      	ldrh	r3, [r7, #26]
 8006a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	8013      	strh	r3, [r2, #0]
 8006a76:	e1a2      	b.n	8006dbe <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac4:	4413      	add	r3, r2
 8006ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	00da      	lsls	r2, r3, #3
 8006ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	891b      	ldrh	r3, [r3, #8]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af8:	4413      	add	r3, r2
 8006afa:	653b      	str	r3, [r7, #80]	; 0x50
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00da      	lsls	r2, r3, #3
 8006b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 8091 	bne.w	8006c48 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006b34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01b      	beq.n	8006b76 <USB_ActivateEndpoint+0x482>
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	441a      	add	r2, r3
 8006b60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01b      	beq.n	8006bc6 <USB_ActivateEndpoint+0x4d2>
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	441a      	add	r2, r3
 8006bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006bde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006be0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006be6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006be8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c24:	867b      	strh	r3, [r7, #50]	; 0x32
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]
 8006c46:	e0ba      	b.n	8006dbe <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01d      	beq.n	8006ca0 <USB_ActivateEndpoint+0x5ac>
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01d      	beq.n	8006cf8 <USB_ActivateEndpoint+0x604>
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	78db      	ldrb	r3, [r3, #3]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d024      	beq.n	8006d4a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d1e:	f083 0320 	eor.w	r3, r3, #32
 8006d22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]
 8006d48:	e01d      	b.n	8006d86 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	441a      	add	r2, r3
 8006d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	376c      	adds	r7, #108	; 0x6c
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b08d      	sub	sp, #52	; 0x34
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	7b1b      	ldrb	r3, [r3, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 808e 	bne.w	8006f00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d044      	beq.n	8006e76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	81bb      	strh	r3, [r7, #12]
 8006dfa:	89bb      	ldrh	r3, [r7, #12]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <USB_DeactivateEndpoint+0x6c>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	817b      	strh	r3, [r7, #10]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	897b      	ldrh	r3, [r7, #10]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e52:	813b      	strh	r3, [r7, #8]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	893b      	ldrh	r3, [r7, #8]
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
 8006e74:	e192      	b.n	800719c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	827b      	strh	r3, [r7, #18]
 8006e84:	8a7b      	ldrh	r3, [r7, #18]
 8006e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01b      	beq.n	8006ec6 <USB_DeactivateEndpoint+0xf6>
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	823b      	strh	r3, [r7, #16]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	8a3b      	ldrh	r3, [r7, #16]
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	81fb      	strh	r3, [r7, #14]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	89fb      	ldrh	r3, [r7, #14]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
 8006efe:	e14d      	b.n	800719c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 80a5 	bne.w	8007054 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	843b      	strh	r3, [r7, #32]
 8006f18:	8c3b      	ldrh	r3, [r7, #32]
 8006f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <USB_DeactivateEndpoint+0x18a>
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	83fb      	strh	r3, [r7, #30]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	8bfb      	ldrh	r3, [r7, #30]
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	83bb      	strh	r3, [r7, #28]
 8006f68:	8bbb      	ldrh	r3, [r7, #28]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <USB_DeactivateEndpoint+0x1da>
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f88:	837b      	strh	r3, [r7, #26]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8b7b      	ldrh	r3, [r7, #26]
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	833b      	strh	r3, [r7, #24]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	8b3b      	ldrh	r3, [r7, #24]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff8:	82fb      	strh	r3, [r7, #22]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	8afb      	ldrh	r3, [r7, #22]
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007030:	82bb      	strh	r3, [r7, #20]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	8abb      	ldrh	r3, [r7, #20]
 800703e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704e:	b29b      	uxth	r3, r3
 8007050:	8013      	strh	r3, [r2, #0]
 8007052:	e0a3      	b.n	800719c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01b      	beq.n	80070a4 <USB_DeactivateEndpoint+0x2d4>
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80070b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01b      	beq.n	80070f4 <USB_DeactivateEndpoint+0x324>
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007142:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	441a      	add	r2, r3
 800714e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007160:	b29b      	uxth	r3, r3
 8007162:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	847b      	strh	r3, [r7, #34]	; 0x22
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3734      	adds	r7, #52	; 0x34
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b0cc      	sub	sp, #304	; 0x130
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	1d3b      	adds	r3, r7, #4
 80071b2:	6018      	str	r0, [r3, #0]
 80071b4:	463b      	mov	r3, r7
 80071b6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	f040 872e 	bne.w	8008020 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	463b      	mov	r3, r7
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d905      	bls.n	80071e0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80071de:	e004      	b.n	80071ea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80071e0:	463b      	mov	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	7b1b      	ldrb	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d134      	bne.n	800725e <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6959      	ldr	r1, [r3, #20]
 80071fa:	463b      	mov	r3, r7
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	88da      	ldrh	r2, [r3, #6]
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	b29b      	uxth	r3, r3
 8007206:	1d38      	adds	r0, r7, #4
 8007208:	6800      	ldr	r0, [r0, #0]
 800720a:	f001 fbff 	bl	8008a0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800720e:	f107 0310 	add.w	r3, r7, #16
 8007212:	1d3a      	adds	r2, r7, #4
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	f107 0210 	add.w	r2, r7, #16
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	440a      	add	r2, r1
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	00da      	lsls	r2, r3, #3
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4413      	add	r3, r2
 8007242:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007250:	b29a      	uxth	r2, r3
 8007252:	f107 030c 	add.w	r3, r7, #12
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	f000 beac 	b.w	8007fb6 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b02      	cmp	r3, #2
 8007266:	f040 838c 	bne.w	8007982 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	429a      	cmp	r2, r3
 8007278:	f240 8330 	bls.w	80078dc <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800727c:	1d3b      	adds	r3, r7, #4
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	441a      	add	r2, r3
 80072a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	463b      	mov	r3, r7
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072d2:	1d3b      	adds	r3, r7, #4
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 819e 	beq.w	800762a <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072f2:	1d3a      	adds	r2, r7, #4
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d17a      	bne.n	80073f8 <USB_EPStartXfer+0x24e>
 8007302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007306:	1d3a      	adds	r2, r7, #4
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	1d3b      	adds	r3, r7, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007314:	b29b      	uxth	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800731c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	440a      	add	r2, r1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	00da      	lsls	r2, r3, #3
 800732e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4413      	add	r3, r2
 8007336:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800733a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11a      	bne.n	800737e <USB_EPStartXfer+0x1d4>
 8007348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007356:	b29a      	uxth	r2, r3
 8007358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	e062      	b.n	8007444 <USB_EPStartXfer+0x29a>
 800737e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007382:	2b3e      	cmp	r3, #62	; 0x3e
 8007384:	d819      	bhi.n	80073ba <USB_EPStartXfer+0x210>
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <USB_EPStartXfer+0x1fc>
 800739c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a0:	3301      	adds	r3, #1
 80073a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	029b      	lsls	r3, r3, #10
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e044      	b.n	8007444 <USB_EPStartXfer+0x29a>
 80073ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <USB_EPStartXfer+0x230>
 80073d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d4:	3b01      	subs	r3, #1
 80073d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073de:	b29b      	uxth	r3, r3
 80073e0:	029b      	lsls	r3, r3, #10
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e025      	b.n	8007444 <USB_EPStartXfer+0x29a>
 80073f8:	463b      	mov	r3, r7
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d120      	bne.n	8007444 <USB_EPStartXfer+0x29a>
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740a:	b29b      	uxth	r3, r3
 800740c:	4619      	mov	r1, r3
 800740e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007412:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	440a      	add	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	463b      	mov	r3, r7
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	00da      	lsls	r2, r3, #3
 8007424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4413      	add	r3, r2
 800742c:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8007430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	b29a      	uxth	r2, r3
 800743c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007444:	463b      	mov	r3, r7
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	895b      	ldrh	r3, [r3, #10]
 800744a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800744e:	463b      	mov	r3, r7
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6959      	ldr	r1, [r3, #20]
 8007454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007458:	b29b      	uxth	r3, r3
 800745a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800745e:	1d38      	adds	r0, r7, #4
 8007460:	6800      	ldr	r0, [r0, #0]
 8007462:	f001 fad3 	bl	8008a0c <USB_WritePMA>
            ep->xfer_buff += len;
 8007466:	463b      	mov	r3, r7
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	441a      	add	r2, r3
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	463b      	mov	r3, r7
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d909      	bls.n	800749c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6a1a      	ldr	r2, [r3, #32]
 800748e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	463b      	mov	r3, r7
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	621a      	str	r2, [r3, #32]
 800749a:	e008      	b.n	80074ae <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80074a6:	463b      	mov	r3, r7
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074ae:	463b      	mov	r3, r7
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d17a      	bne.n	80075ae <USB_EPStartXfer+0x404>
 80074b8:	f107 0318 	add.w	r3, r7, #24
 80074bc:	1d3a      	adds	r2, r7, #4
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	1d3b      	adds	r3, r7, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	f107 0318 	add.w	r3, r7, #24
 80074d2:	f107 0218 	add.w	r2, r7, #24
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	440a      	add	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	00da      	lsls	r2, r3, #3
 80074e4:	f107 0318 	add.w	r3, r7, #24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4413      	add	r3, r2
 80074ec:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d11a      	bne.n	8007534 <USB_EPStartXfer+0x38a>
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800750c:	b29a      	uxth	r2, r3
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007528:	b29a      	uxth	r2, r3
 800752a:	f107 0314 	add.w	r3, r7, #20
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	e067      	b.n	8007604 <USB_EPStartXfer+0x45a>
 8007534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007538:	2b3e      	cmp	r3, #62	; 0x3e
 800753a:	d819      	bhi.n	8007570 <USB_EPStartXfer+0x3c6>
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <USB_EPStartXfer+0x3b2>
 8007552:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007556:	3301      	adds	r3, #1
 8007558:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800755c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007560:	b29b      	uxth	r3, r3
 8007562:	029b      	lsls	r3, r3, #10
 8007564:	b29a      	uxth	r2, r3
 8007566:	f107 0314 	add.w	r3, r7, #20
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	e049      	b.n	8007604 <USB_EPStartXfer+0x45a>
 8007570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <USB_EPStartXfer+0x3e6>
 8007586:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800758a:	3b01      	subs	r3, #1
 800758c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007590:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007594:	b29b      	uxth	r3, r3
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	b29b      	uxth	r3, r3
 800759a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e02a      	b.n	8007604 <USB_EPStartXfer+0x45a>
 80075ae:	463b      	mov	r3, r7
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d125      	bne.n	8007604 <USB_EPStartXfer+0x45a>
 80075b8:	f107 0320 	add.w	r3, r7, #32
 80075bc:	1d3a      	adds	r2, r7, #4
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4619      	mov	r1, r3
 80075ce:	f107 0320 	add.w	r3, r7, #32
 80075d2:	f107 0220 	add.w	r2, r7, #32
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	440a      	add	r2, r1
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	00da      	lsls	r2, r3, #3
 80075e4:	f107 0320 	add.w	r3, r7, #32
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80075f0:	f107 031c 	add.w	r3, r7, #28
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f107 031c 	add.w	r3, r7, #28
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007604:	463b      	mov	r3, r7
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	891b      	ldrh	r3, [r3, #8]
 800760a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800760e:	463b      	mov	r3, r7
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6959      	ldr	r1, [r3, #20]
 8007614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007618:	b29b      	uxth	r3, r3
 800761a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800761e:	1d38      	adds	r0, r7, #4
 8007620:	6800      	ldr	r0, [r0, #0]
 8007622:	f001 f9f3 	bl	8008a0c <USB_WritePMA>
 8007626:	f000 bcc6 	b.w	8007fb6 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d164      	bne.n	80076fe <USB_EPStartXfer+0x554>
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	4413      	add	r3, r2
 800764a:	64bb      	str	r3, [r7, #72]	; 0x48
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	00da      	lsls	r2, r3, #3
 8007654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007656:	4413      	add	r3, r2
 8007658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800765c:	647b      	str	r3, [r7, #68]	; 0x44
 800765e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d112      	bne.n	800768c <USB_EPStartXfer+0x4e2>
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007670:	b29a      	uxth	r2, r3
 8007672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007674:	801a      	strh	r2, [r3, #0]
 8007676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007684:	b29a      	uxth	r2, r3
 8007686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	e057      	b.n	800773c <USB_EPStartXfer+0x592>
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	2b3e      	cmp	r3, #62	; 0x3e
 8007692:	d817      	bhi.n	80076c4 <USB_EPStartXfer+0x51a>
 8007694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <USB_EPStartXfer+0x50a>
 80076aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076ae:	3301      	adds	r3, #1
 80076b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	029b      	lsls	r3, r3, #10
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	e03b      	b.n	800773c <USB_EPStartXfer+0x592>
 80076c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <USB_EPStartXfer+0x53a>
 80076da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076de:	3b01      	subs	r3, #1
 80076e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	029b      	lsls	r3, r3, #10
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	e01e      	b.n	800773c <USB_EPStartXfer+0x592>
 80076fe:	463b      	mov	r3, r7
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d119      	bne.n	800773c <USB_EPStartXfer+0x592>
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	653b      	str	r3, [r7, #80]	; 0x50
 800770e:	1d3b      	adds	r3, r7, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771c:	4413      	add	r3, r2
 800771e:	653b      	str	r3, [r7, #80]	; 0x50
 8007720:	463b      	mov	r3, r7
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	00da      	lsls	r2, r3, #3
 8007728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772a:	4413      	add	r3, r2
 800772c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	b29a      	uxth	r2, r3
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800773c:	463b      	mov	r3, r7
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	891b      	ldrh	r3, [r3, #8]
 8007742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007746:	463b      	mov	r3, r7
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6959      	ldr	r1, [r3, #20]
 800774c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007750:	b29b      	uxth	r3, r3
 8007752:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007756:	1d38      	adds	r0, r7, #4
 8007758:	6800      	ldr	r0, [r0, #0]
 800775a:	f001 f957 	bl	8008a0c <USB_WritePMA>
            ep->xfer_buff += len;
 800775e:	463b      	mov	r3, r7
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	441a      	add	r2, r3
 800776a:	463b      	mov	r3, r7
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007770:	463b      	mov	r3, r7
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6a1a      	ldr	r2, [r3, #32]
 8007776:	463b      	mov	r3, r7
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d909      	bls.n	8007794 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007780:	463b      	mov	r3, r7
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	463b      	mov	r3, r7
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	621a      	str	r2, [r3, #32]
 8007792:	e008      	b.n	80077a6 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800779e:	463b      	mov	r3, r7
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077a6:	1d3b      	adds	r3, r7, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	643b      	str	r3, [r7, #64]	; 0x40
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d164      	bne.n	8007880 <USB_EPStartXfer+0x6d6>
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	4413      	add	r3, r2
 80077cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00da      	lsls	r2, r3, #3
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	4413      	add	r3, r2
 80077da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
 80077e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d112      	bne.n	800780e <USB_EPStartXfer+0x664>
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007806:	b29a      	uxth	r2, r3
 8007808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e054      	b.n	80078b8 <USB_EPStartXfer+0x70e>
 800780e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007812:	2b3e      	cmp	r3, #62	; 0x3e
 8007814:	d817      	bhi.n	8007846 <USB_EPStartXfer+0x69c>
 8007816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <USB_EPStartXfer+0x68c>
 800782c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007830:	3301      	adds	r3, #1
 8007832:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800783a:	b29b      	uxth	r3, r3
 800783c:	029b      	lsls	r3, r3, #10
 800783e:	b29a      	uxth	r2, r3
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e038      	b.n	80078b8 <USB_EPStartXfer+0x70e>
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USB_EPStartXfer+0x6bc>
 800785c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007860:	3b01      	subs	r3, #1
 8007862:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007878:	b29a      	uxth	r2, r3
 800787a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e01b      	b.n	80078b8 <USB_EPStartXfer+0x70e>
 8007880:	463b      	mov	r3, r7
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d116      	bne.n	80078b8 <USB_EPStartXfer+0x70e>
 800788a:	1d3b      	adds	r3, r7, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007898:	4413      	add	r3, r2
 800789a:	643b      	str	r3, [r7, #64]	; 0x40
 800789c:	463b      	mov	r3, r7
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	00da      	lsls	r2, r3, #3
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	4413      	add	r3, r2
 80078a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078b8:	463b      	mov	r3, r7
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	895b      	ldrh	r3, [r3, #10]
 80078be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078c2:	463b      	mov	r3, r7
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6959      	ldr	r1, [r3, #20]
 80078c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078d2:	1d38      	adds	r0, r7, #4
 80078d4:	6800      	ldr	r0, [r0, #0]
 80078d6:	f001 f899 	bl	8008a0c <USB_WritePMA>
 80078da:	e36c      	b.n	8007fb6 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80078dc:	463b      	mov	r3, r7
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80078e6:	1d3b      	adds	r3, r7, #4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	463b      	mov	r3, r7
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007900:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007904:	1d3b      	adds	r3, r7, #4
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800793e:	4413      	add	r3, r2
 8007940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00da      	lsls	r2, r3, #3
 800794a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800794c:	4413      	add	r3, r2
 800794e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007952:	65bb      	str	r3, [r7, #88]	; 0x58
 8007954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007958:	b29a      	uxth	r2, r3
 800795a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800795c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800795e:	463b      	mov	r3, r7
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	891b      	ldrh	r3, [r3, #8]
 8007964:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007968:	463b      	mov	r3, r7
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6959      	ldr	r1, [r3, #20]
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	b29b      	uxth	r3, r3
 8007974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007978:	1d38      	adds	r0, r7, #4
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	f001 f846 	bl	8008a0c <USB_WritePMA>
 8007980:	e319      	b.n	8007fb6 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007982:	1d3b      	adds	r3, r7, #4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	463b      	mov	r3, r7
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	463b      	mov	r3, r7
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	441a      	add	r2, r3
 80079ae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80079b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079c6:	463b      	mov	r3, r7
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	463b      	mov	r3, r7
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	463b      	mov	r3, r7
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8162 	beq.w	8007cb8 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d164      	bne.n	8007ad0 <USB_EPStartXfer+0x926>
 8007a06:	1d3b      	adds	r3, r7, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0c:	1d3b      	adds	r3, r7, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1a:	4413      	add	r3, r2
 8007a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a1e:	463b      	mov	r3, r7
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	00da      	lsls	r2, r3, #3
 8007a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a28:	4413      	add	r3, r2
 8007a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8007a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d112      	bne.n	8007a5e <USB_EPStartXfer+0x8b4>
 8007a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a46:	801a      	strh	r2, [r3, #0]
 8007a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5a:	801a      	strh	r2, [r3, #0]
 8007a5c:	e057      	b.n	8007b0e <USB_EPStartXfer+0x964>
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	2b3e      	cmp	r3, #62	; 0x3e
 8007a64:	d817      	bhi.n	8007a96 <USB_EPStartXfer+0x8ec>
 8007a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <USB_EPStartXfer+0x8dc>
 8007a7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a80:	3301      	adds	r3, #1
 8007a82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e03b      	b.n	8007b0e <USB_EPStartXfer+0x964>
 8007a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USB_EPStartXfer+0x90c>
 8007aac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ab6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	e01e      	b.n	8007b0e <USB_EPStartXfer+0x964>
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d119      	bne.n	8007b0e <USB_EPStartXfer+0x964>
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aea:	4413      	add	r3, r2
 8007aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00da      	lsls	r2, r3, #3
 8007af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	895b      	ldrh	r3, [r3, #10]
 8007b14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b18:	463b      	mov	r3, r7
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6959      	ldr	r1, [r3, #20]
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b28:	1d38      	adds	r0, r7, #4
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	f000 ff6e 	bl	8008a0c <USB_WritePMA>
          ep->xfer_buff += len;
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3a:	441a      	add	r2, r3
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b42:	463b      	mov	r3, r7
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	463b      	mov	r3, r7
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d909      	bls.n	8007b66 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007b52:	463b      	mov	r3, r7
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6a1a      	ldr	r2, [r3, #32]
 8007b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5c:	1ad2      	subs	r2, r2, r3
 8007b5e:	463b      	mov	r3, r7
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	621a      	str	r2, [r3, #32]
 8007b64:	e008      	b.n	8007b78 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007b70:	463b      	mov	r3, r7
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 821a 	beq.w	8007fb6 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b82:	463b      	mov	r3, r7
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d164      	bne.n	8007c56 <USB_EPStartXfer+0xaac>
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ba0:	4413      	add	r3, r2
 8007ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	00da      	lsls	r2, r3, #3
 8007bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d112      	bne.n	8007be4 <USB_EPStartXfer+0xa3a>
 8007bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e057      	b.n	8007c94 <USB_EPStartXfer+0xaea>
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bea:	d817      	bhi.n	8007c1c <USB_EPStartXfer+0xa72>
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <USB_EPStartXfer+0xa62>
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c06:	3301      	adds	r3, #1
 8007c08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	029b      	lsls	r3, r3, #10
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e03b      	b.n	8007c94 <USB_EPStartXfer+0xaea>
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <USB_EPStartXfer+0xa92>
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	3b01      	subs	r3, #1
 8007c38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	029b      	lsls	r3, r3, #10
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e01e      	b.n	8007c94 <USB_EPStartXfer+0xaea>
 8007c56:	463b      	mov	r3, r7
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d119      	bne.n	8007c94 <USB_EPStartXfer+0xaea>
 8007c60:	1d3b      	adds	r3, r7, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	673b      	str	r3, [r7, #112]	; 0x70
 8007c66:	1d3b      	adds	r3, r7, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c74:	4413      	add	r3, r2
 8007c76:	673b      	str	r3, [r7, #112]	; 0x70
 8007c78:	463b      	mov	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	00da      	lsls	r2, r3, #3
 8007c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c82:	4413      	add	r3, r2
 8007c84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c94:	463b      	mov	r3, r7
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	891b      	ldrh	r3, [r3, #8]
 8007c9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6959      	ldr	r1, [r3, #20]
 8007ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cae:	1d38      	adds	r0, r7, #4
 8007cb0:	6800      	ldr	r0, [r0, #0]
 8007cb2:	f000 feab 	bl	8008a0c <USB_WritePMA>
 8007cb6:	e17e      	b.n	8007fb6 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d16f      	bne.n	8007da2 <USB_EPStartXfer+0xbf8>
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cda:	4413      	add	r3, r2
 8007cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	00da      	lsls	r2, r3, #3
 8007ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cec:	4413      	add	r3, r2
 8007cee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d116      	bne.n	8007d2c <USB_EPStartXfer+0xb82>
 8007cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d10:	801a      	strh	r2, [r3, #0]
 8007d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e05f      	b.n	8007dec <USB_EPStartXfer+0xc42>
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d30:	2b3e      	cmp	r3, #62	; 0x3e
 8007d32:	d818      	bhi.n	8007d66 <USB_EPStartXfer+0xbbc>
 8007d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <USB_EPStartXfer+0xbaa>
 8007d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	029b      	lsls	r3, r3, #10
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e042      	b.n	8007dec <USB_EPStartXfer+0xc42>
 8007d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <USB_EPStartXfer+0xbdc>
 8007d7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d80:	3b01      	subs	r3, #1
 8007d82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	029b      	lsls	r3, r3, #10
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e024      	b.n	8007dec <USB_EPStartXfer+0xc42>
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d11f      	bne.n	8007dec <USB_EPStartXfer+0xc42>
 8007dac:	1d3b      	adds	r3, r7, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007db4:	1d3b      	adds	r3, r7, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007dca:	463b      	mov	r3, r7
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	00da      	lsls	r2, r3, #3
 8007dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007dec:	463b      	mov	r3, r7
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	891b      	ldrh	r3, [r3, #8]
 8007df2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007df6:	463b      	mov	r3, r7
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6959      	ldr	r1, [r3, #20]
 8007dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e06:	1d38      	adds	r0, r7, #4
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	f000 fdff 	bl	8008a0c <USB_WritePMA>
          ep->xfer_buff += len;
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	441a      	add	r2, r3
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	463b      	mov	r3, r7
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d909      	bls.n	8007e44 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6a1a      	ldr	r2, [r3, #32]
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	1ad2      	subs	r2, r2, r3
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	621a      	str	r2, [r3, #32]
 8007e42:	e008      	b.n	8007e56 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007e44:	463b      	mov	r3, r7
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80ab 	beq.w	8007fb6 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e60:	1d3b      	adds	r3, r7, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d16f      	bne.n	8007f52 <USB_EPStartXfer+0xda8>
 8007e72:	1d3b      	adds	r3, r7, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e7a:	1d3b      	adds	r3, r7, #4
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e90:	463b      	mov	r3, r7
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	00da      	lsls	r2, r3, #3
 8007e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d116      	bne.n	8007edc <USB_EPStartXfer+0xd32>
 8007eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	e05b      	b.n	8007f94 <USB_EPStartXfer+0xdea>
 8007edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ee2:	d818      	bhi.n	8007f16 <USB_EPStartXfer+0xd6c>
 8007ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <USB_EPStartXfer+0xd5a>
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007efe:	3301      	adds	r3, #1
 8007f00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e03e      	b.n	8007f94 <USB_EPStartXfer+0xdea>
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <USB_EPStartXfer+0xd8c>
 8007f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f30:	3b01      	subs	r3, #1
 8007f32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	e020      	b.n	8007f94 <USB_EPStartXfer+0xdea>
 8007f52:	463b      	mov	r3, r7
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d11b      	bne.n	8007f94 <USB_EPStartXfer+0xdea>
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f72:	463b      	mov	r3, r7
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	00da      	lsls	r2, r3, #3
 8007f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f7e:	4413      	add	r3, r2
 8007f80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f94:	463b      	mov	r3, r7
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	895b      	ldrh	r3, [r3, #10]
 8007f9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6959      	ldr	r1, [r3, #20]
 8007fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007fae:	1d38      	adds	r0, r7, #4
 8007fb0:	6800      	ldr	r0, [r0, #0]
 8007fb2:	f000 fd2b 	bl	8008a0c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	463b      	mov	r3, r7
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f107 020a 	add.w	r2, r7, #10
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	8013      	strh	r3, [r2, #0]
 8007fd6:	f107 030a 	add.w	r3, r7, #10
 8007fda:	f107 020a 	add.w	r2, r7, #10
 8007fde:	8812      	ldrh	r2, [r2, #0]
 8007fe0:	f082 0210 	eor.w	r2, r2, #16
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	f107 030a 	add.w	r3, r7, #10
 8007fea:	f107 020a 	add.w	r2, r7, #10
 8007fee:	8812      	ldrh	r2, [r2, #0]
 8007ff0:	f082 0220 	eor.w	r2, r2, #32
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	f107 030a 	add.w	r3, r7, #10
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]
 800801e:	e3b5      	b.n	800878c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	7b1b      	ldrb	r3, [r3, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 8090 	bne.w	800814c <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800802c:	463b      	mov	r3, r7
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	463b      	mov	r3, r7
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	429a      	cmp	r2, r3
 800803a:	d90e      	bls.n	800805a <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800803c:	463b      	mov	r3, r7
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008050:	1ad2      	subs	r2, r2, r3
 8008052:	463b      	mov	r3, r7
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	619a      	str	r2, [r3, #24]
 8008058:	e008      	b.n	800806c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800805a:	463b      	mov	r3, r7
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008064:	463b      	mov	r3, r7
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2200      	movs	r2, #0
 800806a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008084:	4413      	add	r3, r2
 8008086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800808a:	463b      	mov	r3, r7
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	00da      	lsls	r2, r3, #3
 8008092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008096:	4413      	add	r3, r2
 8008098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800809c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d116      	bne.n	80080d6 <USB_EPStartXfer+0xf2c>
 80080a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	e32c      	b.n	8008730 <USB_EPStartXfer+0x1586>
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	2b3e      	cmp	r3, #62	; 0x3e
 80080dc:	d818      	bhi.n	8008110 <USB_EPStartXfer+0xf66>
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	085b      	lsrs	r3, r3, #1
 80080e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <USB_EPStartXfer+0xf54>
 80080f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080f8:	3301      	adds	r3, #1
 80080fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008102:	b29b      	uxth	r3, r3
 8008104:	029b      	lsls	r3, r3, #10
 8008106:	b29a      	uxth	r2, r3
 8008108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	e30f      	b.n	8008730 <USB_EPStartXfer+0x1586>
 8008110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800811a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <USB_EPStartXfer+0xf86>
 8008126:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800812a:	3b01      	subs	r3, #1
 800812c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008130:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008134:	b29b      	uxth	r3, r3
 8008136:	029b      	lsls	r3, r3, #10
 8008138:	b29b      	uxth	r3, r3
 800813a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	e2f1      	b.n	8008730 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800814c:	463b      	mov	r3, r7
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b02      	cmp	r3, #2
 8008154:	f040 818f 	bne.w	8008476 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008158:	463b      	mov	r3, r7
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d175      	bne.n	800824e <USB_EPStartXfer+0x10a4>
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800817a:	4413      	add	r3, r2
 800817c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	00da      	lsls	r2, r3, #3
 8008188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800818c:	4413      	add	r3, r2
 800818e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008196:	463b      	mov	r3, r7
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d116      	bne.n	80081ce <USB_EPStartXfer+0x1024>
 80081a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e065      	b.n	800829a <USB_EPStartXfer+0x10f0>
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b3e      	cmp	r3, #62	; 0x3e
 80081d6:	d81a      	bhi.n	800820e <USB_EPStartXfer+0x1064>
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <USB_EPStartXfer+0x1052>
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f6:	3301      	adds	r3, #1
 80081f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29a      	uxth	r2, r3
 8008206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800820a:	801a      	strh	r2, [r3, #0]
 800820c:	e045      	b.n	800829a <USB_EPStartXfer+0x10f0>
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	095b      	lsrs	r3, r3, #5
 8008216:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <USB_EPStartXfer+0x1088>
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	3b01      	subs	r3, #1
 800822e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	b29b      	uxth	r3, r3
 8008238:	029b      	lsls	r3, r3, #10
 800823a:	b29b      	uxth	r3, r3
 800823c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008244:	b29a      	uxth	r2, r3
 8008246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e025      	b.n	800829a <USB_EPStartXfer+0x10f0>
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d120      	bne.n	800829a <USB_EPStartXfer+0x10f0>
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008260:	1d3b      	adds	r3, r7, #4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008268:	b29b      	uxth	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008270:	4413      	add	r3, r2
 8008272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	00da      	lsls	r2, r3, #3
 800827e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008282:	4413      	add	r3, r2
 8008284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800828c:	463b      	mov	r3, r7
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	b29a      	uxth	r2, r3
 8008294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082a2:	463b      	mov	r3, r7
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d175      	bne.n	8008398 <USB_EPStartXfer+0x11ee>
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082b4:	1d3b      	adds	r3, r7, #4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082bc:	b29b      	uxth	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082c4:	4413      	add	r3, r2
 80082c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082ca:	463b      	mov	r3, r7
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	00da      	lsls	r2, r3, #3
 80082d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082d6:	4413      	add	r3, r2
 80082d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082e0:	463b      	mov	r3, r7
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d116      	bne.n	8008318 <USB_EPStartXfer+0x116e>
 80082ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	e061      	b.n	80083dc <USB_EPStartXfer+0x1232>
 8008318:	463b      	mov	r3, r7
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b3e      	cmp	r3, #62	; 0x3e
 8008320:	d81a      	bhi.n	8008358 <USB_EPStartXfer+0x11ae>
 8008322:	463b      	mov	r3, r7
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800832e:	463b      	mov	r3, r7
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <USB_EPStartXfer+0x119c>
 800833c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008340:	3301      	adds	r3, #1
 8008342:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800834a:	b29b      	uxth	r3, r3
 800834c:	029b      	lsls	r3, r3, #10
 800834e:	b29a      	uxth	r2, r3
 8008350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	e041      	b.n	80083dc <USB_EPStartXfer+0x1232>
 8008358:	463b      	mov	r3, r7
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <USB_EPStartXfer+0x11d2>
 8008372:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008376:	3b01      	subs	r3, #1
 8008378:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800837c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008380:	b29b      	uxth	r3, r3
 8008382:	029b      	lsls	r3, r3, #10
 8008384:	b29b      	uxth	r3, r3
 8008386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838e:	b29a      	uxth	r2, r3
 8008390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	e021      	b.n	80083dc <USB_EPStartXfer+0x1232>
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	785b      	ldrb	r3, [r3, #1]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d11c      	bne.n	80083dc <USB_EPStartXfer+0x1232>
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083b2:	4413      	add	r3, r2
 80083b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b8:	463b      	mov	r3, r7
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	00da      	lsls	r2, r3, #3
 80083c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80083dc:	463b      	mov	r3, r7
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 81a4 	beq.w	8008730 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083e8:	1d3b      	adds	r3, r7, #4
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	463b      	mov	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <USB_EPStartXfer+0x126a>
 8008408:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10d      	bne.n	8008430 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008414:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800841c:	2b00      	cmp	r3, #0
 800841e:	f040 8187 	bne.w	8008730 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008422:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	f040 8180 	bne.w	8008730 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008430:	1d3b      	adds	r3, r7, #4
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800846c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008470:	b29b      	uxth	r3, r3
 8008472:	8013      	strh	r3, [r2, #0]
 8008474:	e15c      	b.n	8008730 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	78db      	ldrb	r3, [r3, #3]
 800847c:	2b01      	cmp	r3, #1
 800847e:	f040 8155 	bne.w	800872c <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008482:	463b      	mov	r3, r7
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	429a      	cmp	r2, r3
 8008490:	d90e      	bls.n	80084b0 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008492:	463b      	mov	r3, r7
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800849c:	463b      	mov	r3, r7
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	463b      	mov	r3, r7
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	619a      	str	r2, [r3, #24]
 80084ae:	e008      	b.n	80084c2 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80084b0:	463b      	mov	r3, r7
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80084ba:	463b      	mov	r3, r7
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084c2:	463b      	mov	r3, r7
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d16f      	bne.n	80085ac <USB_EPStartXfer+0x1402>
 80084cc:	1d3b      	adds	r3, r7, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084d4:	1d3b      	adds	r3, r7, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084e4:	4413      	add	r3, r2
 80084e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084ea:	463b      	mov	r3, r7
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	00da      	lsls	r2, r3, #3
 80084f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084f6:	4413      	add	r3, r2
 80084f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d116      	bne.n	8008536 <USB_EPStartXfer+0x138c>
 8008508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852c:	b29a      	uxth	r2, r3
 800852e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	e05f      	b.n	80085f6 <USB_EPStartXfer+0x144c>
 8008536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853a:	2b3e      	cmp	r3, #62	; 0x3e
 800853c:	d818      	bhi.n	8008570 <USB_EPStartXfer+0x13c6>
 800853e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <USB_EPStartXfer+0x13b4>
 8008554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008558:	3301      	adds	r3, #1
 800855a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800855e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008562:	b29b      	uxth	r3, r3
 8008564:	029b      	lsls	r3, r3, #10
 8008566:	b29a      	uxth	r2, r3
 8008568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	e042      	b.n	80085f6 <USB_EPStartXfer+0x144c>
 8008570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800857a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	2b00      	cmp	r3, #0
 8008584:	d104      	bne.n	8008590 <USB_EPStartXfer+0x13e6>
 8008586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800858a:	3b01      	subs	r3, #1
 800858c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	b29b      	uxth	r3, r3
 8008596:	029b      	lsls	r3, r3, #10
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e024      	b.n	80085f6 <USB_EPStartXfer+0x144c>
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d11f      	bne.n	80085f6 <USB_EPStartXfer+0x144c>
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085be:	1d3b      	adds	r3, r7, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ce:	4413      	add	r3, r2
 80085d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085d4:	463b      	mov	r3, r7
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	00da      	lsls	r2, r3, #3
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e0:	4413      	add	r3, r2
 80085e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085f4:	801a      	strh	r2, [r3, #0]
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085fe:	463b      	mov	r3, r7
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d16f      	bne.n	80086e8 <USB_EPStartXfer+0x153e>
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008610:	1d3b      	adds	r3, r7, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008618:	b29b      	uxth	r3, r3
 800861a:	461a      	mov	r2, r3
 800861c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008620:	4413      	add	r3, r2
 8008622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	00da      	lsls	r2, r3, #3
 800862e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008632:	4413      	add	r3, r2
 8008634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800863c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d116      	bne.n	8008672 <USB_EPStartXfer+0x14c8>
 8008644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	b29b      	uxth	r3, r3
 800864c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008650:	b29a      	uxth	r2, r3
 8008652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	e05e      	b.n	8008730 <USB_EPStartXfer+0x1586>
 8008672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008676:	2b3e      	cmp	r3, #62	; 0x3e
 8008678:	d818      	bhi.n	80086ac <USB_EPStartXfer+0x1502>
 800867a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <USB_EPStartXfer+0x14f0>
 8008690:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008694:	3301      	adds	r3, #1
 8008696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800869a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800869e:	b29b      	uxth	r3, r3
 80086a0:	029b      	lsls	r3, r3, #10
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	e041      	b.n	8008730 <USB_EPStartXfer+0x1586>
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ba:	f003 031f 	and.w	r3, r3, #31
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <USB_EPStartXfer+0x1522>
 80086c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086c6:	3b01      	subs	r3, #1
 80086c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	029b      	lsls	r3, r3, #10
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086de:	b29a      	uxth	r2, r3
 80086e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	e023      	b.n	8008730 <USB_EPStartXfer+0x1586>
 80086e8:	463b      	mov	r3, r7
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d11e      	bne.n	8008730 <USB_EPStartXfer+0x1586>
 80086f2:	1d3b      	adds	r3, r7, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008702:	4413      	add	r3, r2
 8008704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008708:	463b      	mov	r3, r7
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	00da      	lsls	r2, r3, #3
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	4413      	add	r3, r2
 8008716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800871a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800871e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008722:	b29a      	uxth	r2, r3
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	e001      	b.n	8008730 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e02e      	b.n	800878e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008730:	1d3b      	adds	r3, r7, #4
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	463b      	mov	r3, r7
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800874e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008752:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008756:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800875a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800875e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008762:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d020      	beq.n	80087ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c0:	81bb      	strh	r3, [r7, #12]
 80087c2:	89bb      	ldrh	r3, [r7, #12]
 80087c4:	f083 0310 	eor.w	r3, r3, #16
 80087c8:	81bb      	strh	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	441a      	add	r2, r3
 80087d4:	89bb      	ldrh	r3, [r7, #12]
 80087d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	8013      	strh	r3, [r2, #0]
 80087ea:	e01f      	b.n	800882c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	81fb      	strh	r3, [r7, #14]
 8008804:	89fb      	ldrh	r3, [r7, #14]
 8008806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800880a:	81fb      	strh	r3, [r7, #14]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	441a      	add	r2, r3
 8008816:	89fb      	ldrh	r3, [r7, #14]
 8008818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800881c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008828:	b29b      	uxth	r3, r3
 800882a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800883a:	b480      	push	{r7}
 800883c:	b087      	sub	sp, #28
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	7b1b      	ldrb	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 809d 	bne.w	8008988 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d04c      	beq.n	80088f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	823b      	strh	r3, [r7, #16]
 8008864:	8a3b      	ldrh	r3, [r7, #16]
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d01b      	beq.n	80088a6 <USB_EPClearStall+0x6c>
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	81fb      	strh	r3, [r7, #14]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	441a      	add	r2, r3
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800889a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800889e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	78db      	ldrb	r3, [r3, #3]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d06c      	beq.n	8008988 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c4:	81bb      	strh	r3, [r7, #12]
 80088c6:	89bb      	ldrh	r3, [r7, #12]
 80088c8:	f083 0320 	eor.w	r3, r3, #32
 80088cc:	81bb      	strh	r3, [r7, #12]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	441a      	add	r2, r3
 80088d8:	89bb      	ldrh	r3, [r7, #12]
 80088da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	8013      	strh	r3, [r2, #0]
 80088ee:	e04b      	b.n	8008988 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	82fb      	strh	r3, [r7, #22]
 80088fe:	8afb      	ldrh	r3, [r7, #22]
 8008900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01b      	beq.n	8008940 <USB_EPClearStall+0x106>
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891e:	82bb      	strh	r3, [r7, #20]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	8abb      	ldrh	r3, [r7, #20]
 800892c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893c:	b29b      	uxth	r3, r3
 800893e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	827b      	strh	r3, [r7, #18]
 8008958:	8a7b      	ldrh	r3, [r7, #18]
 800895a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800895e:	827b      	strh	r3, [r7, #18]
 8008960:	8a7b      	ldrh	r3, [r7, #18]
 8008962:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008966:	827b      	strh	r3, [r7, #18]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	8a7b      	ldrh	r3, [r7, #18]
 8008974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	b29b      	uxth	r3, r3
 8008986:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2280      	movs	r2, #128	; 0x80
 80089ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089fe:	68fb      	ldr	r3, [r7, #12]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b08d      	sub	sp, #52	; 0x34
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	80fb      	strh	r3, [r7, #6]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a22:	88bb      	ldrh	r3, [r7, #4]
 8008a24:	3301      	adds	r3, #1
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a42:	e01b      	b.n	8008a7c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	3301      	adds	r3, #1
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e0      	bne.n	8008a44 <USB_WritePMA+0x38>
  }
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	3734      	adds	r7, #52	; 0x34
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b08b      	sub	sp, #44	; 0x2c
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	80fb      	strh	r3, [r7, #6]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008aa6:	88bb      	ldrh	r3, [r7, #4]
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ac0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac6:	e018      	b.n	8008afa <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	3301      	adds	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	3b01      	subs	r3, #1
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e3      	bne.n	8008ac8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b00:	88bb      	ldrh	r3, [r7, #4]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	701a      	strb	r2, [r3, #0]
  }
}
 8008b1c:	bf00      	nop
 8008b1e:	372c      	adds	r7, #44	; 0x2c
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b38:	f002 f8ec 	bl	800ad14 <USBD_static_malloc>
 8008b3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d105      	bne.n	8008b50 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e066      	b.n	8008c1e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7c1b      	ldrb	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d119      	bne.n	8008b94 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b64:	2202      	movs	r2, #2
 8008b66:	2181      	movs	r1, #129	; 0x81
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 ff78 	bl	800aa5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b78:	2202      	movs	r2, #2
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 ff6e 	bl	800aa5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008b92:	e016      	b.n	8008bc2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b94:	2340      	movs	r3, #64	; 0x40
 8008b96:	2202      	movs	r2, #2
 8008b98:	2181      	movs	r1, #129	; 0x81
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 ff5f 	bl	800aa5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	2202      	movs	r2, #2
 8008baa:	2101      	movs	r1, #1
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 ff56 	bl	800aa5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	2182      	movs	r1, #130	; 0x82
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 ff48 	bl	800aa5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	7c1b      	ldrb	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d109      	bne.n	8008c0c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c02:	2101      	movs	r1, #1
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f002 f81a 	bl	800ac3e <USBD_LL_PrepareReceive>
 8008c0a:	e007      	b.n	8008c1c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c12:	2340      	movs	r3, #64	; 0x40
 8008c14:	2101      	movs	r1, #1
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f002 f811 	bl	800ac3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c32:	2181      	movs	r1, #129	; 0x81
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 ff38 	bl	800aaaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c40:	2101      	movs	r1, #1
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 ff31 	bl	800aaaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c50:	2182      	movs	r1, #130	; 0x82
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 ff29 	bl	800aaaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00e      	beq.n	8008c90 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 f854 	bl	800ad30 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e0af      	b.n	8008e24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d03f      	beq.n	8008d50 <USBD_CDC_Setup+0xb4>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	f040 809f 	bne.w	8008e14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d02e      	beq.n	8008d3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b25b      	sxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	da16      	bge.n	8008d16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008cf4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	88d2      	ldrh	r2, [r2, #6]
 8008cfa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	bf28      	it	cs
 8008d04:	2307      	movcs	r3, #7
 8008d06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	89fa      	ldrh	r2, [r7, #14]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 facf 	bl	800a2b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d14:	e085      	b.n	8008e22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	785a      	ldrb	r2, [r3, #1]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	88db      	ldrh	r3, [r3, #6]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008d2c:	6939      	ldr	r1, [r7, #16]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	461a      	mov	r2, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fae8 	bl	800a30a <USBD_CtlPrepareRx>
      break;
 8008d3a:	e072      	b.n	8008e22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	7850      	ldrb	r0, [r2, #1]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	4798      	blx	r3
      break;
 8008d4e:	e068      	b.n	8008e22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b0b      	cmp	r3, #11
 8008d56:	d852      	bhi.n	8008dfe <USBD_CDC_Setup+0x162>
 8008d58:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <USBD_CDC_Setup+0xc4>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008d91 	.word	0x08008d91
 8008d64:	08008e0d 	.word	0x08008e0d
 8008d68:	08008dff 	.word	0x08008dff
 8008d6c:	08008dff 	.word	0x08008dff
 8008d70:	08008dff 	.word	0x08008dff
 8008d74:	08008dff 	.word	0x08008dff
 8008d78:	08008dff 	.word	0x08008dff
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008dff 	.word	0x08008dff
 8008d84:	08008dff 	.word	0x08008dff
 8008d88:	08008dbb 	.word	0x08008dbb
 8008d8c:	08008de5 	.word	0x08008de5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d107      	bne.n	8008dac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d9c:	f107 030a 	add.w	r3, r7, #10
 8008da0:	2202      	movs	r2, #2
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fa84 	bl	800a2b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008daa:	e032      	b.n	8008e12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fa0e 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	75fb      	strb	r3, [r7, #23]
          break;
 8008db8:	e02b      	b.n	8008e12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d107      	bne.n	8008dd6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dc6:	f107 030d 	add.w	r3, r7, #13
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fa6f 	bl	800a2b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd4:	e01d      	b.n	8008e12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 f9f9 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	75fb      	strb	r3, [r7, #23]
          break;
 8008de2:	e016      	b.n	8008e12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d00f      	beq.n	8008e10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f9ec 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dfc:	e008      	b.n	8008e10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 f9e5 	bl	800a1d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e06:	2303      	movs	r3, #3
 8008e08:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0a:	e002      	b.n	8008e12 <USBD_CDC_Setup+0x176>
          break;
 8008e0c:	bf00      	nop
 8008e0e:	e008      	b.n	8008e22 <USBD_CDC_Setup+0x186>
          break;
 8008e10:	bf00      	nop
      }
      break;
 8008e12:	e006      	b.n	8008e22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 f9da 	bl	800a1d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e20:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e04f      	b.n	8008eee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	3318      	adds	r3, #24
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d029      	beq.n	8008ec0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	3318      	adds	r3, #24
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	78f9      	ldrb	r1, [r7, #3]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	460b      	mov	r3, r1
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	4403      	add	r3, r0
 8008e8c:	3338      	adds	r3, #56	; 0x38
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e94:	fb03 f301 	mul.w	r3, r3, r1
 8008e98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d110      	bne.n	8008ec0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3318      	adds	r3, #24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008eb2:	78f9      	ldrb	r1, [r7, #3]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fe9f 	bl	800abfc <USBD_LL_Transmit>
 8008ebe:	e015      	b.n	8008eec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e015      	b.n	8008f44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 feaf 	bl	800ac80 <USBD_LL_GetRxDataSize>
 8008f22:	4602      	mov	r2, r0
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e01b      	b.n	8008f9e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d015      	beq.n	8008f9c <USBD_CDC_EP0_RxReady+0x50>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f76:	2bff      	cmp	r3, #255	; 0xff
 8008f78:	d010      	beq.n	8008f9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008f88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f90:	b292      	uxth	r2, r2
 8008f92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	22ff      	movs	r2, #255	; 0xff
 8008f98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2243      	movs	r2, #67	; 0x43
 8008fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200000e4 	.word	0x200000e4

08008fc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2243      	movs	r2, #67	; 0x43
 8008fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	200000a0 	.word	0x200000a0

08008fe8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2243      	movs	r2, #67	; 0x43
 8008ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20000128 	.word	0x20000128

08009008 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	220a      	movs	r2, #10
 8009014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	2000005c 	.word	0x2000005c

08009028 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	e004      	b.n	8009046 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009052:	b480      	push	{r7}
 8009054:	b087      	sub	sp, #28
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009064:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	e008      	b.n	8009082 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800909e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e004      	b.n	80090b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090de:	2303      	movs	r3, #3
 80090e0:	e01a      	b.n	8009118 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d114      	bne.n	8009116 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800910a:	2181      	movs	r1, #129	; 0x81
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fd75 	bl	800abfc <USBD_LL_Transmit>

    ret = USBD_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800912e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	e016      	b.n	800916c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800914c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fd73 	bl	800ac3e <USBD_LL_PrepareReceive>
 8009158:	e007      	b.n	800916a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	2101      	movs	r1, #1
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fd6a 	bl	800ac3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	e01f      	b.n	80091cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	79fa      	ldrb	r2, [r7, #7]
 80091be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 fbd1 	bl	800a968 <USBD_LL_Init>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e016      	b.n	800921a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	f107 020e 	add.w	r2, r7, #14
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fbfc 	bl	800aa28 <USBD_LL_Start>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	4611      	mov	r1, r2
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800927e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d007      	beq.n	80092ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
  }

  return USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 ff46 	bl	800a15c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092de:	461a      	mov	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d01a      	beq.n	800932a <USBD_LL_SetupStage+0x72>
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d822      	bhi.n	800933e <USBD_LL_SetupStage+0x86>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <USBD_LL_SetupStage+0x4a>
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d00a      	beq.n	8009316 <USBD_LL_SetupStage+0x5e>
 8009300:	e01d      	b.n	800933e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f9ee 	bl	80096ec <USBD_StdDevReq>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
      break;
 8009314:	e020      	b.n	8009358 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa52 	bl	80097c8 <USBD_StdItfReq>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
      break;
 8009328:	e016      	b.n	8009358 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa91 	bl	800985a <USBD_StdEPReq>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e00c      	b.n	8009358 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009348:	b2db      	uxtb	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fbcb 	bl	800aae8 <USBD_LL_StallEP>
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	bf00      	nop
  }

  return ret;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	460b      	mov	r3, r1
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d138      	bne.n	80093e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800937c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009384:	2b03      	cmp	r3, #3
 8009386:	d14a      	bne.n	800941e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	429a      	cmp	r2, r3
 8009392:	d913      	bls.n	80093bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	1ad2      	subs	r2, r2, r3
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	4293      	cmp	r3, r2
 80093ac:	bf28      	it	cs
 80093ae:	4613      	movcs	r3, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 ffc5 	bl	800a344 <USBD_CtlContinueRx>
 80093ba:	e030      	b.n	800941e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d10b      	bne.n	80093e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 ffc0 	bl	800a366 <USBD_CtlSendStatus>
 80093e6:	e01a      	b.n	800941e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d114      	bne.n	800941e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00e      	beq.n	800941e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	7afa      	ldrb	r2, [r7, #11]
 800940a:	4611      	mov	r1, r2
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	e000      	b.n	8009420 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	460b      	mov	r3, r1
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d16b      	bne.n	8009514 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3314      	adds	r3, #20
 8009440:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009448:	2b02      	cmp	r3, #2
 800944a:	d156      	bne.n	80094fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	429a      	cmp	r2, r3
 8009456:	d914      	bls.n	8009482 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	1ad2      	subs	r2, r2, r3
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	461a      	mov	r2, r3
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 ff3a 	bl	800a2e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009474:	2300      	movs	r3, #0
 8009476:	2200      	movs	r2, #0
 8009478:	2100      	movs	r1, #0
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f001 fbdf 	bl	800ac3e <USBD_LL_PrepareReceive>
 8009480:	e03b      	b.n	80094fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d11c      	bne.n	80094c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009496:	429a      	cmp	r2, r3
 8009498:	d316      	bcc.n	80094c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d20f      	bcs.n	80094c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094a8:	2200      	movs	r2, #0
 80094aa:	2100      	movs	r1, #0
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 ff1b 	bl	800a2e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ba:	2300      	movs	r3, #0
 80094bc:	2200      	movs	r2, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f001 fbbc 	bl	800ac3e <USBD_LL_PrepareReceive>
 80094c6:	e018      	b.n	80094fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d10b      	bne.n	80094ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	; 0x80
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f001 fafa 	bl	800aae8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 ff49 	bl	800a38c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009500:	2b01      	cmp	r3, #1
 8009502:	d122      	bne.n	800954a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fe98 	bl	800923a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009512:	e01a      	b.n	800954a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b03      	cmp	r3, #3
 800951e:	d114      	bne.n	800954a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	7afa      	ldrb	r2, [r7, #11]
 8009536:	4611      	mov	r1, r2
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	4798      	blx	r3
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	e000      	b.n	800954c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	e02f      	b.n	80095e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00f      	beq.n	80095b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6852      	ldr	r2, [r2, #4]
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	4611      	mov	r1, r2
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	2200      	movs	r2, #0
 80095b6:	2100      	movs	r1, #0
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fa50 	bl	800aa5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2240      	movs	r2, #64	; 0x40
 80095ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	2200      	movs	r2, #0
 80095d2:	2180      	movs	r1, #128	; 0x80
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fa42 	bl	800aa5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2240      	movs	r2, #64	; 0x40
 80095e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	b2da      	uxtb	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2204      	movs	r2, #4
 800962a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b04      	cmp	r3, #4
 800964e:	d106      	bne.n	800965e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009656:	b2da      	uxtb	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	e012      	b.n	80096a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d10b      	bne.n	80096a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	3301      	adds	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096ce:	8a3b      	ldrh	r3, [r7, #16]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	b21a      	sxth	r2, r3
 80096d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096d8:	4313      	orrs	r3, r2
 80096da:	b21b      	sxth	r3, r3
 80096dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096de:	89fb      	ldrh	r3, [r7, #14]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009702:	2b40      	cmp	r3, #64	; 0x40
 8009704:	d005      	beq.n	8009712 <USBD_StdDevReq+0x26>
 8009706:	2b40      	cmp	r3, #64	; 0x40
 8009708:	d853      	bhi.n	80097b2 <USBD_StdDevReq+0xc6>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00b      	beq.n	8009726 <USBD_StdDevReq+0x3a>
 800970e:	2b20      	cmp	r3, #32
 8009710:	d14f      	bne.n	80097b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
      break;
 8009724:	e04a      	b.n	80097bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2b09      	cmp	r3, #9
 800972c:	d83b      	bhi.n	80097a6 <USBD_StdDevReq+0xba>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <USBD_StdDevReq+0x48>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009789 	.word	0x08009789
 8009738:	0800979d 	.word	0x0800979d
 800973c:	080097a7 	.word	0x080097a7
 8009740:	08009793 	.word	0x08009793
 8009744:	080097a7 	.word	0x080097a7
 8009748:	08009767 	.word	0x08009767
 800974c:	0800975d 	.word	0x0800975d
 8009750:	080097a7 	.word	0x080097a7
 8009754:	0800977f 	.word	0x0800977f
 8009758:	08009771 	.word	0x08009771
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f9de 	bl	8009b20 <USBD_GetDescriptor>
          break;
 8009764:	e024      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb6d 	bl	8009e48 <USBD_SetAddress>
          break;
 800976e:	e01f      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fbac 	bl	8009ed0 <USBD_SetConfig>
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]
          break;
 800977c:	e018      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fc4b 	bl	800a01c <USBD_GetConfig>
          break;
 8009786:	e013      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fc7c 	bl	800a088 <USBD_GetStatus>
          break;
 8009790:	e00e      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fcab 	bl	800a0f0 <USBD_SetFeature>
          break;
 800979a:	e009      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fcba 	bl	800a118 <USBD_ClrFeature>
          break;
 80097a4:	e004      	b.n	80097b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fd11 	bl	800a1d0 <USBD_CtlError>
          break;
 80097ae:	bf00      	nop
      }
      break;
 80097b0:	e004      	b.n	80097bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd0b 	bl	800a1d0 <USBD_CtlError>
      break;
 80097ba:	bf00      	nop
  }

  return ret;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop

080097c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097de:	2b40      	cmp	r3, #64	; 0x40
 80097e0:	d005      	beq.n	80097ee <USBD_StdItfReq+0x26>
 80097e2:	2b40      	cmp	r3, #64	; 0x40
 80097e4:	d82f      	bhi.n	8009846 <USBD_StdItfReq+0x7e>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <USBD_StdItfReq+0x26>
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d12b      	bne.n	8009846 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d81d      	bhi.n	8009838 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	889b      	ldrh	r3, [r3, #4]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b01      	cmp	r3, #1
 8009804:	d813      	bhi.n	800982e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	88db      	ldrh	r3, [r3, #6]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d110      	bne.n	8009842 <USBD_StdItfReq+0x7a>
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10d      	bne.n	8009842 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fd9d 	bl	800a366 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800982c:	e009      	b.n	8009842 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fccd 	bl	800a1d0 <USBD_CtlError>
          break;
 8009836:	e004      	b.n	8009842 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fcc8 	bl	800a1d0 <USBD_CtlError>
          break;
 8009840:	e000      	b.n	8009844 <USBD_StdItfReq+0x7c>
          break;
 8009842:	bf00      	nop
      }
      break;
 8009844:	e004      	b.n	8009850 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fcc1 	bl	800a1d0 <USBD_CtlError>
      break;
 800984e:	bf00      	nop
  }

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	889b      	ldrh	r3, [r3, #4]
 800986c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	d007      	beq.n	800988a <USBD_StdEPReq+0x30>
 800987a:	2b40      	cmp	r3, #64	; 0x40
 800987c:	f200 8145 	bhi.w	8009b0a <USBD_StdEPReq+0x2b0>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <USBD_StdEPReq+0x44>
 8009884:	2b20      	cmp	r3, #32
 8009886:	f040 8140 	bne.w	8009b0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]
      break;
 800989c:	e13a      	b.n	8009b14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d007      	beq.n	80098b6 <USBD_StdEPReq+0x5c>
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	f300 8129 	bgt.w	8009afe <USBD_StdEPReq+0x2a4>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d07f      	beq.n	80099b0 <USBD_StdEPReq+0x156>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d03c      	beq.n	800992e <USBD_StdEPReq+0xd4>
 80098b4:	e123      	b.n	8009afe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d002      	beq.n	80098c8 <USBD_StdEPReq+0x6e>
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d016      	beq.n	80098f4 <USBD_StdEPReq+0x9a>
 80098c6:	e02c      	b.n	8009922 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00d      	beq.n	80098ea <USBD_StdEPReq+0x90>
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b80      	cmp	r3, #128	; 0x80
 80098d2:	d00a      	beq.n	80098ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f905 	bl	800aae8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098de:	2180      	movs	r1, #128	; 0x80
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 f901 	bl	800aae8 <USBD_LL_StallEP>
 80098e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098e8:	e020      	b.n	800992c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fc6f 	bl	800a1d0 <USBD_CtlError>
              break;
 80098f2:	e01b      	b.n	800992c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	885b      	ldrh	r3, [r3, #2]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10e      	bne.n	800991a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <USBD_StdEPReq+0xc0>
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	2b80      	cmp	r3, #128	; 0x80
 8009906:	d008      	beq.n	800991a <USBD_StdEPReq+0xc0>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	88db      	ldrh	r3, [r3, #6]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f8e7 	bl	800aae8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fd23 	bl	800a366 <USBD_CtlSendStatus>

              break;
 8009920:	e004      	b.n	800992c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fc53 	bl	800a1d0 <USBD_CtlError>
              break;
 800992a:	bf00      	nop
          }
          break;
 800992c:	e0ec      	b.n	8009b08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d002      	beq.n	8009940 <USBD_StdEPReq+0xe6>
 800993a:	2b03      	cmp	r3, #3
 800993c:	d016      	beq.n	800996c <USBD_StdEPReq+0x112>
 800993e:	e030      	b.n	80099a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00d      	beq.n	8009962 <USBD_StdEPReq+0x108>
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	2b80      	cmp	r3, #128	; 0x80
 800994a:	d00a      	beq.n	8009962 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 f8c9 	bl	800aae8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009956:	2180      	movs	r1, #128	; 0x80
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 f8c5 	bl	800aae8 <USBD_LL_StallEP>
 800995e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009960:	e025      	b.n	80099ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc33 	bl	800a1d0 <USBD_CtlError>
              break;
 800996a:	e020      	b.n	80099ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	885b      	ldrh	r3, [r3, #2]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11b      	bne.n	80099ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 f8cf 	bl	800ab26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fcec 	bl	800a366 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80099a0:	e004      	b.n	80099ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc13 	bl	800a1d0 <USBD_CtlError>
              break;
 80099aa:	e000      	b.n	80099ae <USBD_StdEPReq+0x154>
              break;
 80099ac:	bf00      	nop
          }
          break;
 80099ae:	e0ab      	b.n	8009b08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d002      	beq.n	80099c2 <USBD_StdEPReq+0x168>
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d032      	beq.n	8009a26 <USBD_StdEPReq+0x1cc>
 80099c0:	e097      	b.n	8009af2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <USBD_StdEPReq+0x17e>
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d004      	beq.n	80099d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fbfd 	bl	800a1d0 <USBD_CtlError>
                break;
 80099d6:	e091      	b.n	8009afc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da0b      	bge.n	80099f8 <USBD_StdEPReq+0x19e>
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	3310      	adds	r3, #16
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	3304      	adds	r3, #4
 80099f6:	e00b      	b.n	8009a10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3304      	adds	r3, #4
 8009a10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fc47 	bl	800a2b2 <USBD_CtlSendData>
              break;
 8009a24:	e06a      	b.n	8009afc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da11      	bge.n	8009a52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	f003 020f 	and.w	r2, r3, #15
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	440b      	add	r3, r1
 8009a40:	3324      	adds	r3, #36	; 0x24
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d117      	bne.n	8009a78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fbc0 	bl	800a1d0 <USBD_CtlError>
                  break;
 8009a50:	e054      	b.n	8009afc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	440b      	add	r3, r1
 8009a64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d104      	bne.n	8009a78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fbad 	bl	800a1d0 <USBD_CtlError>
                  break;
 8009a76:	e041      	b.n	8009afc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da0b      	bge.n	8009a98 <USBD_StdEPReq+0x23e>
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	3310      	adds	r3, #16
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	3304      	adds	r3, #4
 8009a96:	e00b      	b.n	8009ab0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <USBD_StdEPReq+0x264>
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	2b80      	cmp	r3, #128	; 0x80
 8009abc:	d103      	bne.n	8009ac6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	e00e      	b.n	8009ae4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 f84a 	bl	800ab64 <USBD_LL_IsStallEP>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e002      	b.n	8009ae4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fbe1 	bl	800a2b2 <USBD_CtlSendData>
              break;
 8009af0:	e004      	b.n	8009afc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fb6b 	bl	800a1d0 <USBD_CtlError>
              break;
 8009afa:	bf00      	nop
          }
          break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb65 	bl	800a1d0 <USBD_CtlError>
          break;
 8009b06:	bf00      	nop
      }
      break;
 8009b08:	e004      	b.n	8009b14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fb5f 	bl	800a1d0 <USBD_CtlError>
      break;
 8009b12:	bf00      	nop
  }

  return ret;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	885b      	ldrh	r3, [r3, #2]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	2b0e      	cmp	r3, #14
 8009b42:	f200 8152 	bhi.w	8009dea <USBD_GetDescriptor+0x2ca>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <USBD_GetDescriptor+0x2c>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009bbd 	.word	0x08009bbd
 8009b50:	08009bd5 	.word	0x08009bd5
 8009b54:	08009c15 	.word	0x08009c15
 8009b58:	08009deb 	.word	0x08009deb
 8009b5c:	08009deb 	.word	0x08009deb
 8009b60:	08009d8b 	.word	0x08009d8b
 8009b64:	08009db7 	.word	0x08009db7
 8009b68:	08009deb 	.word	0x08009deb
 8009b6c:	08009deb 	.word	0x08009deb
 8009b70:	08009deb 	.word	0x08009deb
 8009b74:	08009deb 	.word	0x08009deb
 8009b78:	08009deb 	.word	0x08009deb
 8009b7c:	08009deb 	.word	0x08009deb
 8009b80:	08009deb 	.word	0x08009deb
 8009b84:	08009b89 	.word	0x08009b89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	7c12      	ldrb	r2, [r2, #16]
 8009ba0:	f107 0108 	add.w	r1, r7, #8
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009baa:	e126      	b.n	8009dfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fb0e 	bl	800a1d0 <USBD_CtlError>
        err++;
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	72fb      	strb	r3, [r7, #11]
      break;
 8009bba:	e11e      	b.n	8009dfa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
      break;
 8009bd2:	e112      	b.n	8009dfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7c1b      	ldrb	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10d      	bne.n	8009bf8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be4:	f107 0208 	add.w	r2, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bf6:	e100      	b.n	8009dfa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	f107 0208 	add.w	r2, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	2202      	movs	r2, #2
 8009c10:	701a      	strb	r2, [r3, #0]
      break;
 8009c12:	e0f2      	b.n	8009dfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	885b      	ldrh	r3, [r3, #2]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	f200 80ac 	bhi.w	8009d78 <USBD_GetDescriptor+0x258>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <USBD_GetDescriptor+0x108>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c75 	.word	0x08009c75
 8009c30:	08009ca9 	.word	0x08009ca9
 8009c34:	08009cdd 	.word	0x08009cdd
 8009c38:	08009d11 	.word	0x08009d11
 8009c3c:	08009d45 	.word	0x08009d45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	7c12      	ldrb	r2, [r2, #16]
 8009c58:	f107 0108 	add.w	r1, r7, #8
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c62:	e091      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fab2 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009c6c:	7afb      	ldrb	r3, [r7, #11]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	72fb      	strb	r3, [r7, #11]
          break;
 8009c72:	e089      	b.n	8009d88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	7c12      	ldrb	r2, [r2, #16]
 8009c8c:	f107 0108 	add.w	r1, r7, #8
 8009c90:	4610      	mov	r0, r2
 8009c92:	4798      	blx	r3
 8009c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c96:	e077      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fa98 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ca6:	e06f      	b.n	8009d88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	7c12      	ldrb	r2, [r2, #16]
 8009cc0:	f107 0108 	add.w	r1, r7, #8
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4798      	blx	r3
 8009cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cca:	e05d      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa7e 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009cd4:	7afb      	ldrb	r3, [r7, #11]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cda:	e055      	b.n	8009d88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	7c12      	ldrb	r2, [r2, #16]
 8009cf4:	f107 0108 	add.w	r1, r7, #8
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cfe:	e043      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fa64 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d0e:	e03b      	b.n	8009d88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7c12      	ldrb	r2, [r2, #16]
 8009d28:	f107 0108 	add.w	r1, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d32:	e029      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa4a 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	72fb      	strb	r3, [r7, #11]
          break;
 8009d42:	e021      	b.n	8009d88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	7c12      	ldrb	r2, [r2, #16]
 8009d5c:	f107 0108 	add.w	r1, r7, #8
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d66:	e00f      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa30 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	3301      	adds	r3, #1
 8009d74:	72fb      	strb	r3, [r7, #11]
          break;
 8009d76:	e007      	b.n	8009d88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa28 	bl	800a1d0 <USBD_CtlError>
          err++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009d86:	bf00      	nop
      }
      break;
 8009d88:	e037      	b.n	8009dfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	7c1b      	ldrb	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	f107 0208 	add.w	r2, r7, #8
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4798      	blx	r3
 8009da2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009da4:	e029      	b.n	8009dfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fa11 	bl	800a1d0 <USBD_CtlError>
        err++;
 8009dae:	7afb      	ldrb	r3, [r7, #11]
 8009db0:	3301      	adds	r3, #1
 8009db2:	72fb      	strb	r3, [r7, #11]
      break;
 8009db4:	e021      	b.n	8009dfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7c1b      	ldrb	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10d      	bne.n	8009dda <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	f107 0208 	add.w	r2, r7, #8
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4798      	blx	r3
 8009dce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	2207      	movs	r2, #7
 8009dd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd8:	e00f      	b.n	8009dfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f9f7 	bl	800a1d0 <USBD_CtlError>
        err++;
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	3301      	adds	r3, #1
 8009de6:	72fb      	strb	r3, [r7, #11]
      break;
 8009de8:	e007      	b.n	8009dfa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9ef 	bl	800a1d0 <USBD_CtlError>
      err++;
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	3301      	adds	r3, #1
 8009df6:	72fb      	strb	r3, [r7, #11]
      break;
 8009df8:	bf00      	nop
  }

  if (err != 0U)
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d11e      	bne.n	8009e3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	88db      	ldrh	r3, [r3, #6]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d016      	beq.n	8009e36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009e08:	893b      	ldrh	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00e      	beq.n	8009e2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	88da      	ldrh	r2, [r3, #6]
 8009e12:	893b      	ldrh	r3, [r7, #8]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	bf28      	it	cs
 8009e18:	4613      	movcs	r3, r2
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e1e:	893b      	ldrh	r3, [r7, #8]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68f9      	ldr	r1, [r7, #12]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fa44 	bl	800a2b2 <USBD_CtlSendData>
 8009e2a:	e009      	b.n	8009e40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f9ce 	bl	800a1d0 <USBD_CtlError>
 8009e34:	e004      	b.n	8009e40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa95 	bl	800a366 <USBD_CtlSendStatus>
 8009e3c:	e000      	b.n	8009e40 <USBD_GetDescriptor+0x320>
    return;
 8009e3e:	bf00      	nop
  }
}
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop

08009e48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	889b      	ldrh	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d131      	bne.n	8009ebe <USBD_SetAddress+0x76>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88db      	ldrh	r3, [r3, #6]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d12d      	bne.n	8009ebe <USBD_SetAddress+0x76>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	885b      	ldrh	r3, [r3, #2]
 8009e66:	2b7f      	cmp	r3, #127	; 0x7f
 8009e68:	d829      	bhi.n	8009ebe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	885b      	ldrh	r3, [r3, #2]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d104      	bne.n	8009e8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f9a3 	bl	800a1d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8a:	e01d      	b.n	8009ec8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7bfa      	ldrb	r2, [r7, #15]
 8009e90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fe90 	bl	800abbe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa61 	bl	800a366 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d004      	beq.n	8009eb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb2:	e009      	b.n	8009ec8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ebc:	e004      	b.n	8009ec8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f985 	bl	800a1d0 <USBD_CtlError>
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	885b      	ldrh	r3, [r3, #2]
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	4b4c      	ldr	r3, [pc, #304]	; (800a018 <USBD_SetConfig+0x148>)
 8009ee6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ee8:	4b4b      	ldr	r3, [pc, #300]	; (800a018 <USBD_SetConfig+0x148>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d905      	bls.n	8009efc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f96c 	bl	800a1d0 <USBD_CtlError>
    return USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e088      	b.n	800a00e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d002      	beq.n	8009f0e <USBD_SetConfig+0x3e>
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d025      	beq.n	8009f58 <USBD_SetConfig+0x88>
 8009f0c:	e071      	b.n	8009ff2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f0e:	4b42      	ldr	r3, [pc, #264]	; (800a018 <USBD_SetConfig+0x148>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01c      	beq.n	8009f50 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009f16:	4b40      	ldr	r3, [pc, #256]	; (800a018 <USBD_SetConfig+0x148>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f20:	4b3d      	ldr	r3, [pc, #244]	; (800a018 <USBD_SetConfig+0x148>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff f992 	bl	8009250 <USBD_SetClassConfig>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f949 	bl	800a1d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f3e:	e065      	b.n	800a00c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fa10 	bl	800a366 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2203      	movs	r2, #3
 8009f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f4e:	e05d      	b.n	800a00c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fa08 	bl	800a366 <USBD_CtlSendStatus>
      break;
 8009f56:	e059      	b.n	800a00c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f58:	4b2f      	ldr	r3, [pc, #188]	; (800a018 <USBD_SetConfig+0x148>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d112      	bne.n	8009f86 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f68:	4b2b      	ldr	r3, [pc, #172]	; (800a018 <USBD_SetConfig+0x148>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <USBD_SetConfig+0x148>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff f985 	bl	8009288 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f9f1 	bl	800a366 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f84:	e042      	b.n	800a00c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <USBD_SetConfig+0x148>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d02a      	beq.n	8009fea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff f973 	bl	8009288 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fa2:	4b1d      	ldr	r3, [pc, #116]	; (800a018 <USBD_SetConfig+0x148>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fac:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <USBD_SetConfig+0x148>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff f94c 	bl	8009250 <USBD_SetClassConfig>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00f      	beq.n	8009fe2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f903 	bl	800a1d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff f958 	bl	8009288 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fe0:	e014      	b.n	800a00c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f9bf 	bl	800a366 <USBD_CtlSendStatus>
      break;
 8009fe8:	e010      	b.n	800a00c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f9bb 	bl	800a366 <USBD_CtlSendStatus>
      break;
 8009ff0:	e00c      	b.n	800a00c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f8eb 	bl	800a1d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <USBD_SetConfig+0x148>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff f941 	bl	8009288 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	73fb      	strb	r3, [r7, #15]
      break;
 800a00a:	bf00      	nop
  }

  return ret;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000200 	.word	0x20000200

0800a01c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88db      	ldrh	r3, [r3, #6]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d004      	beq.n	800a038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f8cd 	bl	800a1d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a036:	e023      	b.n	800a080 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	dc02      	bgt.n	800a04a <USBD_GetConfig+0x2e>
 800a044:	2b00      	cmp	r3, #0
 800a046:	dc03      	bgt.n	800a050 <USBD_GetConfig+0x34>
 800a048:	e015      	b.n	800a076 <USBD_GetConfig+0x5a>
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d00b      	beq.n	800a066 <USBD_GetConfig+0x4a>
 800a04e:	e012      	b.n	800a076 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3308      	adds	r3, #8
 800a05a:	2201      	movs	r2, #1
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f927 	bl	800a2b2 <USBD_CtlSendData>
        break;
 800a064:	e00c      	b.n	800a080 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	2201      	movs	r2, #1
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f91f 	bl	800a2b2 <USBD_CtlSendData>
        break;
 800a074:	e004      	b.n	800a080 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f8a9 	bl	800a1d0 <USBD_CtlError>
        break;
 800a07e:	bf00      	nop
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d81e      	bhi.n	800a0de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	88db      	ldrh	r3, [r3, #6]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d004      	beq.n	800a0b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f890 	bl	800a1d0 <USBD_CtlError>
        break;
 800a0b0:	e01a      	b.n	800a0e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f043 0202 	orr.w	r2, r3, #2
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	330c      	adds	r3, #12
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f8eb 	bl	800a2b2 <USBD_CtlSendData>
      break;
 800a0dc:	e004      	b.n	800a0e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f875 	bl	800a1d0 <USBD_CtlError>
      break;
 800a0e6:	bf00      	nop
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d106      	bne.n	800a110 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f92b 	bl	800a366 <USBD_CtlSendStatus>
  }
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d80b      	bhi.n	800a148 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	885b      	ldrh	r3, [r3, #2]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d10c      	bne.n	800a152 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f910 	bl	800a366 <USBD_CtlSendStatus>
      }
      break;
 800a146:	e004      	b.n	800a152 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f840 	bl	800a1d0 <USBD_CtlError>
      break;
 800a150:	e000      	b.n	800a154 <USBD_ClrFeature+0x3c>
      break;
 800a152:	bf00      	nop
  }
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3301      	adds	r3, #1
 800a176:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	781a      	ldrb	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3301      	adds	r3, #1
 800a184:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff fa92 	bl	80096b0 <SWAPBYTE>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fa85 	bl	80096b0 <SWAPBYTE>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff fa78 	bl	80096b0 <SWAPBYTE>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	80da      	strh	r2, [r3, #6]
}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1da:	2180      	movs	r1, #128	; 0x80
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fc83 	bl	800aae8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fc7f 	bl	800aae8 <USBD_LL_StallEP>
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b086      	sub	sp, #24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d036      	beq.n	800a276 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a20c:	6938      	ldr	r0, [r7, #16]
 800a20e:	f000 f836 	bl	800a27e <USBD_GetLen>
 800a212:	4603      	mov	r3, r0
 800a214:	3301      	adds	r3, #1
 800a216:	b29b      	uxth	r3, r3
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4413      	add	r3, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	7812      	ldrb	r2, [r2, #0]
 800a22a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	3301      	adds	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	4413      	add	r3, r2
 800a238:	2203      	movs	r2, #3
 800a23a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	3301      	adds	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a242:	e013      	b.n	800a26c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	4413      	add	r3, r2
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	7812      	ldrb	r2, [r2, #0]
 800a24e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	3301      	adds	r3, #1
 800a254:	613b      	str	r3, [r7, #16]
    idx++;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	3301      	adds	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	4413      	add	r3, r2
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
    idx++;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	3301      	adds	r3, #1
 800a26a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e7      	bne.n	800a244 <USBD_GetString+0x52>
 800a274:	e000      	b.n	800a278 <USBD_GetString+0x86>
    return;
 800a276:	bf00      	nop
  }
}
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a28e:	e005      	b.n	800a29c <USBD_GetLen+0x1e>
  {
    len++;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	3301      	adds	r3, #1
 800a294:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	3301      	adds	r3, #1
 800a29a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1f5      	bne.n	800a290 <USBD_GetLen+0x12>
  }

  return len;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	60b9      	str	r1, [r7, #8]
 800a2bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fc8f 	bl	800abfc <USBD_LL_Transmit>

  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 fc7e 	bl	800abfc <USBD_LL_Transmit>

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2203      	movs	r2, #3
 800a31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	2100      	movs	r1, #0
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 fc82 	bl	800ac3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	2100      	movs	r1, #0
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fc71 	bl	800ac3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2204      	movs	r2, #4
 800a372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a376:	2300      	movs	r3, #0
 800a378:	2200      	movs	r2, #0
 800a37a:	2100      	movs	r1, #0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fc3d 	bl	800abfc <USBD_LL_Transmit>

  return USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2205      	movs	r2, #5
 800a398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a39c:	2300      	movs	r3, #0
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fc4b 	bl	800ac3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4912      	ldr	r1, [pc, #72]	; (800a404 <MX_USB_Device_Init+0x50>)
 800a3bc:	4812      	ldr	r0, [pc, #72]	; (800a408 <MX_USB_Device_Init+0x54>)
 800a3be:	f7fe fed9 	bl	8009174 <USBD_Init>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a3c8:	f7f6 fd70 	bl	8000eac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a3cc:	490f      	ldr	r1, [pc, #60]	; (800a40c <MX_USB_Device_Init+0x58>)
 800a3ce:	480e      	ldr	r0, [pc, #56]	; (800a408 <MX_USB_Device_Init+0x54>)
 800a3d0:	f7fe ff00 	bl	80091d4 <USBD_RegisterClass>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a3da:	f7f6 fd67 	bl	8000eac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a3de:	490c      	ldr	r1, [pc, #48]	; (800a410 <MX_USB_Device_Init+0x5c>)
 800a3e0:	4809      	ldr	r0, [pc, #36]	; (800a408 <MX_USB_Device_Init+0x54>)
 800a3e2:	f7fe fe21 	bl	8009028 <USBD_CDC_RegisterInterface>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a3ec:	f7f6 fd5e 	bl	8000eac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a3f0:	4805      	ldr	r0, [pc, #20]	; (800a408 <MX_USB_Device_Init+0x54>)
 800a3f2:	f7fe ff16 	bl	8009222 <USBD_Start>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a3fc:	f7f6 fd56 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a400:	bf00      	nop
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000180 	.word	0x20000180
 800a408:	2000074c 	.word	0x2000074c
 800a40c:	20000068 	.word	0x20000068
 800a410:	2000016c 	.word	0x2000016c

0800a414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a418:	2200      	movs	r2, #0
 800a41a:	4905      	ldr	r1, [pc, #20]	; (800a430 <CDC_Init_FS+0x1c>)
 800a41c:	4805      	ldr	r0, [pc, #20]	; (800a434 <CDC_Init_FS+0x20>)
 800a41e:	f7fe fe18 	bl	8009052 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a422:	4905      	ldr	r1, [pc, #20]	; (800a438 <CDC_Init_FS+0x24>)
 800a424:	4803      	ldr	r0, [pc, #12]	; (800a434 <CDC_Init_FS+0x20>)
 800a426:	f7fe fe32 	bl	800908e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a42a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20000e04 	.word	0x20000e04
 800a434:	2000074c 	.word	0x2000074c
 800a438:	20000a1c 	.word	0x20000a1c

0800a43c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a442:	4618      	mov	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	71fb      	strb	r3, [r7, #7]
 800a458:	4613      	mov	r3, r2
 800a45a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	2b23      	cmp	r3, #35	; 0x23
 800a460:	d84a      	bhi.n	800a4f8 <CDC_Control_FS+0xac>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <CDC_Control_FS+0x1c>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4f9 	.word	0x0800a4f9
 800a46c:	0800a4f9 	.word	0x0800a4f9
 800a470:	0800a4f9 	.word	0x0800a4f9
 800a474:	0800a4f9 	.word	0x0800a4f9
 800a478:	0800a4f9 	.word	0x0800a4f9
 800a47c:	0800a4f9 	.word	0x0800a4f9
 800a480:	0800a4f9 	.word	0x0800a4f9
 800a484:	0800a4f9 	.word	0x0800a4f9
 800a488:	0800a4f9 	.word	0x0800a4f9
 800a48c:	0800a4f9 	.word	0x0800a4f9
 800a490:	0800a4f9 	.word	0x0800a4f9
 800a494:	0800a4f9 	.word	0x0800a4f9
 800a498:	0800a4f9 	.word	0x0800a4f9
 800a49c:	0800a4f9 	.word	0x0800a4f9
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a4f9 	.word	0x0800a4f9
 800a4ac:	0800a4f9 	.word	0x0800a4f9
 800a4b0:	0800a4f9 	.word	0x0800a4f9
 800a4b4:	0800a4f9 	.word	0x0800a4f9
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a4f9 	.word	0x0800a4f9
 800a4c0:	0800a4f9 	.word	0x0800a4f9
 800a4c4:	0800a4f9 	.word	0x0800a4f9
 800a4c8:	0800a4f9 	.word	0x0800a4f9
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	0800a4f9 	.word	0x0800a4f9
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a4f9 	.word	0x0800a4f9
 800a4e4:	0800a4f9 	.word	0x0800a4f9
 800a4e8:	0800a4f9 	.word	0x0800a4f9
 800a4ec:	0800a4f9 	.word	0x0800a4f9
 800a4f0:	0800a4f9 	.word	0x0800a4f9
 800a4f4:	0800a4f9 	.word	0x0800a4f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4f8:	bf00      	nop
  }

  return (USBD_OK);
 800a4fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7f5 fe99 	bl	800024c <CDC_On_Receive>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	4805      	ldr	r0, [pc, #20]	; (800a534 <CDC_Receive_FS+0x2c>)
 800a51e:	f7fe fdb6 	bl	800908e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a522:	4804      	ldr	r0, [pc, #16]	; (800a534 <CDC_Receive_FS+0x2c>)
 800a524:	f7fe fdfc 	bl	8009120 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	2000074c 	.word	0x2000074c

0800a538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a548:	4b0d      	ldr	r3, [pc, #52]	; (800a580 <CDC_Transmit_FS+0x48>)
 800a54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a54e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e00b      	b.n	800a576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a55e:	887b      	ldrh	r3, [r7, #2]
 800a560:	461a      	mov	r2, r3
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	4806      	ldr	r0, [pc, #24]	; (800a580 <CDC_Transmit_FS+0x48>)
 800a566:	f7fe fd74 	bl	8009052 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a56a:	4805      	ldr	r0, [pc, #20]	; (800a580 <CDC_Transmit_FS+0x48>)
 800a56c:	f7fe fda8 	bl	80090c0 <USBD_CDC_TransmitPacket>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	2000074c 	.word	0x2000074c

0800a584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2212      	movs	r2, #18
 800a5b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a5ba:	4b03      	ldr	r3, [pc, #12]	; (800a5c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	200001a0 	.word	0x200001a0

0800a5cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	6039      	str	r1, [r7, #0]
 800a5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2204      	movs	r2, #4
 800a5dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5de:	4b03      	ldr	r3, [pc, #12]	; (800a5ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200001b4 	.word	0x200001b4

0800a5f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	6039      	str	r1, [r7, #0]
 800a5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d105      	bne.n	800a60e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	4907      	ldr	r1, [pc, #28]	; (800a624 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a606:	4808      	ldr	r0, [pc, #32]	; (800a628 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a608:	f7ff fdf3 	bl	800a1f2 <USBD_GetString>
 800a60c:	e004      	b.n	800a618 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	4904      	ldr	r1, [pc, #16]	; (800a624 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a612:	4805      	ldr	r0, [pc, #20]	; (800a628 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a614:	f7ff fded 	bl	800a1f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200011ec 	.word	0x200011ec
 800a628:	0800ae34 	.word	0x0800ae34

0800a62c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	4904      	ldr	r1, [pc, #16]	; (800a64c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a63c:	4804      	ldr	r0, [pc, #16]	; (800a650 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a63e:	f7ff fdd8 	bl	800a1f2 <USBD_GetString>
  return USBD_StrDesc;
 800a642:	4b02      	ldr	r3, [pc, #8]	; (800a64c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	200011ec 	.word	0x200011ec
 800a650:	0800ae4c 	.word	0x0800ae4c

0800a654 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	221a      	movs	r2, #26
 800a664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a666:	f000 f843 	bl	800a6f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a66a:	4b02      	ldr	r3, [pc, #8]	; (800a674 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	200001b8 	.word	0x200001b8

0800a678 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4907      	ldr	r1, [pc, #28]	; (800a6ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a68e:	4808      	ldr	r0, [pc, #32]	; (800a6b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a690:	f7ff fdaf 	bl	800a1f2 <USBD_GetString>
 800a694:	e004      	b.n	800a6a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	4904      	ldr	r1, [pc, #16]	; (800a6ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a69a:	4805      	ldr	r0, [pc, #20]	; (800a6b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a69c:	f7ff fda9 	bl	800a1f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a0:	4b02      	ldr	r3, [pc, #8]	; (800a6ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200011ec 	.word	0x200011ec
 800a6b0:	0800ae60 	.word	0x0800ae60

0800a6b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	6039      	str	r1, [r7, #0]
 800a6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d105      	bne.n	800a6d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	4907      	ldr	r1, [pc, #28]	; (800a6e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a6ca:	4808      	ldr	r0, [pc, #32]	; (800a6ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a6cc:	f7ff fd91 	bl	800a1f2 <USBD_GetString>
 800a6d0:	e004      	b.n	800a6dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a6d6:	4805      	ldr	r0, [pc, #20]	; (800a6ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a6d8:	f7ff fd8b 	bl	800a1f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6dc:	4b02      	ldr	r3, [pc, #8]	; (800a6e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200011ec 	.word	0x200011ec
 800a6ec:	0800ae6c 	.word	0x0800ae6c

0800a6f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <Get_SerialNum+0x44>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6fc:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <Get_SerialNum+0x48>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a702:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <Get_SerialNum+0x4c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a716:	2208      	movs	r2, #8
 800a718:	4909      	ldr	r1, [pc, #36]	; (800a740 <Get_SerialNum+0x50>)
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 f814 	bl	800a748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a720:	2204      	movs	r2, #4
 800a722:	4908      	ldr	r1, [pc, #32]	; (800a744 <Get_SerialNum+0x54>)
 800a724:	68b8      	ldr	r0, [r7, #8]
 800a726:	f000 f80f 	bl	800a748 <IntToUnicode>
  }
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	1fff7590 	.word	0x1fff7590
 800a738:	1fff7594 	.word	0x1fff7594
 800a73c:	1fff7598 	.word	0x1fff7598
 800a740:	200001ba 	.word	0x200001ba
 800a744:	200001ca 	.word	0x200001ca

0800a748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]
 800a75e:	e027      	b.n	800a7b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	0f1b      	lsrs	r3, r3, #28
 800a764:	2b09      	cmp	r3, #9
 800a766:	d80b      	bhi.n	800a780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	0f1b      	lsrs	r3, r3, #28
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	4619      	mov	r1, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	440b      	add	r3, r1
 800a778:	3230      	adds	r2, #48	; 0x30
 800a77a:	b2d2      	uxtb	r2, r2
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e00a      	b.n	800a796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	0f1b      	lsrs	r3, r3, #28
 800a784:	b2da      	uxtb	r2, r3
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	4619      	mov	r1, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	440b      	add	r3, r1
 800a790:	3237      	adds	r2, #55	; 0x37
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	75fb      	strb	r3, [r7, #23]
 800a7b0:	7dfa      	ldrb	r2, [r7, #23]
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d3d3      	bcc.n	800a760 <IntToUnicode+0x18>
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a0d      	ldr	r2, [pc, #52]	; (800a80c <HAL_PCD_MspInit+0x44>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d113      	bne.n	800a802 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7da:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <HAL_PCD_MspInit+0x48>)
 800a7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7de:	4a0c      	ldr	r2, [pc, #48]	; (800a810 <HAL_PCD_MspInit+0x48>)
 800a7e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <HAL_PCD_MspInit+0x48>)
 800a7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	2014      	movs	r0, #20
 800a7f8:	f7f6 ff49 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a7fc:	2014      	movs	r0, #20
 800a7fe:	f7f6 ff60 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a802:	bf00      	nop
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40005c00 	.word	0x40005c00
 800a810:	40021000 	.word	0x40021000

0800a814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7fe fd44 	bl	80092b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	440b      	add	r3, r1
 800a858:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	4619      	mov	r1, r3
 800a862:	f7fe fd7e 	bl	8009362 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	460b      	mov	r3, r1
 800a878:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a880:	78fa      	ldrb	r2, [r7, #3]
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	440b      	add	r3, r1
 800a88e:	333c      	adds	r3, #60	; 0x3c
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	4619      	mov	r1, r3
 800a896:	f7fe fdc7 	bl	8009428 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fedb 	bl	800966c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d001      	beq.n	800a8d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a8d2:	f7f6 faeb 	bl	8000eac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a8dc:	7bfa      	ldrb	r2, [r7, #15]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe fe85 	bl	80095f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fe31 	bl	8009554 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fe80 	bl	8009610 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <HAL_PCD_SuspendCallback+0x30>)
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	4a03      	ldr	r2, [pc, #12]	; (800a92c <HAL_PCD_SuspendCallback+0x30>)
 800a91e:	f043 0306 	orr.w	r3, r3, #6
 800a922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed00 	.word	0xe000ed00

0800a930 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d007      	beq.n	800a950 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <HAL_PCD_ResumeCallback+0x34>)
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	4a07      	ldr	r2, [pc, #28]	; (800a964 <HAL_PCD_ResumeCallback+0x34>)
 800a946:	f023 0306 	bic.w	r3, r3, #6
 800a94a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a94c:	f000 f9fa 	bl	800ad44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a956:	4618      	mov	r0, r3
 800a958:	f7fe fe70 	bl	800963c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	e000ed00 	.word	0xe000ed00

0800a968 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a970:	4a2b      	ldr	r2, [pc, #172]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a29      	ldr	r2, [pc, #164]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a97c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a980:	4b27      	ldr	r3, [pc, #156]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a982:	4a28      	ldr	r2, [pc, #160]	; (800aa24 <USBD_LL_Init+0xbc>)
 800a984:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a986:	4b26      	ldr	r3, [pc, #152]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a988:	2208      	movs	r2, #8
 800a98a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a98c:	4b24      	ldr	r3, [pc, #144]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a98e:	2202      	movs	r2, #2
 800a990:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a992:	4b23      	ldr	r3, [pc, #140]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a994:	2202      	movs	r2, #2
 800a996:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a998:	4b21      	ldr	r3, [pc, #132]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a99e:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a9a4:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9aa:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9b0:	481b      	ldr	r0, [pc, #108]	; (800aa20 <USBD_LL_Init+0xb8>)
 800a9b2:	f7f7 fb15 	bl	8001fe0 <HAL_PCD_Init>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a9bc:	f7f6 fa76 	bl	8000eac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9c6:	2318      	movs	r3, #24
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	f7f8 ff2f 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9d6:	2358      	movs	r3, #88	; 0x58
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2180      	movs	r1, #128	; 0x80
 800a9dc:	f7f8 ff27 	bl	800382e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9e6:	23c0      	movs	r3, #192	; 0xc0
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2181      	movs	r1, #129	; 0x81
 800a9ec:	f7f8 ff1f 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	f7f8 ff16 	bl	800382e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2182      	movs	r1, #130	; 0x82
 800aa10:	f7f8 ff0d 	bl	800382e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200013ec 	.word	0x200013ec
 800aa24:	40005c00 	.word	0x40005c00

0800aa28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7f7 fbb3 	bl	80021aa <HAL_PCD_Start>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f980 	bl	800ad50 <USBD_Get_USB_Status>
 800aa50:	4603      	mov	r3, r0
 800aa52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	4608      	mov	r0, r1
 800aa68:	4611      	mov	r1, r2
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	70fb      	strb	r3, [r7, #3]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70bb      	strb	r3, [r7, #2]
 800aa74:	4613      	mov	r3, r2
 800aa76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa86:	78bb      	ldrb	r3, [r7, #2]
 800aa88:	883a      	ldrh	r2, [r7, #0]
 800aa8a:	78f9      	ldrb	r1, [r7, #3]
 800aa8c:	f7f7 fd22 	bl	80024d4 <HAL_PCD_EP_Open>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 f95a 	bl	800ad50 <USBD_Get_USB_Status>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	4611      	mov	r1, r2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f7 fd69 	bl	80025a0 <HAL_PCD_EP_Close>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 f93b 	bl	800ad50 <USBD_Get_USB_Status>
 800aada:	4603      	mov	r3, r0
 800aadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aade:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab02:	78fa      	ldrb	r2, [r7, #3]
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f7 fe2a 	bl	8002760 <HAL_PCD_EP_SetStall>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f91c 	bl	800ad50 <USBD_Get_USB_Status>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab40:	78fa      	ldrb	r2, [r7, #3]
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7f7 fe5d 	bl	8002804 <HAL_PCD_EP_ClrStall>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f8fd 	bl	800ad50 <USBD_Get_USB_Status>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	da0c      	bge.n	800ab9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	440b      	add	r3, r1
 800ab94:	3302      	adds	r3, #2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	e00b      	b.n	800abb2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aba0:	68f9      	ldr	r1, [r7, #12]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	440b      	add	r3, r1
 800abac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800abb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abd8:	78fa      	ldrb	r2, [r7, #3]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f7 fc54 	bl	800248a <HAL_PCD_SetAddress>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 f8b1 	bl	800ad50 <USBD_Get_USB_Status>
 800abee:	4603      	mov	r3, r0
 800abf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac1a:	7af9      	ldrb	r1, [r7, #11]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	f7f7 fd5b 	bl	80026da <HAL_PCD_EP_Transmit>
 800ac24:	4603      	mov	r3, r0
 800ac26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f890 	bl	800ad50 <USBD_Get_USB_Status>
 800ac30:	4603      	mov	r3, r0
 800ac32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac5c:	7af9      	ldrb	r1, [r7, #11]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	f7f7 fce5 	bl	8002630 <HAL_PCD_EP_Receive>
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f86f 	bl	800ad50 <USBD_Get_USB_Status>
 800ac72:	4603      	mov	r3, r0
 800ac74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac76:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f7 fd07 	bl	80026aa <HAL_PCD_EP_GetRxCount>
 800ac9c:	4603      	mov	r3, r0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <HAL_PCDEx_LPM_Callback+0x18>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d013      	beq.n	800ace6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800acbe:	e023      	b.n	800ad08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800acc8:	f000 f83c 	bl	800ad44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800accc:	4b10      	ldr	r3, [pc, #64]	; (800ad10 <HAL_PCDEx_LPM_Callback+0x68>)
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	4a0f      	ldr	r2, [pc, #60]	; (800ad10 <HAL_PCDEx_LPM_Callback+0x68>)
 800acd2:	f023 0306 	bic.w	r3, r3, #6
 800acd6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fcac 	bl	800963c <USBD_LL_Resume>
    break;
 800ace4:	e010      	b.n	800ad08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe fc8f 	bl	8009610 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acfa:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <HAL_PCDEx_LPM_Callback+0x68>)
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	4a04      	ldr	r2, [pc, #16]	; (800ad10 <HAL_PCDEx_LPM_Callback+0x68>)
 800ad00:	f043 0306 	orr.w	r3, r3, #6
 800ad04:	6113      	str	r3, [r2, #16]
    break;
 800ad06:	bf00      	nop
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	e000ed00 	.word	0xe000ed00

0800ad14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad1c:	4b03      	ldr	r3, [pc, #12]	; (800ad2c <USBD_static_malloc+0x18>)
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	20000204 	.word	0x20000204

0800ad30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]

}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ad48:	f7f5 fce6 	bl	8000718 <SystemClock_Config>
}
 800ad4c:	bf00      	nop
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d817      	bhi.n	800ad94 <USBD_Get_USB_Status+0x44>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <USBD_Get_USB_Status+0x1c>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800ad83 	.word	0x0800ad83
 800ad74:	0800ad89 	.word	0x0800ad89
 800ad78:	0800ad8f 	.word	0x0800ad8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad80:	e00b      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad82:	2303      	movs	r3, #3
 800ad84:	73fb      	strb	r3, [r7, #15]
    break;
 800ad86:	e008      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad8c:	e005      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	73fb      	strb	r3, [r7, #15]
    break;
 800ad92:	e002      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad94:	2303      	movs	r3, #3
 800ad96:	73fb      	strb	r3, [r7, #15]
    break;
 800ad98:	bf00      	nop
  }
  return usb_status;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <__libc_init_array>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4d0d      	ldr	r5, [pc, #52]	; (800ade0 <__libc_init_array+0x38>)
 800adac:	4c0d      	ldr	r4, [pc, #52]	; (800ade4 <__libc_init_array+0x3c>)
 800adae:	1b64      	subs	r4, r4, r5
 800adb0:	10a4      	asrs	r4, r4, #2
 800adb2:	2600      	movs	r6, #0
 800adb4:	42a6      	cmp	r6, r4
 800adb6:	d109      	bne.n	800adcc <__libc_init_array+0x24>
 800adb8:	4d0b      	ldr	r5, [pc, #44]	; (800ade8 <__libc_init_array+0x40>)
 800adba:	4c0c      	ldr	r4, [pc, #48]	; (800adec <__libc_init_array+0x44>)
 800adbc:	f000 f82e 	bl	800ae1c <_init>
 800adc0:	1b64      	subs	r4, r4, r5
 800adc2:	10a4      	asrs	r4, r4, #2
 800adc4:	2600      	movs	r6, #0
 800adc6:	42a6      	cmp	r6, r4
 800adc8:	d105      	bne.n	800add6 <__libc_init_array+0x2e>
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800add0:	4798      	blx	r3
 800add2:	3601      	adds	r6, #1
 800add4:	e7ee      	b.n	800adb4 <__libc_init_array+0xc>
 800add6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adda:	4798      	blx	r3
 800addc:	3601      	adds	r6, #1
 800adde:	e7f2      	b.n	800adc6 <__libc_init_array+0x1e>
 800ade0:	0800ae8c 	.word	0x0800ae8c
 800ade4:	0800ae8c 	.word	0x0800ae8c
 800ade8:	0800ae8c 	.word	0x0800ae8c
 800adec:	0800ae90 	.word	0x0800ae90

0800adf0 <memcpy>:
 800adf0:	440a      	add	r2, r1
 800adf2:	4291      	cmp	r1, r2
 800adf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf8:	d100      	bne.n	800adfc <memcpy+0xc>
 800adfa:	4770      	bx	lr
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae06:	4291      	cmp	r1, r2
 800ae08:	d1f9      	bne.n	800adfe <memcpy+0xe>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <memset>:
 800ae0c:	4402      	add	r2, r0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d100      	bne.n	800ae16 <memset+0xa>
 800ae14:	4770      	bx	lr
 800ae16:	f803 1b01 	strb.w	r1, [r3], #1
 800ae1a:	e7f9      	b.n	800ae10 <memset+0x4>

0800ae1c <_init>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr

0800ae28 <_fini>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	bf00      	nop
 800ae2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae2e:	bc08      	pop	{r3}
 800ae30:	469e      	mov	lr, r3
 800ae32:	4770      	bx	lr
