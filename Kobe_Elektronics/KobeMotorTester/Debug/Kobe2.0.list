
Kobe2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d4c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f7c  08009f7c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08009f7c  08009f7c  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f7c  08009f7c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08009f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  200001a8  0800a12c  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015fc  0800a12c  000215fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d75b  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b15  00000000  00000000  0003d933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00041448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  00042818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d64  00000000  00000000  00043a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001728b  00000000  00000000  000647c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5c9f  00000000  00000000  0007ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001416ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  00141744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a8 	.word	0x200001a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009f0c 	.word	0x08009f0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ac 	.word	0x200001ac
 8000214:	08009f0c 	.word	0x08009f0c

08000218 <CDC_On_Receive>:
volatile uint8_t isCommandReceived = 0; // (5)
uint16_t timer = 0;



void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fe56 	bl	8009ee0 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001c4 	.word	0x200001c4
 8000254:	200001ce 	.word	0x200001ce

08000258 <HAL_TIM_PeriodElapsedCallback>:
	int16_t newspeed = control->p_gain*error + control->i_gain*integraal;
	return newspeed;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
		motor2Control.speed = 0;
		motor3Control.speed = 0;
		TIM8->CCR1 = 0;
	}*/

}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 febc 	bl	8000fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f8b5 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 fc1b 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 800027e:	f000 fbd1 	bl	8000a24 <MX_DMA_Init>
  MX_TIM2_Init();
 8000282:	f000 f971 	bl	8000568 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000286:	f000 f9c3 	bl	8000610 <MX_TIM3_Init>
  MX_TIM1_Init();
 800028a:	f000 f913 	bl	80004b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800028e:	f000 fa15 	bl	80006bc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000292:	f000 fab9 	bl	8000808 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000296:	f000 fa81 	bl	800079c <MX_TIM6_Init>
  MX_USB_Device_Init();
 800029a:	f009 f903 	bl	80094a4 <MX_USB_Device_Init>
  MX_TIM17_Init();
 800029e:	f000 fb47 	bl	8000930 <MX_TIM17_Init>
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 1);
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 0);
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 1);


  Feedback feedback = { // (1)
 80002a2:	2300      	movs	r3, #0
 80002a4:	803b      	strh	r3, [r7, #0]
 80002a6:	2300      	movs	r3, #0
 80002a8:	807b      	strh	r3, [r7, #2]
 80002aa:	2300      	movs	r3, #0
 80002ac:	80bb      	strh	r3, [r7, #4]
 80002ae:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80002b2:	80fb      	strh	r3, [r7, #6]
      .speed2 = 0,
      .speed3 = 0,
      .delimiter = 0xAAAA
  };

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b4:	2104      	movs	r1, #4
 80002b6:	483b      	ldr	r0, [pc, #236]	; (80003a4 <main+0x138>)
 80002b8:	f004 f9e6 	bl	8004688 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002bc:	2104      	movs	r1, #4
 80002be:	483a      	ldr	r0, [pc, #232]	; (80003a8 <main+0x13c>)
 80002c0:	f004 f9e2 	bl	8004688 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002c4:	2104      	movs	r1, #4
 80002c6:	4839      	ldr	r0, [pc, #228]	; (80003ac <main+0x140>)
 80002c8:	f004 f9de 	bl	8004688 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80002cc:	2100      	movs	r1, #0
 80002ce:	4838      	ldr	r0, [pc, #224]	; (80003b0 <main+0x144>)
 80002d0:	f004 f834 	bl	800433c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80002d4:	2104      	movs	r1, #4
 80002d6:	4836      	ldr	r0, [pc, #216]	; (80003b0 <main+0x144>)
 80002d8:	f004 f830 	bl	800433c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80002dc:	2108      	movs	r1, #8
 80002de:	4834      	ldr	r0, [pc, #208]	; (80003b0 <main+0x144>)
 80002e0:	f004 f82c 	bl	800433c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002e4:	2100      	movs	r1, #0
 80002e6:	4833      	ldr	r0, [pc, #204]	; (80003b4 <main+0x148>)
 80002e8:	f004 f828 	bl	800433c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80002ec:	2100      	movs	r1, #0
 80002ee:	4832      	ldr	r0, [pc, #200]	; (80003b8 <main+0x14c>)
 80002f0:	f004 f824 	bl	800433c <HAL_TIM_PWM_Start>
  TIM17->CCR1 = 65535;
 80002f4:	4b31      	ldr	r3, [pc, #196]	; (80003bc <main+0x150>)
 80002f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(10);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f000 fee7 	bl	80010d0 <HAL_Delay>


  TIM17->CCR1 = 61750;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <main+0x150>)
 8000304:	f24f 1236 	movw	r2, #61750	; 0xf136
 8000308:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 fee0 	bl	80010d0 <HAL_Delay>



  HAL_TIM_Base_Start(&htim6);
 8000310:	482b      	ldr	r0, [pc, #172]	; (80003c0 <main+0x154>)
 8000312:	f003 ff59 	bl	80041c8 <HAL_TIM_Base_Start>
  TIM4->CCR1 = 10000;
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <main+0x158>)
 8000318:	f242 7210 	movw	r2, #10000	; 0x2710
 800031c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 15000;
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <main+0x158>)
 8000320:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000324:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 10000;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <main+0x158>)
 8000328:	f242 7210 	movw	r2, #10000	; 0x2710
 800032c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	4825      	ldr	r0, [pc, #148]	; (80003c8 <main+0x15c>)
 8000334:	f001 fa8a 	bl	800184c <HAL_GPIO_WritePin>
  TIM17->CCR1 = 65535;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <main+0x150>)
 800033a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (isCommandReceived) { // (2)
 8000340:	4b22      	ldr	r3, [pc, #136]	; (80003cc <main+0x160>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0fa      	beq.n	8000340 <main+0xd4>
	        isCommandReceived = 0;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <main+0x160>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3)
 8000350:	2104      	movs	r1, #4
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f001 fa91 	bl	800187c <HAL_GPIO_TogglePin>
	        motor1Control.speed = command.speed1;
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <main+0x164>)
 800035c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0x168>)
 8000362:	801a      	strh	r2, [r3, #0]
	        motor2Control.speed = command.speed2;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <main+0x164>)
 8000366:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <main+0x16c>)
 800036c:	801a      	strh	r2, [r3, #0]
	        motor3Control.speed = command.speed3;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <main+0x164>)
 8000370:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <main+0x170>)
 8000376:	801a      	strh	r2, [r3, #0]

  	        TIM8->CCR1 = command.throwerSpeed;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <main+0x164>)
 800037a:	88da      	ldrh	r2, [r3, #6]
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <main+0x174>)
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

	        feedback.speed1 = motor1Control.speed; // (4)
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0x168>)
 8000382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000386:	803b      	strh	r3, [r7, #0]
	        feedback.speed2 = motor2Control.speed;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <main+0x16c>)
 800038a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038e:	807b      	strh	r3, [r7, #2]
	        feedback.speed3 = motor3Control.speed;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <main+0x170>)
 8000392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000396:	80bb      	strh	r3, [r7, #4]

	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 8000398:	463b      	mov	r3, r7
 800039a:	2108      	movs	r1, #8
 800039c:	4618      	mov	r0, r3
 800039e:	f009 f943 	bl	8009628 <CDC_Transmit_FS>
	  if (isCommandReceived) { // (2)
 80003a2:	e7cd      	b.n	8000340 <main+0xd4>
 80003a4:	200005cc 	.word	0x200005cc
 80003a8:	20000618 	.word	0x20000618
 80003ac:	20000534 	.word	0x20000534
 80003b0:	2000049c 	.word	0x2000049c
 80003b4:	200003f0 	.word	0x200003f0
 80003b8:	200004e8 	.word	0x200004e8
 80003bc:	40014800 	.word	0x40014800
 80003c0:	20000580 	.word	0x20000580
 80003c4:	40000800 	.word	0x40000800
 80003c8:	48000400 	.word	0x48000400
 80003cc:	200001ce 	.word	0x200001ce
 80003d0:	200001c4 	.word	0x200001c4
 80003d4:	20000000 	.word	0x20000000
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	20000018 	.word	0x20000018
 80003e0:	40013400 	.word	0x40013400

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b0a4      	sub	sp, #144	; 0x90
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ee:	2238      	movs	r2, #56	; 0x38
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f009 fd82 	bl	8009efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2244      	movs	r2, #68	; 0x44
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f009 fd74 	bl	8009efc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000414:	2000      	movs	r0, #0
 8000416:	f002 fedf 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800041a:	2322      	movs	r3, #34	; 0x22
 800041c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000430:	2302      	movs	r3, #2
 8000432:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000434:	2301      	movs	r3, #1
 8000436:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000438:	2314      	movs	r3, #20
 800043a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800043e:	2302      	movs	r3, #2
 8000440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000444:	2304      	movs	r3, #4
 8000446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044a:	2302      	movs	r3, #2
 800044c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000454:	4618      	mov	r0, r3
 8000456:	f002 ff73 	bl	8003340 <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000460:	f000 fb7c 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2303      	movs	r3, #3
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000478:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800047c:	2104      	movs	r1, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f003 fa76 	bl	8003970 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800048a:	f000 fb67 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000494:	2300      	movs	r3, #0
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fc4c 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004a6:	f000 fb59 	bl	8000b5c <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3790      	adds	r7, #144	; 0x90
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2224      	movs	r2, #36	; 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f009 fd1a 	bl	8009efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_TIM1_Init+0xac>)
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <MX_TIM1_Init+0xb0>)
 80004d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_TIM1_Init+0xac>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <MX_TIM1_Init+0xac>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_TIM1_Init+0xac>)
 80004e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_TIM1_Init+0xac>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_TIM1_Init+0xac>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_TIM1_Init+0xac>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000516:	2301      	movs	r3, #1
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_TIM1_Init+0xac>)
 800052a:	f004 f807 	bl	800453c <HAL_TIM_Encoder_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000534:	f000 fb12 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_TIM1_Init+0xac>)
 800054a:	f004 ff8f 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000554:	f000 fb02 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3730      	adds	r7, #48	; 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200005cc 	.word	0x200005cc
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2224      	movs	r2, #36	; 0x24
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f009 fcc0 	bl	8009efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_TIM2_Init+0xa4>)
 8000588:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800058c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_TIM2_Init+0xa4>)
 8000590:	2200      	movs	r2, #0
 8000592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_TIM2_Init+0xa4>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_TIM2_Init+0xa4>)
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_TIM2_Init+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_TIM2_Init+0xa4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005c6:	2301      	movs	r3, #1
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_TIM2_Init+0xa4>)
 80005da:	f003 ffaf 	bl	800453c <HAL_TIM_Encoder_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80005e4:	f000 faba 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_TIM2_Init+0xa4>)
 80005f6:	f004 ff39 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000600:	f000 faac 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3730      	adds	r7, #48	; 0x30
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000618 	.word	0x20000618

08000610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2224      	movs	r2, #36	; 0x24
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f009 fc6c 	bl	8009efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_TIM3_Init+0xa4>)
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <MX_TIM3_Init+0xa8>)
 8000632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_TIM3_Init+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_TIM3_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_TIM3_Init+0xa4>)
 8000642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000646:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_TIM3_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_TIM3_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000654:	2301      	movs	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800066c:	2301      	movs	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_TIM3_Init+0xa4>)
 8000680:	f003 ff5c 	bl	800453c <HAL_TIM_Encoder_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800068a:	f000 fa67 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_TIM3_Init+0xa4>)
 800069c:	f004 fee6 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006a6:	f000 fa59 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	; 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000534 	.word	0x20000534
 80006b8:	40000400 	.word	0x40000400

080006bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_TIM4_Init+0xd8>)
 80006e2:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <MX_TIM4_Init+0xdc>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_TIM4_Init+0xd8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_TIM4_Init+0xd8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_TIM4_Init+0xd8>)
 80006f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_TIM4_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000706:	4823      	ldr	r0, [pc, #140]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000708:	f003 fdc0 	bl	800428c <HAL_TIM_PWM_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000712:	f000 fa23 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000726:	f004 fea1 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000730:	f000 fa14 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000734:	2360      	movs	r3, #96	; 0x60
 8000736:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_TIM4_Init+0xd8>)
 800074c:	f004 f9aa 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000756:	f000 fa01 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2204      	movs	r2, #4
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000762:	f004 f99f 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800076c:	f000 f9f6 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2208      	movs	r2, #8
 8000774:	4619      	mov	r1, r3
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000778:	f004 f994 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000782:	f000 f9eb 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_TIM4_Init+0xd8>)
 8000788:	f000 fb2a 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000049c 	.word	0x2000049c
 8000798:	40000800 	.word	0x40000800

0800079c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_TIM6_Init+0x64>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_TIM6_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_TIM6_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_TIM6_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_TIM6_Init+0x64>)
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_TIM6_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM6_Init+0x64>)
 80007ce:	f003 fca3 	bl	8004118 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007d8:	f000 f9c0 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM6_Init+0x64>)
 80007ea:	f004 fe3f 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f9b2 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000580 	.word	0x20000580
 8000804:	40001000 	.word	0x40001000

08000808 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b098      	sub	sp, #96	; 0x60
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2234      	movs	r2, #52	; 0x34
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f009 fb61 	bl	8009efc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <MX_TIM8_Init+0x120>)
 800083c:	4a3b      	ldr	r2, [pc, #236]	; (800092c <MX_TIM8_Init+0x124>)
 800083e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <MX_TIM8_Init+0x120>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <MX_TIM8_Init+0x120>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <MX_TIM8_Init+0x120>)
 800084e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000852:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_TIM8_Init+0x120>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_TIM8_Init+0x120>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_TIM8_Init+0x120>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000866:	4830      	ldr	r0, [pc, #192]	; (8000928 <MX_TIM8_Init+0x120>)
 8000868:	f003 fd10 	bl	800428c <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 f973 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000886:	4619      	mov	r1, r3
 8000888:	4827      	ldr	r0, [pc, #156]	; (8000928 <MX_TIM8_Init+0x120>)
 800088a:	f004 fdef 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 f962 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_TIM8_Init+0x120>)
 80008be:	f004 f8f1 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008c8:	f000 f948 	bl	8000b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM8_Init+0x120>)
 800090a:	f004 fe31 	bl	8005570 <HAL_TIMEx_ConfigBreakDeadTime>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000914:	f000 f922 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM8_Init+0x120>)
 800091a:	f000 fa61 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3760      	adds	r7, #96	; 0x60
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200003f0 	.word	0x200003f0
 800092c:	40013400 	.word	0x40013400

08000930 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2234      	movs	r2, #52	; 0x34
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f009 fad3 	bl	8009efc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000958:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <MX_TIM17_Init+0xf0>)
 800095a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_TIM17_Init+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_TIM17_Init+0xec>)
 800096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_TIM17_Init+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000982:	4826      	ldr	r0, [pc, #152]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000984:	f003 fbc8 	bl	8004118 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800098e:	f000 f8e5 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000992:	4822      	ldr	r0, [pc, #136]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000994:	f003 fc7a 	bl	800428c <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800099e:	f000 f8dd 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_TIM17_Init+0xec>)
 80009c8:	f004 f86c 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80009d2:	f000 f8c3 	bl	8000b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_TIM17_Init+0xec>)
 80009fe:	f004 fdb7 	bl	8005570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000a08:	f000 f8a8 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM17_Init+0xec>)
 8000a0e:	f000 f9e7 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	; 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200004e8 	.word	0x200004e8
 8000a20:	40014800 	.word	0x40014800

08000a24 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6493      	str	r3, [r2, #72]	; 0x48
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_DMA_Init+0x84>)
 8000a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_DMA_Init+0x88>)
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <MX_DMA_Init+0x8c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_DMA_Init+0x88>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_DMA_Init+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_DMA_Init+0x88>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_DMA_Init+0x88>)
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_DMA_Init+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_DMA_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_DMA_Init+0x88>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_DMA_Init+0x88>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_DMA_Init+0x88>)
 8000a92:	f000 fc4f 	bl	8001334 <HAL_DMA_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DMA_Init+0x7c>
  {
    Error_Handler( );
 8000a9c:	f000 f85e 	bl	8000b5c <Error_Handler>
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	2000043c 	.word	0x2000043c
 8000ab0:	40020008 	.word	0x40020008

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_GPIO_Init+0xa0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2104      	movs	r1, #4
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 fea3 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_D_Pin|M2_D_Pin|M3_D_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2138      	movs	r1, #56	; 0x38
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b0c:	f000 fe9e 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b10:	2304      	movs	r3, #4
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 fd0d 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_D_Pin M2_D_Pin M3_D_Pin */
  GPIO_InitStruct.Pin = M1_D_Pin|M2_D_Pin|M3_D_Pin;
 8000b2e:	2338      	movs	r3, #56	; 0x38
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b46:	f000 fcff 	bl	8001548 <HAL_GPIO_Init>

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b9e:	f002 fbbf 	bl	8003320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12a      	bne.n	8000c28 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c14:	2306      	movs	r3, #6
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fc91 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c26:	e05c      	b.n	8000ce2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c30:	d129      	bne.n	8000c86 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c62:	2303      	movs	r3, #3
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c72:	2301      	movs	r3, #1
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fc62 	bl	8001548 <HAL_GPIO_Init>
}
 8000c84:	e02d      	b.n	8000ce2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_TIM_Encoder_MspInit+0x144>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d128      	bne.n	8000ce2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cc0:	2350      	movs	r3, #80	; 0x50
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 fc33 	bl	8001548 <HAL_GPIO_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40012c00 	.word	0x40012c00
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_TIM_PWM_MspInit+0x68>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d114      	bne.n	8000d34 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201e      	movs	r0, #30
 8000d28:	f000 facf 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d2c:	201e      	movs	r0, #30
 8000d2e:	f000 fae6 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d32:	e010      	b.n	8000d56 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_TIM_PWM_MspInit+0x70>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10b      	bne.n	8000d56 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d48:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40000800 	.word	0x40000800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40013400 	.word	0x40013400

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_TIM_Base_MspInit+0x68>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d114      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f000 fa95 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 faac 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000da6:	e010      	b.n	8000dca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_TIM_Base_MspInit+0x70>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40001000 	.word	0x40001000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40014800 	.word	0x40014800

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a35      	ldr	r2, [pc, #212]	; (8000ed4 <HAL_TIM_MspPostInit+0xf4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11d      	bne.n	8000e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a34      	ldr	r2, [pc, #208]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e1a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4829      	ldr	r0, [pc, #164]	; (8000edc <HAL_TIM_MspPostInit+0xfc>)
 8000e38:	f000 fb86 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000e3c:	e045      	b.n	8000eca <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_TIM_MspPostInit+0x100>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d11e      	bne.n	8000e86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000e72:	2302      	movs	r3, #2
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f000 fb62 	bl	8001548 <HAL_GPIO_Init>
}
 8000e84:	e021      	b.n	8000eca <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM17)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_TIM_MspPostInit+0x104>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d11c      	bne.n	8000eca <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_TIM_MspPostInit+0xf8>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f000 fb3f 	bl	8001548 <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40000800 	.word	0x40000800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	40013400 	.word	0x40013400
 8000ee4:	40014800 	.word	0x40014800

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8ae 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USB_LP_IRQHandler+0x10>)
 8000f42:	f000 fdbc 	bl	8001abe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20001308 	.word	0x20001308

08000f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM4_IRQHandler+0x10>)
 8000f56:	f003 fc25 	bl	80047a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000049c 	.word	0x2000049c

08000f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM6_DAC_IRQHandler+0x10>)
 8000f6a:	f003 fc1b 	bl	80047a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000580 	.word	0x20000580

08000f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f7ff ffd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f008 ff65 	bl	8009e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff f94d 	bl	800026c <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   r0, =_estack
 8000fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000fe0:	08009f84 	.word	0x08009f84
  ldr r2, =_sbss
 8000fe4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000fe8:	200015fc 	.word	0x200015fc

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>

08000fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f95b 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f80e 	bl	8001020 <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e001      	b.n	8001014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001010:	f7ff fdaa 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001014:	79fb      	ldrb	r3, [r7, #7]

}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d022      	beq.n	800107a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_InitTick+0x6c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001040:	fbb1 f3f3 	udiv	r3, r1, r3
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f966 	bl	800131a <HAL_SYSTICK_Config>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10f      	bne.n	8001074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d809      	bhi.n	800106e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	2200      	movs	r2, #0
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	f04f 30ff 	mov.w	r0, #4294967295
 8001062:	f000 f932 	bl	80012ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_InitTick+0x70>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e007      	b.n	800107e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e004      	b.n	800107e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e001      	b.n	800107e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000002c 	.word	0x2000002c
 800108c:	20000024 	.word	0x20000024
 8001090:	20000028 	.word	0x20000028

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x1c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_IncTick+0x1c>)
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20000664 	.word	0x20000664
 80010b4:	2000002c 	.word	0x2000002c

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000664 	.word	0x20000664

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d004      	beq.n	80010f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_Delay+0x40>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f4:	bf00      	nop
 80010f6:	f7ff ffdf 	bl	80010b8 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8f7      	bhi.n	80010f6 <HAL_Delay+0x26>
  {
  }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000002c 	.word	0x2000002c

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff40 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff33 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa4 	bl	8001270 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e08d      	b.n	8001462 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_DMA_Init+0x138>)
 800134e:	429a      	cmp	r2, r3
 8001350:	d80f      	bhi.n	8001372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_DMA_Init+0x13c>)
 800135a:	4413      	add	r3, r2
 800135c:	4a45      	ldr	r2, [pc, #276]	; (8001474 <HAL_DMA_Init+0x140>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	009a      	lsls	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_DMA_Init+0x144>)
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
 8001370:	e00e      	b.n	8001390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_DMA_Init+0x148>)
 800137a:	4413      	add	r3, r2
 800137c:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_DMA_Init+0x140>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	009a      	lsls	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a3c      	ldr	r2, [pc, #240]	; (8001480 <HAL_DMA_Init+0x14c>)
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f84e 	bl	8001484 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013f0:	d102      	bne.n	80013f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800140c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <HAL_DMA_Init+0x104>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d80c      	bhi.n	8001438 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f86e 	bl	8001500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	e008      	b.n	800144a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020407 	.word	0x40020407
 8001470:	bffdfff8 	.word	0xbffdfff8
 8001474:	cccccccd 	.word	0xcccccccd
 8001478:	40020000 	.word	0x40020000
 800147c:	bffdfbf8 	.word	0xbffdfbf8
 8001480:	40020400 	.word	0x40020400

08001484 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001494:	429a      	cmp	r2, r3
 8001496:	d802      	bhi.n	800149e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e001      	b.n	80014a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3b08      	subs	r3, #8
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	009a      	lsls	r2, r3, #2
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80014ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40020407 	.word	0x40020407
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020820 	.word	0x40020820
 80014f8:	cccccccd 	.word	0xcccccccd
 80014fc:	40020880 	.word	0x40020880

08001500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001522:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3b01      	subs	r3, #1
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2201      	movs	r2, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	1000823f 	.word	0x1000823f
 8001544:	40020940 	.word	0x40020940

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001556:	e15a      	b.n	800180e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 814c 	beq.w	8001808 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d00b      	beq.n	8001590 <HAL_GPIO_Init+0x48>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001584:	2b11      	cmp	r3, #17
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b12      	cmp	r3, #18
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 0201 	and.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0xea>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b12      	cmp	r3, #18
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80a6 	beq.w	8001808 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016bc:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c0:	4a5a      	ldr	r2, [pc, #360]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6613      	str	r3, [r2, #96]	; 0x60
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d4:	4a56      	ldr	r2, [pc, #344]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016fe:	d01f      	beq.n	8001740 <HAL_GPIO_Init+0x1f8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d019      	beq.n	800173c <HAL_GPIO_Init+0x1f4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <HAL_GPIO_Init+0x1f0>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4a      	ldr	r2, [pc, #296]	; (800183c <HAL_GPIO_Init+0x2f4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1ec>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a49      	ldr	r2, [pc, #292]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1e8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a48      	ldr	r2, [pc, #288]	; (8001844 <HAL_GPIO_Init+0x2fc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1e4>
 8001728:	2305      	movs	r3, #5
 800172a:	e00a      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 800172c:	2306      	movs	r3, #6
 800172e:	e008      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001730:	2304      	movs	r3, #4
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001734:	2303      	movs	r3, #3
 8001736:	e004      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001738:	2302      	movs	r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001740:	2300      	movs	r3, #0
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	f002 0203 	and.w	r2, r2, #3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4093      	lsls	r3, r2
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001752:	4937      	ldr	r1, [pc, #220]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x300>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ae:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f47f ae9d 	bne.w	8001558 <HAL_GPIO_Init+0x10>
  }
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000
 8001834:	48000400 	.word	0x48000400
 8001838:	48000800 	.word	0x48000800
 800183c:	48000c00 	.word	0x48000c00
 8001840:	48001000 	.word	0x48001000
 8001844:	48001400 	.word	0x48001400
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001868:	e002      	b.n	8001870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4013      	ands	r3, r2
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43d9      	mvns	r1, r3
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	400b      	ands	r3, r1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	af06      	add	r7, sp, #24
 80018b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0d7      	b.n	8001a72 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f007 ffee 	bl	80098b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 ff3e 	bl	800576a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e04c      	b.n	800198e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3301      	adds	r3, #1
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	b298      	uxth	r0, r3
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3336      	adds	r3, #54	; 0x36
 8001932:	4602      	mov	r2, r0
 8001934:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3303      	adds	r3, #3
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3338      	adds	r3, #56	; 0x38
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	333c      	adds	r3, #60	; 0x3c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3340      	adds	r3, #64	; 0x40
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3ad      	bcc.n	80018f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e044      	b.n	8001a28 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3b5      	bcc.n	800199e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	687e      	ldr	r6, [r7, #4]
 8001a3a:	466d      	mov	r5, sp
 8001a3c:	f106 0410 	add.w	r4, r6, #16
 8001a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	602b      	str	r3, [r5, #0]
 8001a48:	1d33      	adds	r3, r6, #4
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f003 fea7 	bl	80057a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d102      	bne.n	8001a70 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 fb8a 	bl	8003184 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_PCD_Start+0x16>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e012      	b.n	8001ab6 <HAL_PCD_Start+0x3c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fe4d 	bl	800573c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 f801 	bl	8007aae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 f806 	bl	8007adc <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ada:	d102      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fb4d 	bl	800217c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 fff8 	bl	8007adc <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af6:	d112      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f007 ff4c 	bl	80099ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b16:	2100      	movs	r1, #0
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f91e 	bl	8001d5a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 ffda 	bl	8007adc <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b32:	d10b      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b46:	b292      	uxth	r2, r2
 8001b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 ffc3 	bl	8007adc <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b60:	d10b      	bne.n	8001b7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 ffac 	bl	8007adc <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8e:	d133      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0208 	bic.w	r2, r2, #8
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f008 f8df 	bl	8009d98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f007 ff20 	bl	8009a20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 ff6d 	bl	8007adc <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c0c:	d126      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0208 	orr.w	r2, r2, #8
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0204 	orr.w	r2, r2, #4
 8001c50:	b292      	uxth	r2, r2
 8001c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f007 fec8 	bl	80099ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f005 ff3b 	bl	8007adc <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d13f      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c82:	b292      	uxth	r2, r2
 8001c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12b      	bne.n	8001cea <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0204 	orr.w	r2, r2, #4
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0208 	orr.w	r2, r2, #8
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f008 f858 	bl	8009d98 <HAL_PCDEx_LPM_Callback>
 8001ce8:	e002      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f007 fe7e 	bl	80099ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fef1 	bl	8007adc <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d10e      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f007 fe37 	bl	8009992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f005 fed7 	bl	8007adc <USB_ReadInterrupts>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d38:	d10b      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_SetAddress+0x1a>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e013      	b.n	8001d9c <HAL_PCD_SetAddress+0x42>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fe7a 	bl	8007a86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	70fb      	strb	r3, [r7, #3]
 8001db6:	460b      	mov	r3, r1
 8001db8:	803b      	strh	r3, [r7, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0e      	bge.n	8001de8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	705a      	strb	r2, [r3, #1]
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 0207 	and.w	r2, r3, #7
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e12:	883a      	ldrh	r2, [r7, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	78ba      	ldrb	r2, [r7, #2]
 8001e1c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e30:	78bb      	ldrb	r3, [r7, #2]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d102      	bne.n	8001e3c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_PCD_EP_Open+0xa6>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e00e      	b.n	8001e68 <HAL_PCD_EP_Open+0xc4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fcc3 	bl	80057e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e66:	7afb      	ldrb	r3, [r7, #11]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da0e      	bge.n	8001ea2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	705a      	strb	r2, [r3, #1]
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 0207 	and.w	r2, r3, #7
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_EP_Close+0x6a>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Close+0x88>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 ffe9 	bl	8005ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	7afb      	ldrb	r3, [r7, #11]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 f99c 	bl	800629a <USB_EPStartXfer>
 8001f62:	e005      	b.n	8001f70 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6979      	ldr	r1, [r7, #20]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f995 	bl	800629a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 0207 	and.w	r2, r3, #7
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f9c:	681b      	ldr	r3, [r3, #0]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6979      	ldr	r1, [r7, #20]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 f941 	bl	800629a <USB_EPStartXfer>
 8002018:	e005      	b.n	8002026 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6979      	ldr	r1, [r7, #20]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 f93a 	bl	800629a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 0207 	and.w	r2, r3, #7
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e03e      	b.n	80020cc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0e      	bge.n	8002074 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00c      	b.n	800208e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_EP_SetStall+0x7e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e00e      	b.n	80020cc <HAL_PCD_EP_SetStall+0x9c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f005 fbe3 	bl	8007888 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d901      	bls.n	80020f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e040      	b.n	8002174 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0e      	bge.n	8002118 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	705a      	strb	r2, [r3, #1]
 8002116:	e00e      	b.n	8002136 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_PCD_EP_ClrStall+0x82>
 8002152:	2302      	movs	r3, #2
 8002154:	e00e      	b.n	8002174 <HAL_PCD_EP_ClrStall+0xa0>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f005 fbe0 	bl	800792a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002184:	e2d6      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800218e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800219c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 815b 	bne.w	800245c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d150      	bne.n	8002252 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c0:	81fb      	strh	r3, [r7, #14]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	441a      	add	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002210:	2100      	movs	r1, #0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f007 fba3 	bl	800995e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8287 	beq.w	8002734 <PCD_EP_ISR_Handler+0x5b8>
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8282 	bne.w	8002734 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800223c:	b2da      	uxtb	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b292      	uxth	r2, r2
 8002244:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002250:	e270      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002268:	2b00      	cmp	r3, #0
 800226a:	d032      	beq.n	80022d2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4413      	add	r3, r2
 8002286:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f005 fc6a 	bl	8007b80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022b8:	4013      	ands	r3, r2
 80022ba:	823b      	strh	r3, [r7, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	8a3a      	ldrh	r2, [r7, #16]
 80022c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c6:	b292      	uxth	r2, r2
 80022c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f007 fb1a 	bl	8009904 <HAL_PCD_SetupStageCallback>
 80022d0:	e230      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f280 822c 	bge.w	8002734 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022e8:	4013      	ands	r3, r2
 80022ea:	83bb      	strh	r3, [r7, #28]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	8bba      	ldrh	r2, [r7, #28]
 80022f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022f6:	b292      	uxth	r2, r2
 80022f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	4413      	add	r3, r2
 8002314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <PCD_EP_ISR_Handler+0x1e2>
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	6959      	ldr	r1, [r3, #20]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002342:	b29b      	uxth	r3, r3
 8002344:	f005 fc1c 	bl	8007b80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	441a      	add	r2, r3
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002356:	2100      	movs	r1, #0
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 fae5 	bl	8009928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 81e2 	bne.w	8002734 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4413      	add	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d112      	bne.n	80023be <PCD_EP_ISR_Handler+0x242>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	801a      	strh	r2, [r3, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	e02f      	b.n	800241e <PCD_EP_ISR_Handler+0x2a2>
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b3e      	cmp	r3, #62	; 0x3e
 80023c4:	d813      	bhi.n	80023ee <PCD_EP_ISR_Handler+0x272>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <PCD_EP_ISR_Handler+0x264>
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	3301      	adds	r3, #1
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	e017      	b.n	800241e <PCD_EP_ISR_Handler+0x2a2>
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <PCD_EP_ISR_Handler+0x28c>
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	3b01      	subs	r3, #1
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	b29b      	uxth	r3, r3
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	b29b      	uxth	r3, r3
 8002410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002418:	b29a      	uxth	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	827b      	strh	r3, [r7, #18]
 8002430:	8a7b      	ldrh	r3, [r7, #18]
 8002432:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002436:	827b      	strh	r3, [r7, #18]
 8002438:	8a7b      	ldrh	r3, [r7, #18]
 800243a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800243e:	827b      	strh	r3, [r7, #18]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	8a7b      	ldrh	r3, [r7, #18]
 8002446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	b29b      	uxth	r3, r3
 8002458:	8013      	strh	r3, [r2, #0]
 800245a:	e16b      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800246e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002472:	2b00      	cmp	r3, #0
 8002474:	f280 80e4 	bge.w	8002640 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248e:	4013      	ands	r3, r2
 8002490:	853b      	strh	r3, [r7, #40]	; 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a6:	b292      	uxth	r2, r2
 80024a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	7b1b      	ldrb	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d120      	bne.n	800250a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8083 	beq.w	80025fc <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	6959      	ldr	r1, [r3, #20]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	88da      	ldrh	r2, [r3, #6]
 8002502:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002504:	f005 fb3c 	bl	8007b80 <USB_ReadPMA>
 8002508:	e078      	b.n	80025fc <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	78db      	ldrb	r3, [r3, #3]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d108      	bne.n	8002524 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002512:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002514:	461a      	mov	r2, r3
 8002516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f919 	bl	8002750 <HAL_PCD_EP_DB_Receive>
 800251e:	4603      	mov	r3, r0
 8002520:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002522:	e06b      	b.n	80025fc <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	441a      	add	r2, r3
 800254e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002560:	b29b      	uxth	r3, r3
 8002562:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01f      	beq.n	80025be <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	4413      	add	r3, r2
 8002598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	6959      	ldr	r1, [r3, #20]
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	891a      	ldrh	r2, [r3, #8]
 80025b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b8:	f005 fae2 	bl	8007b80 <USB_ReadPMA>
 80025bc:	e01e      	b.n	80025fc <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	895a      	ldrh	r2, [r3, #10]
 80025f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025f8:	f005 fac2 	bl	8007b80 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002602:	441a      	add	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260e:	441a      	add	r2, r3
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <PCD_EP_ISR_Handler+0x4aa>
 800261c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	429a      	cmp	r2, r3
 8002624:	d206      	bcs.n	8002634 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f007 f97b 	bl	8009928 <HAL_PCD_DataOutStageCallback>
 8002632:	e005      	b.n	8002640 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fe2d 	bl	800629a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d074      	beq.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800264a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002678:	843b      	strh	r3, [r7, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	441a      	add	r2, r3
 8002688:	8c3b      	ldrh	r3, [r7, #32]
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d144      	bne.n	8002728 <PCD_EP_ISR_Handler+0x5ac>
 800269e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13f      	bne.n	8002728 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026cc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d906      	bls.n	80026e6 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	8bfb      	ldrh	r3, [r7, #30]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	e002      	b.n	80026ec <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f007 f92f 	bl	800995e <HAL_PCD_DataInStageCallback>
 8002700:	e018      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	8bfb      	ldrh	r3, [r7, #30]
 8002708:	441a      	add	r2, r3
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	8bfb      	ldrh	r3, [r7, #30]
 8002714:	441a      	add	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fdba 	bl	800629a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002726:	e005      	b.n	8002734 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002728:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800272a:	461a      	mov	r2, r3
 800272c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f917 	bl	8002962 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273c:	b29b      	uxth	r3, r3
 800273e:	b21b      	sxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	f6ff ad20 	blt.w	8002186 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3738      	adds	r7, #56	; 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07c      	beq.n	8002862 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4413      	add	r3, r2
 8002782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	8b7b      	ldrh	r3, [r7, #26]
 8002794:	429a      	cmp	r2, r3
 8002796:	d306      	bcc.n	80027a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	e002      	b.n	80027ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d123      	bne.n	80027fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	833b      	strh	r3, [r7, #24]
 80027d0:	8b3b      	ldrh	r3, [r7, #24]
 80027d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027d6:	833b      	strh	r3, [r7, #24]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	8b3b      	ldrh	r3, [r7, #24]
 80027e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01f      	beq.n	8002846 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	82fb      	strh	r3, [r7, #22]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	8afb      	ldrh	r3, [r7, #22]
 8002832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002842:	b29b      	uxth	r3, r3
 8002844:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002846:	8b7b      	ldrh	r3, [r7, #26]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8085 	beq.w	8002958 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6959      	ldr	r1, [r3, #20]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	891a      	ldrh	r2, [r3, #8]
 800285a:	8b7b      	ldrh	r3, [r7, #26]
 800285c:	f005 f990 	bl	8007b80 <USB_ReadPMA>
 8002860:	e07a      	b.n	8002958 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4413      	add	r3, r2
 800287c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002886:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	8b7b      	ldrh	r3, [r7, #26]
 800288e:	429a      	cmp	r2, r3
 8002890:	d306      	bcc.n	80028a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	8b7b      	ldrh	r3, [r7, #26]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e002      	b.n	80028a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d123      	bne.n	80028f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	83fb      	strh	r3, [r7, #30]
 80028ca:	8bfb      	ldrh	r3, [r7, #30]
 80028cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028d0:	83fb      	strh	r3, [r7, #30]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	8bfb      	ldrh	r3, [r7, #30]
 80028e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11f      	bne.n	8002940 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	83bb      	strh	r3, [r7, #28]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	8bbb      	ldrh	r3, [r7, #28]
 800292c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800293c:	b29b      	uxth	r3, r3
 800293e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6959      	ldr	r1, [r3, #20]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	895a      	ldrh	r2, [r3, #10]
 8002952:	8b7b      	ldrh	r3, [r7, #26]
 8002954:	f005 f914 	bl	8007b80 <USB_ReadPMA>
    }
  }

  return count;
 8002958:	8b7b      	ldrh	r3, [r7, #26]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b0a2      	sub	sp, #136	; 0x88
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 81c5 	beq.w	8002d06 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002984:	b29b      	uxth	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4413      	add	r3, r2
 8002996:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d907      	bls.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	619a      	str	r2, [r3, #24]
 80029be:	e002      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80b9 	bne.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d126      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0xc4>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	4413      	add	r3, r2
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	4413      	add	r3, r2
 80029fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e01a      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d116      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	4413      	add	r3, r2
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00da      	lsls	r2, r3, #3
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	4413      	add	r3, r2
 8002a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	785b      	ldrb	r3, [r3, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d126      	bne.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x156>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	00da      	lsls	r2, r3, #3
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	801a      	strh	r2, [r3, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	e017      	b.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d113      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	623b      	str	r3, [r7, #32]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	00da      	lsls	r2, r3, #3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f006 ff35 	bl	800995e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 82d2 	beq.w	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	827b      	strh	r3, [r7, #18]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	8a7b      	ldrh	r3, [r7, #18]
 8002b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8013      	strh	r3, [r2, #0]
 8002b40:	e2b0      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	f040 8284 	bne.w	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d309      	bcc.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd0:	1ad2      	subs	r2, r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	621a      	str	r2, [r3, #32]
 8002bd6:	e015      	b.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bee:	e009      	b.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d155      	bne.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x356>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	4413      	add	r3, r2
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	00da      	lsls	r2, r3, #3
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
 8002c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d112      	bne.n	8002c60 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	801a      	strh	r2, [r3, #0]
 8002c5e:	e047      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c62:	2b3e      	cmp	r3, #62	; 0x3e
 8002c64:	d811      	bhi.n	8002c8a <HAL_PCD_EP_DB_Transmit+0x328>
 8002c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_PCD_EP_DB_Transmit+0x31a>
 8002c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c78:	3301      	adds	r3, #1
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e032      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	e01b      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d117      	bne.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd4:	4413      	add	r3, r2
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	00da      	lsls	r2, r3, #3
 8002cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6959      	ldr	r1, [r3, #20]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	891a      	ldrh	r2, [r3, #8]
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f004 fefc 	bl	8007afc <USB_WritePMA>
 8002d04:	e1ce      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d307      	bcc.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d42:	1ad2      	subs	r2, r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	e002      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 80c4 	bne.w	8002ee2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d126      	bne.n	8002db0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	4413      	add	r3, r2
 8002d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	00da      	lsls	r2, r3, #3
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	4413      	add	r3, r2
 8002d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	e01a      	b.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x484>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d116      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x484>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dcc:	4413      	add	r3, r2
 8002dce:	677b      	str	r3, [r7, #116]	; 0x74
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd8:	4413      	add	r3, r2
 8002dda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dde:	673b      	str	r3, [r7, #112]	; 0x70
 8002de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de2:	2200      	movs	r2, #0
 8002de4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d12f      	bne.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00da      	lsls	r2, r3, #3
 8002e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	e017      	b.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x522>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d113      	bne.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x522>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e6a:	4413      	add	r3, r2
 8002e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e76:	4413      	add	r3, r2
 8002e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f006 fd67 	bl	800995e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8104 	bne.w	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]
 8002ee0:	e0e0      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d121      	bne.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	441a      	add	r2, r3
 8002f18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	f040 80b4 	bne.w	80030a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f44:	441a      	add	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f52:	441a      	add	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d309      	bcc.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	621a      	str	r2, [r3, #32]
 8002f76:	e015      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8002f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f8e:	e009      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d155      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00da      	lsls	r2, r3, #3
 8002fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d112      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8002fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	e044      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	2b3e      	cmp	r3, #62	; 0x3e
 800300a:	d811      	bhi.n	8003030 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800300c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	657b      	str	r3, [r7, #84]	; 0x54
 8003012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_PCD_EP_DB_Transmit+0x6c0>
 800301c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301e:	3301      	adds	r3, #1
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
 8003022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003024:	b29b      	uxth	r3, r3
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	b29a      	uxth	r2, r3
 800302a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	e02f      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	657b      	str	r3, [r7, #84]	; 0x54
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	3b01      	subs	r3, #1
 8003044:	657b      	str	r3, [r7, #84]	; 0x54
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003048:	b29b      	uxth	r3, r3
 800304a:	029b      	lsls	r3, r3, #10
 800304c:	b29b      	uxth	r3, r3
 800304e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003056:	b29a      	uxth	r2, r3
 8003058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	e018      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x72e>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d114      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003074:	4413      	add	r3, r2
 8003076:	667b      	str	r3, [r7, #100]	; 0x64
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	00da      	lsls	r2, r3, #3
 800307e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003080:	4413      	add	r3, r2
 8003082:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003086:	663b      	str	r3, [r7, #96]	; 0x60
 8003088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308a:	b29a      	uxth	r2, r3
 800308c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800308e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6959      	ldr	r1, [r3, #20]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	895a      	ldrh	r2, [r3, #10]
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f004 fd2c 	bl	8007afc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	823b      	strh	r3, [r7, #16]
 80030c0:	8a3b      	ldrh	r3, [r7, #16]
 80030c2:	f083 0310 	eor.w	r3, r3, #16
 80030c6:	823b      	strh	r3, [r7, #16]
 80030c8:	8a3b      	ldrh	r3, [r7, #16]
 80030ca:	f083 0320 	eor.w	r3, r3, #32
 80030ce:	823b      	strh	r3, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	8a3b      	ldrh	r3, [r7, #16]
 80030e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3788      	adds	r7, #136	; 0x88
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
 800310c:	4613      	mov	r3, r2
 800310e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e009      	b.n	8003148 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003134:	897a      	ldrh	r2, [r7, #10]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	b29a      	uxth	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	80da      	strh	r2, [r3, #6]
 800315c:	e00b      	b.n	8003176 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2201      	movs	r2, #1
 8003162:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	b29a      	uxth	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b29a      	uxth	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d141      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d131      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320c:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2232      	movs	r2, #50	; 0x32
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322a:	e002      	b.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3b01      	subs	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d102      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d158      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e057      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003268:	e04d      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d141      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d131      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2232      	movs	r2, #50	; 0x32
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b6:	e002      	b.n	80032be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d102      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f2      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d112      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e011      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032f4:	e007      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40007000 	.word	0x40007000
 8003318:	20000024 	.word	0x20000024
 800331c:	431bde83 	.word	0x431bde83

08003320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332e:	6093      	str	r3, [r2, #8]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40007000 	.word	0x40007000

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e308      	b.n	8003964 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d075      	beq.n	800344a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335e:	4ba3      	ldr	r3, [pc, #652]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003368:	4ba0      	ldr	r3, [pc, #640]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0x3e>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d002      	beq.n	8003384 <HAL_RCC_OscConfig+0x44>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b99      	ldr	r3, [pc, #612]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x108>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e2e3      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x74>
 80033a6:	4b91      	ldr	r3, [pc, #580]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a90      	ldr	r2, [pc, #576]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b8b      	ldr	r3, [pc, #556]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a8a      	ldr	r2, [pc, #552]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a87      	ldr	r2, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033d8:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a83      	ldr	r2, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd fe5e 	bl	80010b8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fe5a 	bl	80010b8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e2a8      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xc0>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd fe4a 	bl	80010b8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fe46 	bl	80010b8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e294      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0xe8>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003460:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d102      	bne.n	8003476 <HAL_RCC_OscConfig+0x136>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d002      	beq.n	800347c <HAL_RCC_OscConfig+0x13c>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11f      	bne.n	80034bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x154>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e267      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	4952      	ldr	r1, [pc, #328]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd fdb7 	bl	8001020 <HAL_InitTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d043      	beq.n	8003540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e253      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d023      	beq.n	800350c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a48      	ldr	r2, [pc, #288]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd fdf2 	bl	80010b8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fd fdee 	bl	80010b8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e23c      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	4939      	ldr	r1, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	e01a      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fdce 	bl	80010b8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd fdca 	bl	80010b8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e218      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1e0>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fda7 	bl	80010b8 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd fda3 	bl	80010b8 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1f1      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ef      	beq.n	800356e <HAL_RCC_OscConfig+0x22e>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fd8a 	bl	80010b8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fd86 	bl	80010b8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1d4      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ef      	bne.n	80035a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80ab 	beq.w	800372c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2b4>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e005      	b.n	80035f6 <HAL_RCC_OscConfig+0x2b6>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	20000028 	.word	0x20000028
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4baf      	ldr	r3, [pc, #700]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	4aae      	ldr	r2, [pc, #696]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
 8003606:	4bac      	ldr	r3, [pc, #688]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003616:	4ba9      	ldr	r3, [pc, #676]	; (80038bc <HAL_RCC_OscConfig+0x57c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003622:	4ba6      	ldr	r3, [pc, #664]	; (80038bc <HAL_RCC_OscConfig+0x57c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4aa5      	ldr	r2, [pc, #660]	; (80038bc <HAL_RCC_OscConfig+0x57c>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fd fd43 	bl	80010b8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fd fd3f 	bl	80010b8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e18d      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003648:	4b9c      	ldr	r3, [pc, #624]	; (80038bc <HAL_RCC_OscConfig+0x57c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_RCC_OscConfig+0x32e>
 800365c:	4b96      	ldr	r3, [pc, #600]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a95      	ldr	r2, [pc, #596]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366c:	e024      	b.n	80036b8 <HAL_RCC_OscConfig+0x378>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b05      	cmp	r3, #5
 8003674:	d110      	bne.n	8003698 <HAL_RCC_OscConfig+0x358>
 8003676:	4b90      	ldr	r3, [pc, #576]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003686:	4b8c      	ldr	r3, [pc, #560]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a8a      	ldr	r2, [pc, #552]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003696:	e00f      	b.n	80036b8 <HAL_RCC_OscConfig+0x378>
 8003698:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a86      	ldr	r2, [pc, #536]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a8:	4b83      	ldr	r3, [pc, #524]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a82      	ldr	r2, [pc, #520]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd fcfa 	bl	80010b8 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd fcf6 	bl	80010b8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e142      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ed      	beq.n	80036c8 <HAL_RCC_OscConfig+0x388>
 80036ec:	e015      	b.n	800371a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd fce3 	bl	80010b8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fcdf 	bl	80010b8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e12b      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ed      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4a64      	ldr	r2, [pc, #400]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003740:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003746:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fcb2 	bl	80010b8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003758:	f7fd fcae 	bl	80010b8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0fc      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376a:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800376c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <HAL_RCC_OscConfig+0x418>
 8003778:	e01b      	b.n	80037b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800377a:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003780:	4a4d      	ldr	r2, [pc, #308]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fd fc95 	bl	80010b8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003792:	f7fd fc91 	bl	80010b8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0df      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a4:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80037a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ef      	bne.n	8003792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80d3 	beq.w	8003962 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	f000 808d 	beq.w	80038e4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d15a      	bne.n	8003888 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80037d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fd fc6b 	bl	80010b8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fc67 	bl	80010b8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0b5      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_OscConfig+0x580>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6a11      	ldr	r1, [r2, #32]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003814:	3a01      	subs	r2, #1
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800381e:	0212      	lsls	r2, r2, #8
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003826:	0852      	lsrs	r2, r2, #1
 8003828:	3a01      	subs	r2, #1
 800382a:	0552      	lsls	r2, r2, #21
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003832:	0852      	lsrs	r2, r2, #1
 8003834:	3a01      	subs	r2, #1
 8003836:	0652      	lsls	r2, r2, #25
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800383e:	06d2      	lsls	r2, r2, #27
 8003840:	430a      	orrs	r2, r1
 8003842:	491d      	ldr	r1, [pc, #116]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fc2a 	bl	80010b8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fc26 	bl	80010b8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e074      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x528>
 8003886:	e06c      	b.n	8003962 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_RCC_OscConfig+0x578>)
 80038a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fc02 	bl	80010b8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b6:	e00e      	b.n	80038d6 <HAL_RCC_OscConfig+0x596>
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fbf8 	bl	80010b8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e046      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_OscConfig+0x62c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x584>
 80038e2:	e03e      	b.n	8003962 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e039      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCC_OscConfig+0x62c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	429a      	cmp	r2, r3
 8003902:	d12c      	bne.n	800395e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	3b01      	subs	r3, #1
 8003910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d123      	bne.n	800395e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d11b      	bne.n	800395e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d113      	bne.n	800395e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d109      	bne.n	800395e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e11e      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b91      	ldr	r3, [pc, #580]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d910      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	498c      	ldr	r1, [pc, #560]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b8a      	ldr	r3, [pc, #552]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e106      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d073      	beq.n	8003aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b81      	ldr	r3, [pc, #516]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0f4      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039dc:	f000 f966 	bl	8003cac <RCC_GetSysClockFreqFromPLLSource>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d93f      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ea:	4b7a      	ldr	r3, [pc, #488]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d033      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d12f      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	4a70      	ldr	r2, [pc, #448]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e024      	b.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0c6      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0be      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a48:	f000 f8ce 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d909      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5e:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4957      	ldr	r1, [pc, #348]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fb1c 	bl	80010b8 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fb18 	bl	80010b8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e095      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003adc:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4936      	ldr	r1, [pc, #216]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b06:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d21d      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 020f 	bic.w	r2, r3, #15
 8003b28:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fac2 	bl	80010b8 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd fabe 	bl	80010b8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e03b      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1ed      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4917      	ldr	r1, [pc, #92]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490f      	ldr	r1, [pc, #60]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9a:	f000 f825 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490c      	ldr	r1, [pc, #48]	; (8003bdc <HAL_RCC_ClockConfig+0x26c>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x270>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd fa2e 	bl	8001020 <HAL_InitTick>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	04c4b400 	.word	0x04c4b400
 8003bdc:	08009f6c 	.word	0x08009f6c
 8003be0:	20000024 	.word	0x20000024
 8003be4:	20000028 	.word	0x20000028

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e047      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e03e      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d136      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3301      	adds	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	0a12      	lsrs	r2, r2, #8
 8003c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
      break;
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c56:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	0a12      	lsrs	r2, r2, #8
 8003c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
      break;
 8003c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0e5b      	lsrs	r3, r3, #25
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e001      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d10c      	bne.n	8003cea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cda:	68d2      	ldr	r2, [r2, #12]
 8003cdc:	0a12      	lsrs	r2, r2, #8
 8003cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
    break;
 8003ce8:	e00c      	b.n	8003d04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	0a12      	lsrs	r2, r2, #8
 8003cf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
    break;
 8003d02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0e5b      	lsrs	r3, r3, #25
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d1e:	687b      	ldr	r3, [r7, #4]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	007a1200 	.word	0x007a1200
 8003d34:	00f42400 	.word	0x00f42400

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d44:	2300      	movs	r3, #0
 8003d46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8098 	beq.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	4a3f      	ldr	r2, [pc, #252]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6593      	str	r3, [r2, #88]	; 0x58
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a39      	ldr	r2, [pc, #228]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd f993 	bl	80010b8 <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d94:	e009      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd f98f 	bl	80010b8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d902      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	74fb      	strb	r3, [r7, #19]
        break;
 8003da8:	e005      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003daa:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ef      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d159      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d019      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd8:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd f94f 	bl	80010b8 <HAL_GetTick>
 8003e1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	e00b      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd f94b 	bl	80010b8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d902      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	74fb      	strb	r3, [r7, #19]
            break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ec      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	74bb      	strb	r3, [r7, #18]
 8003e66:	e005      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e74:	7c7b      	ldrb	r3, [r7, #17]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7a:	4ba6      	ldr	r3, [pc, #664]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	4aa5      	ldr	r2, [pc, #660]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e92:	4ba0      	ldr	r3, [pc, #640]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f023 0203 	bic.w	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	499c      	ldr	r1, [pc, #624]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eb4:	4b97      	ldr	r3, [pc, #604]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 020c 	bic.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4994      	ldr	r1, [pc, #592]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed6:	4b8f      	ldr	r3, [pc, #572]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	498b      	ldr	r1, [pc, #556]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef8:	4b86      	ldr	r3, [pc, #536]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4983      	ldr	r1, [pc, #524]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1a:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	497a      	ldr	r1, [pc, #488]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3c:	4b75      	ldr	r3, [pc, #468]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	4972      	ldr	r1, [pc, #456]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4969      	ldr	r1, [pc, #420]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f80:	4b64      	ldr	r3, [pc, #400]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4961      	ldr	r1, [pc, #388]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	4958      	ldr	r1, [pc, #352]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	4950      	ldr	r1, [pc, #320]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ffc:	4b45      	ldr	r3, [pc, #276]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4942      	ldr	r1, [pc, #264]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401c:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a3c      	ldr	r2, [pc, #240]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004034:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4934      	ldr	r1, [pc, #208]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004054:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d015      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800406c:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	4926      	ldr	r1, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4918      	ldr	r1, [pc, #96]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c2:	d105      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	490a      	ldr	r1, [pc, #40]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004106:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004108:	7cbb      	ldrb	r3, [r7, #18]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e049      	b.n	80041be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fe14 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fddc 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e042      	b.n	8004266 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_TIM_Base_Start+0xac>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_TIM_Base_Start+0x5c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d013      	beq.n	8004224 <HAL_TIM_Base_Start+0x5c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_TIM_Base_Start+0xb0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_TIM_Base_Start+0x5c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_TIM_Base_Start+0xb4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start+0x5c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_TIM_Base_Start+0xb8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_Base_Start+0x5c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_TIM_Base_Start+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d115      	bne.n	8004250 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_TIM_Base_Start+0xc0>)
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d015      	beq.n	8004262 <HAL_TIM_Base_Start+0x9a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d011      	beq.n	8004262 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e008      	b.n	8004262 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e000      	b.n	8004264 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40013400 	.word	0x40013400
 8004284:	40014000 	.word	0x40014000
 8004288:	00010007 	.word	0x00010007

0800428c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e049      	b.n	8004332 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fd20 	bl	8000cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 fd22 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_TIM_PWM_Start+0x24>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e03c      	b.n	80043da <HAL_TIM_PWM_Start+0x9e>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b04      	cmp	r3, #4
 8004364:	d109      	bne.n	800437a <HAL_TIM_PWM_Start+0x3e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e02f      	b.n	80043da <HAL_TIM_PWM_Start+0x9e>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d109      	bne.n	8004394 <HAL_TIM_PWM_Start+0x58>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e022      	b.n	80043da <HAL_TIM_PWM_Start+0x9e>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d109      	bne.n	80043ae <HAL_TIM_PWM_Start+0x72>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e015      	b.n	80043da <HAL_TIM_PWM_Start+0x9e>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x8c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e008      	b.n	80043da <HAL_TIM_PWM_Start+0x9e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e097      	b.n	8004512 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_PWM_Start+0xb6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f0:	e023      	b.n	800443a <HAL_TIM_PWM_Start+0xfe>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d104      	bne.n	8004402 <HAL_TIM_PWM_Start+0xc6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004400:	e01b      	b.n	800443a <HAL_TIM_PWM_Start+0xfe>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d104      	bne.n	8004412 <HAL_TIM_PWM_Start+0xd6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004410:	e013      	b.n	800443a <HAL_TIM_PWM_Start+0xfe>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d104      	bne.n	8004422 <HAL_TIM_PWM_Start+0xe6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004420:	e00b      	b.n	800443a <HAL_TIM_PWM_Start+0xfe>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b10      	cmp	r3, #16
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start+0xf6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004430:	e003      	b.n	800443a <HAL_TIM_PWM_Start+0xfe>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 ffec 	bl	8005420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_TIM_PWM_Start+0x1e0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_TIM_PWM_Start+0x13e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a32      	ldr	r2, [pc, #200]	; (8004520 <HAL_TIM_PWM_Start+0x1e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_TIM_PWM_Start+0x13e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_TIM_PWM_Start+0x1e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_TIM_PWM_Start+0x13e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <HAL_TIM_PWM_Start+0x1ec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_TIM_PWM_Start+0x13e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2d      	ldr	r2, [pc, #180]	; (800452c <HAL_TIM_PWM_Start+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_Start+0x142>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_TIM_PWM_Start+0x144>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <HAL_TIM_PWM_Start+0x1e0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x194>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x194>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a20      	ldr	r2, [pc, #128]	; (8004530 <HAL_TIM_PWM_Start+0x1f4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x194>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_TIM_PWM_Start+0x1f8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x194>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_TIM_PWM_Start+0x1e4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x194>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_TIM_PWM_Start+0x1e8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d115      	bne.n	80044fc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_TIM_PWM_Start+0x1fc>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d015      	beq.n	800450e <HAL_TIM_PWM_Start+0x1d2>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d011      	beq.n	800450e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e000      	b.n	8004510 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	00010007 	.word	0x00010007

0800453c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e097      	b.n	8004680 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc fb23 	bl	8000bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004580:	f023 0307 	bic.w	r3, r3, #7
 8004584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 fbbf 	bl	8004d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	4313      	orrs	r3, r2
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045dc:	f023 030c 	bic.w	r3, r3, #12
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4313      	orrs	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	011a      	lsls	r2, r3, #4
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	031b      	lsls	r3, r3, #12
 800460c:	4313      	orrs	r3, r2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4313      	orrs	r3, r2
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004698:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d110      	bne.n	80046da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d102      	bne.n	80046c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046be:	7b7b      	ldrb	r3, [r7, #13]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e069      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	e031      	b.n	800473e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d110      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e6:	7b3b      	ldrb	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e055      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004700:	e01d      	b.n	800473e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d108      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d105      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004714:	7b3b      	ldrb	r3, [r7, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e03e      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_TIM_Encoder_Start+0xc4>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d008      	beq.n	800475c <HAL_TIM_Encoder_Start+0xd4>
 800474a:	e00f      	b.n	800476c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fe63 	bl	8005420 <TIM_CCxChannelCmd>
      break;
 800475a:	e016      	b.n	800478a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	2104      	movs	r1, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fe5b 	bl	8005420 <TIM_CCxChannelCmd>
      break;
 800476a:	e00e      	b.n	800478a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe53 	bl	8005420 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	2104      	movs	r1, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fe4c 	bl	8005420 <TIM_CCxChannelCmd>
      break;
 8004788:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0202 	mvn.w	r2, #2
 80047d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa76 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa68 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa79 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b04      	cmp	r3, #4
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b04      	cmp	r3, #4
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0204 	mvn.w	r2, #4
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa4c 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa3e 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa4f 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d122      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d11b      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0208 	mvn.w	r2, #8
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa22 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa14 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa25 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d122      	bne.n	80048fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d11b      	bne.n	80048fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0210 	mvn.w	r2, #16
 80048cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2208      	movs	r2, #8
 80048d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9f8 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9ea 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f9fb 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0201 	mvn.w	r2, #1
 8004920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fb fc98 	bl	8000258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 feb8 	bl	80056c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d10e      	bne.n	8004982 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d107      	bne.n	8004982 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800497a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 feab 	bl	80056d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d10e      	bne.n	80049ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d107      	bne.n	80049ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9a9 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d10e      	bne.n	80049da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d107      	bne.n	80049da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0220 	mvn.w	r2, #32
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fe6b 	bl	80056b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e8:	d10f      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fe71 	bl	80056ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a18:	d10f      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fe63 	bl	8005700 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a48:	d10f      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fe55 	bl	8005714 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a78:	d10f      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fe47 	bl	8005728 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0fd      	b.n	8004cba <HAL_TIM_PWM_ConfigChannel+0x216>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b14      	cmp	r3, #20
 8004aca:	f200 80f0 	bhi.w	8004cae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004caf 	.word	0x08004caf
 8004adc:	08004caf 	.word	0x08004caf
 8004ae0:	08004caf 	.word	0x08004caf
 8004ae4:	08004b69 	.word	0x08004b69
 8004ae8:	08004caf 	.word	0x08004caf
 8004aec:	08004caf 	.word	0x08004caf
 8004af0:	08004caf 	.word	0x08004caf
 8004af4:	08004bab 	.word	0x08004bab
 8004af8:	08004caf 	.word	0x08004caf
 8004afc:	08004caf 	.word	0x08004caf
 8004b00:	08004caf 	.word	0x08004caf
 8004b04:	08004beb 	.word	0x08004beb
 8004b08:	08004caf 	.word	0x08004caf
 8004b0c:	08004caf 	.word	0x08004caf
 8004b10:	08004caf 	.word	0x08004caf
 8004b14:	08004c2d 	.word	0x08004c2d
 8004b18:	08004caf 	.word	0x08004caf
 8004b1c:	08004caf 	.word	0x08004caf
 8004b20:	08004caf 	.word	0x08004caf
 8004b24:	08004c6d 	.word	0x08004c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f980 	bl	8004e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	619a      	str	r2, [r3, #24]
      break;
 8004b66:	e0a3      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f9f0 	bl	8004f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	619a      	str	r2, [r3, #24]
      break;
 8004ba8:	e082      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fa59 	bl	8005068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0208 	orr.w	r2, r2, #8
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0204 	bic.w	r2, r2, #4
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	61da      	str	r2, [r3, #28]
      break;
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fac1 	bl	8005178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	021a      	lsls	r2, r3, #8
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	61da      	str	r2, [r3, #28]
      break;
 8004c2a:	e041      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb2a 	bl	800528c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c6a:	e021      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fb6e 	bl	8005354 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop

08004cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3c      	ldr	r2, [pc, #240]	; (8004e18 <TIM_Base_SetConfig+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <TIM_Base_SetConfig+0x108>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a38      	ldr	r2, [pc, #224]	; (8004e20 <TIM_Base_SetConfig+0x10c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <TIM_Base_SetConfig+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <TIM_Base_SetConfig+0x104>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01b      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d017      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <TIM_Base_SetConfig+0x108>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <TIM_Base_SetConfig+0x10c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00f      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <TIM_Base_SetConfig+0x110>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <TIM_Base_SetConfig+0x104>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0xe8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <TIM_Base_SetConfig+0x110>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0xe8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0xe8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0f      	ldr	r2, [pc, #60]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0xe8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	615a      	str	r2, [r3, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0302 	bic.w	r3, r3, #2
 8004e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2c      	ldr	r2, [pc, #176]	; (8004f40 <TIM_OC1_SetConfig+0x10c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_OC1_SetConfig+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <TIM_OC1_SetConfig+0x110>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_OC1_SetConfig+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <TIM_OC1_SetConfig+0x114>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC1_SetConfig+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <TIM_OC1_SetConfig+0x118>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC1_SetConfig+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <TIM_OC1_SetConfig+0x11c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d10c      	bne.n	8004ece <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0308 	bic.w	r3, r3, #8
 8004eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <TIM_OC1_SetConfig+0x10c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_OC1_SetConfig+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <TIM_OC1_SetConfig+0x110>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_OC1_SetConfig+0xc2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <TIM_OC1_SetConfig+0x114>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_OC1_SetConfig+0xc2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <TIM_OC1_SetConfig+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_OC1_SetConfig+0xc2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <TIM_OC1_SetConfig+0x11c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d111      	bne.n	8004f1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	621a      	str	r2, [r3, #32]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800

08004f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0210 	bic.w	r2, r3, #16
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0320 	bic.w	r3, r3, #32
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <TIM_OC2_SetConfig+0x100>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC2_SetConfig+0x6c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a27      	ldr	r2, [pc, #156]	; (8005058 <TIM_OC2_SetConfig+0x104>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10d      	bne.n	8004fdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <TIM_OC2_SetConfig+0x100>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_OC2_SetConfig+0xb0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <TIM_OC2_SetConfig+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_OC2_SetConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <TIM_OC2_SetConfig+0x108>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_OC2_SetConfig+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <TIM_OC2_SetConfig+0x10c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC2_SetConfig+0xb0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a19      	ldr	r2, [pc, #100]	; (8005064 <TIM_OC2_SetConfig+0x110>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d113      	bne.n	800502c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40013400 	.word	0x40013400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <TIM_OC3_SetConfig+0xfc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_OC3_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <TIM_OC3_SetConfig+0x100>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10d      	bne.n	80050ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <TIM_OC3_SetConfig+0xfc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_OC3_SetConfig+0xae>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <TIM_OC3_SetConfig+0x100>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_OC3_SetConfig+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <TIM_OC3_SetConfig+0x104>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_OC3_SetConfig+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <TIM_OC3_SetConfig+0x108>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_OC3_SetConfig+0xae>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <TIM_OC3_SetConfig+0x10c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d113      	bne.n	800513e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800511c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a28      	ldr	r2, [pc, #160]	; (8005278 <TIM_OC4_SetConfig+0x100>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC4_SetConfig+0x6c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a27      	ldr	r2, [pc, #156]	; (800527c <TIM_OC4_SetConfig+0x104>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10d      	bne.n	8005200 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <TIM_OC4_SetConfig+0x100>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00f      	beq.n	8005228 <TIM_OC4_SetConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <TIM_OC4_SetConfig+0x104>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00b      	beq.n	8005228 <TIM_OC4_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <TIM_OC4_SetConfig+0x108>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d007      	beq.n	8005228 <TIM_OC4_SetConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <TIM_OC4_SetConfig+0x10c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_OC4_SetConfig+0xb0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a19      	ldr	r2, [pc, #100]	; (8005288 <TIM_OC4_SetConfig+0x110>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d113      	bne.n	8005250 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005236:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800

0800528c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <TIM_OC5_SetConfig+0xb4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00f      	beq.n	8005306 <TIM_OC5_SetConfig+0x7a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a16      	ldr	r2, [pc, #88]	; (8005344 <TIM_OC5_SetConfig+0xb8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_OC5_SetConfig+0x7a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <TIM_OC5_SetConfig+0xbc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_OC5_SetConfig+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <TIM_OC5_SetConfig+0xc0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC5_SetConfig+0x7a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <TIM_OC5_SetConfig+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d109      	bne.n	800531a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	051b      	lsls	r3, r3, #20
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <TIM_OC6_SetConfig+0xb8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00f      	beq.n	80053d0 <TIM_OC6_SetConfig+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a17      	ldr	r2, [pc, #92]	; (8005410 <TIM_OC6_SetConfig+0xbc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_OC6_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a16      	ldr	r2, [pc, #88]	; (8005414 <TIM_OC6_SetConfig+0xc0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <TIM_OC6_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <TIM_OC6_SetConfig+0xc4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC6_SetConfig+0x7c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a14      	ldr	r2, [pc, #80]	; (800541c <TIM_OC6_SetConfig+0xc8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800

08005420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2201      	movs	r2, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005480:	2302      	movs	r3, #2
 8005482:	e065      	b.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d013      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10c      	bne.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40013400 	.word	0x40013400
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40014000 	.word	0x40014000

08005570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e087      	b.n	800569c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d106      	bne.n	8005628 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d126      	bne.n	800568a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	051b      	lsls	r3, r3, #20
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d106      	bne.n	800568a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400

080056b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800574c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005750:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005772:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005776:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	b29b      	uxth	r3, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	4013      	ands	r3, r2
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057a0:	b084      	sub	sp, #16
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	f107 0014 	add.w	r0, r7, #20
 80057ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	b004      	add	sp, #16
 80057e0:	4770      	bx	lr
	...

080057e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b09b      	sub	sp, #108	; 0x6c
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	78db      	ldrb	r3, [r3, #3]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d81f      	bhi.n	8005856 <USB_ActivateEndpoint+0x72>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <USB_ActivateEndpoint+0x38>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	0800582d 	.word	0x0800582d
 8005820:	08005849 	.word	0x08005849
 8005824:	0800585f 	.word	0x0800585f
 8005828:	0800583b 	.word	0x0800583b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800582c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005834:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005838:	e012      	b.n	8005860 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800583a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800583e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005842:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005846:	e00b      	b.n	8005860 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005848:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800584c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005850:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005854:	e004      	b.n	8005860 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800585c:	e000      	b.n	8005860 <USB_ActivateEndpoint+0x7c>
      break;
 800585e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800586e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587e:	b29b      	uxth	r3, r3
 8005880:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	b21b      	sxth	r3, r3
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	b21a      	sxth	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	7b1b      	ldrb	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8149 	bne.w	8005b68 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8084 	beq.w	80059e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4413      	add	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	00da      	lsls	r2, r3, #3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	88db      	ldrh	r3, [r3, #6]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	81fb      	strh	r3, [r7, #14]
 8005922:	89fb      	ldrh	r3, [r7, #14]
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <USB_ActivateEndpoint+0x180>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	81bb      	strh	r3, [r7, #12]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	89bb      	ldrh	r3, [r7, #12]
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	78db      	ldrb	r3, [r3, #3]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d020      	beq.n	80059ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	813b      	strh	r3, [r7, #8]
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	f083 0320 	eor.w	r3, r3, #32
 800598a:	813b      	strh	r3, [r7, #8]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	893b      	ldrh	r3, [r7, #8]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
 80059ac:	e27f      	b.n	8005eae <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c4:	817b      	strh	r3, [r7, #10]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]
 80059e6:	e262      	b.n	8005eae <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	4413      	add	r3, r2
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	00da      	lsls	r2, r3, #3
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	88db      	ldrh	r3, [r3, #6]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	4413      	add	r3, r2
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	00da      	lsls	r2, r3, #3
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	4413      	add	r3, r2
 8005a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d112      	bne.n	8005a6e <USB_ActivateEndpoint+0x28a>
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e02f      	b.n	8005ace <USB_ActivateEndpoint+0x2ea>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b3e      	cmp	r3, #62	; 0x3e
 8005a74:	d813      	bhi.n	8005a9e <USB_ActivateEndpoint+0x2ba>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <USB_ActivateEndpoint+0x2ac>
 8005a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	029b      	lsls	r3, r3, #10
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e017      	b.n	8005ace <USB_ActivateEndpoint+0x2ea>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <USB_ActivateEndpoint+0x2d4>
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	83fb      	strh	r3, [r7, #30]
 8005adc:	8bfb      	ldrh	r3, [r7, #30]
 8005ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01b      	beq.n	8005b1e <USB_ActivateEndpoint+0x33a>
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	83bb      	strh	r3, [r7, #28]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	441a      	add	r2, r3
 8005b08:	8bbb      	ldrh	r3, [r7, #28]
 8005b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	837b      	strh	r3, [r7, #26]
 8005b36:	8b7b      	ldrh	r3, [r7, #26]
 8005b38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b3c:	837b      	strh	r3, [r7, #26]
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b44:	837b      	strh	r3, [r7, #26]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	8b7b      	ldrh	r3, [r7, #26]
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]
 8005b66:	e1a2      	b.n	8005eae <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb4:	4413      	add	r3, r2
 8005bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00da      	lsls	r2, r3, #3
 8005bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	891b      	ldrh	r3, [r3, #8]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	4413      	add	r3, r2
 8005bea:	653b      	str	r3, [r7, #80]	; 0x50
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	00da      	lsls	r2, r3, #3
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	895b      	ldrh	r3, [r3, #10]
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 8091 	bne.w	8005d38 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <USB_ActivateEndpoint+0x482>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <USB_ActivateEndpoint+0x4d2>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
 8005d36:	e0ba      	b.n	8005eae <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01d      	beq.n	8005d90 <USB_ActivateEndpoint+0x5ac>
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005da0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01d      	beq.n	8005de8 <USB_ActivateEndpoint+0x604>
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	441a      	add	r2, r3
 8005dd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	78db      	ldrb	r3, [r3, #3]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d024      	beq.n	8005e3a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e0e:	f083 0320 	eor.w	r3, r3, #32
 8005e12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]
 8005e38:	e01d      	b.n	8005e76 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	376c      	adds	r7, #108	; 0x6c
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop

08005ec0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b08d      	sub	sp, #52	; 0x34
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	7b1b      	ldrb	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 808e 	bne.w	8005ff0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d044      	beq.n	8005f66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	81bb      	strh	r3, [r7, #12]
 8005eea:	89bb      	ldrh	r3, [r7, #12]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <USB_DeactivateEndpoint+0x6c>
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	817b      	strh	r3, [r7, #10]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	897b      	ldrh	r3, [r7, #10]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	813b      	strh	r3, [r7, #8]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	893b      	ldrh	r3, [r7, #8]
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
 8005f64:	e192      	b.n	800628c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	827b      	strh	r3, [r7, #18]
 8005f74:	8a7b      	ldrh	r3, [r7, #18]
 8005f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <USB_DeactivateEndpoint+0xf6>
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	823b      	strh	r3, [r7, #16]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8a3b      	ldrh	r3, [r7, #16]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	81fb      	strh	r3, [r7, #14]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
 8005fee:	e14d      	b.n	800628c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 80a5 	bne.w	8006144 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	843b      	strh	r3, [r7, #32]
 8006008:	8c3b      	ldrh	r3, [r7, #32]
 800600a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01b      	beq.n	800604a <USB_DeactivateEndpoint+0x18a>
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	83fb      	strh	r3, [r7, #30]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	8bfb      	ldrh	r3, [r7, #30]
 8006036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	b29b      	uxth	r3, r3
 8006048:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	83bb      	strh	r3, [r7, #28]
 8006058:	8bbb      	ldrh	r3, [r7, #28]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <USB_DeactivateEndpoint+0x1da>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	837b      	strh	r3, [r7, #26]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8b7b      	ldrh	r3, [r7, #26]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006092:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	833b      	strh	r3, [r7, #24]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8b3b      	ldrh	r3, [r7, #24]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e8:	82fb      	strh	r3, [r7, #22]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8afb      	ldrh	r3, [r7, #22]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006120:	82bb      	strh	r3, [r7, #20]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	8abb      	ldrh	r3, [r7, #20]
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]
 8006142:	e0a3      	b.n	800628c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <USB_DeactivateEndpoint+0x2d4>
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	441a      	add	r2, r3
 800617e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	b29b      	uxth	r3, r3
 8006192:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01b      	beq.n	80061e4 <USB_DeactivateEndpoint+0x324>
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006218:	b29b      	uxth	r3, r3
 800621a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006232:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	847b      	strh	r3, [r7, #34]	; 0x22
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3734      	adds	r7, #52	; 0x34
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b0cc      	sub	sp, #304	; 0x130
 800629e:	af00      	add	r7, sp, #0
 80062a0:	1d3b      	adds	r3, r7, #4
 80062a2:	6018      	str	r0, [r3, #0]
 80062a4:	463b      	mov	r3, r7
 80062a6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	f040 872e 	bne.w	8007110 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d905      	bls.n	80062d0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062ce:	e004      	b.n	80062da <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062d0:	463b      	mov	r3, r7
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	7b1b      	ldrb	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d134      	bne.n	800634e <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6959      	ldr	r1, [r3, #20]
 80062ea:	463b      	mov	r3, r7
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	88da      	ldrh	r2, [r3, #6]
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	1d38      	adds	r0, r7, #4
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f001 fbff 	bl	8007afc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062fe:	f107 0310 	add.w	r3, r7, #16
 8006302:	1d3a      	adds	r2, r7, #4
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	1d3b      	adds	r3, r7, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006310:	b29b      	uxth	r3, r3
 8006312:	4619      	mov	r1, r3
 8006314:	f107 0310 	add.w	r3, r7, #16
 8006318:	f107 0210 	add.w	r2, r7, #16
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	440a      	add	r2, r1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	463b      	mov	r3, r7
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	00da      	lsls	r2, r3, #3
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4413      	add	r3, r2
 8006332:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006340:	b29a      	uxth	r2, r3
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	f000 beac 	b.w	80070a6 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	78db      	ldrb	r3, [r3, #3]
 8006354:	2b02      	cmp	r3, #2
 8006356:	f040 838c 	bne.w	8006a72 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	f240 8330 	bls.w	80069cc <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800636c:	1d3b      	adds	r3, r7, #4
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 819e 	beq.w	800671a <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063e2:	1d3a      	adds	r2, r7, #4
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d17a      	bne.n	80064e8 <USB_EPStartXfer+0x24e>
 80063f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063f6:	1d3a      	adds	r2, r7, #4
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	1d3b      	adds	r3, r7, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	4619      	mov	r1, r3
 8006408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800640c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	440a      	add	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	00da      	lsls	r2, r3, #3
 800641e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4413      	add	r3, r2
 8006426:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800642a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11a      	bne.n	800646e <USB_EPStartXfer+0x1d4>
 8006438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006446:	b29a      	uxth	r2, r3
 8006448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	e062      	b.n	8006534 <USB_EPStartXfer+0x29a>
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	2b3e      	cmp	r3, #62	; 0x3e
 8006474:	d819      	bhi.n	80064aa <USB_EPStartXfer+0x210>
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <USB_EPStartXfer+0x1fc>
 800648c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006490:	3301      	adds	r3, #1
 8006492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e044      	b.n	8006534 <USB_EPStartXfer+0x29a>
 80064aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <USB_EPStartXfer+0x230>
 80064c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064c4:	3b01      	subs	r3, #1
 80064c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e025      	b.n	8006534 <USB_EPStartXfer+0x29a>
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d120      	bne.n	8006534 <USB_EPStartXfer+0x29a>
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	4619      	mov	r1, r3
 80064fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006502:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	440a      	add	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	00da      	lsls	r2, r3, #3
 8006514:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4413      	add	r3, r2
 800651c:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652a:	b29a      	uxth	r2, r3
 800652c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	895b      	ldrh	r3, [r3, #10]
 800653a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6959      	ldr	r1, [r3, #20]
 8006544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006548:	b29b      	uxth	r3, r3
 800654a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800654e:	1d38      	adds	r0, r7, #4
 8006550:	6800      	ldr	r0, [r0, #0]
 8006552:	f001 fad3 	bl	8007afc <USB_WritePMA>
            ep->xfer_buff += len;
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006560:	441a      	add	r2, r3
 8006562:	463b      	mov	r3, r7
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d909      	bls.n	800658c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	621a      	str	r2, [r3, #32]
 800658a:	e008      	b.n	800659e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d17a      	bne.n	800669e <USB_EPStartXfer+0x404>
 80065a8:	f107 0318 	add.w	r3, r7, #24
 80065ac:	1d3a      	adds	r2, r7, #4
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4619      	mov	r1, r3
 80065be:	f107 0318 	add.w	r3, r7, #24
 80065c2:	f107 0218 	add.w	r2, r7, #24
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	440a      	add	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	00da      	lsls	r2, r3, #3
 80065d4:	f107 0318 	add.w	r3, r7, #24
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d11a      	bne.n	8006624 <USB_EPStartXfer+0x38a>
 80065ee:	f107 0314 	add.w	r3, r7, #20
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f107 0314 	add.w	r3, r7, #20
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	f107 0314 	add.w	r3, r7, #20
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006618:	b29a      	uxth	r2, r3
 800661a:	f107 0314 	add.w	r3, r7, #20
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e067      	b.n	80066f4 <USB_EPStartXfer+0x45a>
 8006624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006628:	2b3e      	cmp	r3, #62	; 0x3e
 800662a:	d819      	bhi.n	8006660 <USB_EPStartXfer+0x3c6>
 800662c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <USB_EPStartXfer+0x3b2>
 8006642:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006646:	3301      	adds	r3, #1
 8006648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800664c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006650:	b29b      	uxth	r3, r3
 8006652:	029b      	lsls	r3, r3, #10
 8006654:	b29a      	uxth	r2, r3
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e049      	b.n	80066f4 <USB_EPStartXfer+0x45a>
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800666a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <USB_EPStartXfer+0x3e6>
 8006676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800667a:	3b01      	subs	r3, #1
 800667c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006680:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e02a      	b.n	80066f4 <USB_EPStartXfer+0x45a>
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d125      	bne.n	80066f4 <USB_EPStartXfer+0x45a>
 80066a8:	f107 0320 	add.w	r3, r7, #32
 80066ac:	1d3a      	adds	r2, r7, #4
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4619      	mov	r1, r3
 80066be:	f107 0320 	add.w	r3, r7, #32
 80066c2:	f107 0220 	add.w	r2, r7, #32
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	440a      	add	r2, r1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	00da      	lsls	r2, r3, #3
 80066d4:	f107 0320 	add.w	r3, r7, #32
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4413      	add	r3, r2
 80066dc:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80066e0:	f107 031c 	add.w	r3, r7, #28
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f107 031c 	add.w	r3, r7, #28
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	891b      	ldrh	r3, [r3, #8]
 80066fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6959      	ldr	r1, [r3, #20]
 8006704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006708:	b29b      	uxth	r3, r3
 800670a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800670e:	1d38      	adds	r0, r7, #4
 8006710:	6800      	ldr	r0, [r0, #0]
 8006712:	f001 f9f3 	bl	8007afc <USB_WritePMA>
 8006716:	f000 bcc6 	b.w	80070a6 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d164      	bne.n	80067ee <USB_EPStartXfer+0x554>
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006738:	4413      	add	r3, r2
 800673a:	64bb      	str	r3, [r7, #72]	; 0x48
 800673c:	463b      	mov	r3, r7
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	00da      	lsls	r2, r3, #3
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
 800674e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d112      	bne.n	800677c <USB_EPStartXfer+0x4e2>
 8006756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e057      	b.n	800682c <USB_EPStartXfer+0x592>
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	2b3e      	cmp	r3, #62	; 0x3e
 8006782:	d817      	bhi.n	80067b4 <USB_EPStartXfer+0x51a>
 8006784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800678e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <USB_EPStartXfer+0x50a>
 800679a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800679e:	3301      	adds	r3, #1
 80067a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	029b      	lsls	r3, r3, #10
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e03b      	b.n	800682c <USB_EPStartXfer+0x592>
 80067b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <USB_EPStartXfer+0x53a>
 80067ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e01e      	b.n	800682c <USB_EPStartXfer+0x592>
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d119      	bne.n	800682c <USB_EPStartXfer+0x592>
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	653b      	str	r3, [r7, #80]	; 0x50
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	4413      	add	r3, r2
 800680e:	653b      	str	r3, [r7, #80]	; 0x50
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00da      	lsls	r2, r3, #3
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	4413      	add	r3, r2
 800681c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006826:	b29a      	uxth	r2, r3
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	891b      	ldrh	r3, [r3, #8]
 8006832:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6959      	ldr	r1, [r3, #20]
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	b29b      	uxth	r3, r3
 8006842:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006846:	1d38      	adds	r0, r7, #4
 8006848:	6800      	ldr	r0, [r0, #0]
 800684a:	f001 f957 	bl	8007afc <USB_WritePMA>
            ep->xfer_buff += len;
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006858:	441a      	add	r2, r3
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d909      	bls.n	8006884 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006870:	463b      	mov	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	1ad2      	subs	r2, r2, r3
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	621a      	str	r2, [r3, #32]
 8006882:	e008      	b.n	8006896 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	643b      	str	r3, [r7, #64]	; 0x40
 800689c:	463b      	mov	r3, r7
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d164      	bne.n	8006970 <USB_EPStartXfer+0x6d6>
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	4413      	add	r3, r2
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068be:	463b      	mov	r3, r7
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	00da      	lsls	r2, r3, #3
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
 80068d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d112      	bne.n	80068fe <USB_EPStartXfer+0x664>
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	801a      	strh	r2, [r3, #0]
 80068fc:	e054      	b.n	80069a8 <USB_EPStartXfer+0x70e>
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	2b3e      	cmp	r3, #62	; 0x3e
 8006904:	d817      	bhi.n	8006936 <USB_EPStartXfer+0x69c>
 8006906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <USB_EPStartXfer+0x68c>
 800691c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006920:	3301      	adds	r3, #1
 8006922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800692a:	b29b      	uxth	r3, r3
 800692c:	029b      	lsls	r3, r3, #10
 800692e:	b29a      	uxth	r2, r3
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	e038      	b.n	80069a8 <USB_EPStartXfer+0x70e>
 8006936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <USB_EPStartXfer+0x6bc>
 800694c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006950:	3b01      	subs	r3, #1
 8006952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800695a:	b29b      	uxth	r3, r3
 800695c:	029b      	lsls	r3, r3, #10
 800695e:	b29b      	uxth	r3, r3
 8006960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006968:	b29a      	uxth	r2, r3
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	801a      	strh	r2, [r3, #0]
 800696e:	e01b      	b.n	80069a8 <USB_EPStartXfer+0x70e>
 8006970:	463b      	mov	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d116      	bne.n	80069a8 <USB_EPStartXfer+0x70e>
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006982:	b29b      	uxth	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	4413      	add	r3, r2
 800698a:	643b      	str	r3, [r7, #64]	; 0x40
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00da      	lsls	r2, r3, #3
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	4413      	add	r3, r2
 8006998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	895b      	ldrh	r3, [r3, #10]
 80069ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6959      	ldr	r1, [r3, #20]
 80069b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069c2:	1d38      	adds	r0, r7, #4
 80069c4:	6800      	ldr	r0, [r0, #0]
 80069c6:	f001 f899 	bl	8007afc <USB_WritePMA>
 80069ca:	e36c      	b.n	80070a6 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069cc:	463b      	mov	r3, r7
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	463b      	mov	r3, r7
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	463b      	mov	r3, r7
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a20:	1d3b      	adds	r3, r7, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a2e:	4413      	add	r3, r2
 8006a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a32:	463b      	mov	r3, r7
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	00da      	lsls	r2, r3, #3
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	891b      	ldrh	r3, [r3, #8]
 8006a54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6959      	ldr	r1, [r3, #20]
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a68:	1d38      	adds	r0, r7, #4
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	f001 f846 	bl	8007afc <USB_WritePMA>
 8006a70:	e319      	b.n	80070a6 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ac8:	1d3b      	adds	r3, r7, #4
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	463b      	mov	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8162 	beq.w	8006da8 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ae4:	1d3b      	adds	r3, r7, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aec:	463b      	mov	r3, r7
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d164      	bne.n	8006bc0 <USB_EPStartXfer+0x926>
 8006af6:	1d3b      	adds	r3, r7, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afc:	1d3b      	adds	r3, r7, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0a:	4413      	add	r3, r2
 8006b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b0e:	463b      	mov	r3, r7
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00da      	lsls	r2, r3, #3
 8006b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d112      	bne.n	8006b4e <USB_EPStartXfer+0x8b4>
 8006b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	e057      	b.n	8006bfe <USB_EPStartXfer+0x964>
 8006b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b52:	2b3e      	cmp	r3, #62	; 0x3e
 8006b54:	d817      	bhi.n	8006b86 <USB_EPStartXfer+0x8ec>
 8006b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <USB_EPStartXfer+0x8dc>
 8006b6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b70:	3301      	adds	r3, #1
 8006b72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e03b      	b.n	8006bfe <USB_EPStartXfer+0x964>
 8006b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <USB_EPStartXfer+0x90c>
 8006b9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ba6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e01e      	b.n	8006bfe <USB_EPStartXfer+0x964>
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d119      	bne.n	8006bfe <USB_EPStartXfer+0x964>
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	00da      	lsls	r2, r3, #3
 8006be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	895b      	ldrh	r3, [r3, #10]
 8006c04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c08:	463b      	mov	r3, r7
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6959      	ldr	r1, [r3, #20]
 8006c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c18:	1d38      	adds	r0, r7, #4
 8006c1a:	6800      	ldr	r0, [r0, #0]
 8006c1c:	f000 ff6e 	bl	8007afc <USB_WritePMA>
          ep->xfer_buff += len;
 8006c20:	463b      	mov	r3, r7
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	441a      	add	r2, r3
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d909      	bls.n	8006c56 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	621a      	str	r2, [r3, #32]
 8006c54:	e008      	b.n	8006c68 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c56:	463b      	mov	r3, r7
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 821a 	beq.w	80070a6 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c72:	463b      	mov	r3, r7
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d164      	bne.n	8006d46 <USB_EPStartXfer+0xaac>
 8006c7c:	1d3b      	adds	r3, r7, #4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c90:	4413      	add	r3, r2
 8006c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c94:	463b      	mov	r3, r7
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	00da      	lsls	r2, r3, #3
 8006c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d112      	bne.n	8006cd4 <USB_EPStartXfer+0xa3a>
 8006cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e057      	b.n	8006d84 <USB_EPStartXfer+0xaea>
 8006cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cda:	d817      	bhi.n	8006d0c <USB_EPStartXfer+0xa72>
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <USB_EPStartXfer+0xa62>
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e03b      	b.n	8006d84 <USB_EPStartXfer+0xaea>
 8006d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <USB_EPStartXfer+0xa92>
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e01e      	b.n	8006d84 <USB_EPStartXfer+0xaea>
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d119      	bne.n	8006d84 <USB_EPStartXfer+0xaea>
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	673b      	str	r3, [r7, #112]	; 0x70
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d64:	4413      	add	r3, r2
 8006d66:	673b      	str	r3, [r7, #112]	; 0x70
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	00da      	lsls	r2, r3, #3
 8006d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d72:	4413      	add	r3, r2
 8006d74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	891b      	ldrh	r3, [r3, #8]
 8006d8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8e:	463b      	mov	r3, r7
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6959      	ldr	r1, [r3, #20]
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d9e:	1d38      	adds	r0, r7, #4
 8006da0:	6800      	ldr	r0, [r0, #0]
 8006da2:	f000 feab 	bl	8007afc <USB_WritePMA>
 8006da6:	e17e      	b.n	80070a6 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d16f      	bne.n	8006e92 <USB_EPStartXfer+0xbf8>
 8006db2:	1d3b      	adds	r3, r7, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	00da      	lsls	r2, r3, #3
 8006dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ddc:	4413      	add	r3, r2
 8006dde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006de2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <USB_EPStartXfer+0xb82>
 8006dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e05f      	b.n	8006edc <USB_EPStartXfer+0xc42>
 8006e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e20:	2b3e      	cmp	r3, #62	; 0x3e
 8006e22:	d818      	bhi.n	8006e56 <USB_EPStartXfer+0xbbc>
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <USB_EPStartXfer+0xbaa>
 8006e3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e3e:	3301      	adds	r3, #1
 8006e40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	029b      	lsls	r3, r3, #10
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	e042      	b.n	8006edc <USB_EPStartXfer+0xc42>
 8006e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <USB_EPStartXfer+0xbdc>
 8006e6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e70:	3b01      	subs	r3, #1
 8006e72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e024      	b.n	8006edc <USB_EPStartXfer+0xc42>
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d11f      	bne.n	8006edc <USB_EPStartXfer+0xc42>
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ea4:	1d3b      	adds	r3, r7, #4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006eba:	463b      	mov	r3, r7
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00da      	lsls	r2, r3, #3
 8006ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006edc:	463b      	mov	r3, r7
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	891b      	ldrh	r3, [r3, #8]
 8006ee2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6959      	ldr	r1, [r3, #20]
 8006eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ef6:	1d38      	adds	r0, r7, #4
 8006ef8:	6800      	ldr	r0, [r0, #0]
 8006efa:	f000 fdff 	bl	8007afc <USB_WritePMA>
          ep->xfer_buff += len;
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f08:	441a      	add	r2, r3
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006f10:	463b      	mov	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d909      	bls.n	8006f34 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	1ad2      	subs	r2, r2, r3
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	621a      	str	r2, [r3, #32]
 8006f32:	e008      	b.n	8006f46 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2200      	movs	r2, #0
 8006f44:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80ab 	beq.w	80070a6 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f50:	1d3b      	adds	r3, r7, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d16f      	bne.n	8007042 <USB_EPStartXfer+0xda8>
 8006f62:	1d3b      	adds	r3, r7, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	00da      	lsls	r2, r3, #3
 8006f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d116      	bne.n	8006fcc <USB_EPStartXfer+0xd32>
 8006f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	e05b      	b.n	8007084 <USB_EPStartXfer+0xdea>
 8006fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd2:	d818      	bhi.n	8007006 <USB_EPStartXfer+0xd6c>
 8006fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <USB_EPStartXfer+0xd5a>
 8006fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	029b      	lsls	r3, r3, #10
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e03e      	b.n	8007084 <USB_EPStartXfer+0xdea>
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <USB_EPStartXfer+0xd8c>
 800701c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007020:	3b01      	subs	r3, #1
 8007022:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702a:	b29b      	uxth	r3, r3
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b29b      	uxth	r3, r3
 8007030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007038:	b29a      	uxth	r2, r3
 800703a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	e020      	b.n	8007084 <USB_EPStartXfer+0xdea>
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d11b      	bne.n	8007084 <USB_EPStartXfer+0xdea>
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007054:	b29b      	uxth	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800705c:	4413      	add	r3, r2
 800705e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	00da      	lsls	r2, r3, #3
 800706a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800706e:	4413      	add	r3, r2
 8007070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007082:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007084:	463b      	mov	r3, r7
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	895b      	ldrh	r3, [r3, #10]
 800708a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708e:	463b      	mov	r3, r7
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007098:	b29b      	uxth	r3, r3
 800709a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800709e:	1d38      	adds	r0, r7, #4
 80070a0:	6800      	ldr	r0, [r0, #0]
 80070a2:	f000 fd2b 	bl	8007afc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070a6:	1d3b      	adds	r3, r7, #4
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	463b      	mov	r3, r7
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f107 020a 	add.w	r2, r7, #10
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c4:	8013      	strh	r3, [r2, #0]
 80070c6:	f107 030a 	add.w	r3, r7, #10
 80070ca:	f107 020a 	add.w	r2, r7, #10
 80070ce:	8812      	ldrh	r2, [r2, #0]
 80070d0:	f082 0210 	eor.w	r2, r2, #16
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	f107 030a 	add.w	r3, r7, #10
 80070da:	f107 020a 	add.w	r2, r7, #10
 80070de:	8812      	ldrh	r2, [r2, #0]
 80070e0:	f082 0220 	eor.w	r2, r2, #32
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	463b      	mov	r3, r7
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	f107 030a 	add.w	r3, r7, #10
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]
 800710e:	e3b5      	b.n	800787c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	7b1b      	ldrb	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8090 	bne.w	800723c <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	463b      	mov	r3, r7
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d90e      	bls.n	800714a <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	619a      	str	r2, [r3, #24]
 8007148:	e008      	b.n	800715c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007174:	4413      	add	r3, r2
 8007176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00da      	lsls	r2, r3, #3
 8007182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007186:	4413      	add	r3, r2
 8007188:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800718c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d116      	bne.n	80071c6 <USB_EPStartXfer+0xf2c>
 8007198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e32c      	b.n	8007820 <USB_EPStartXfer+0x1586>
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	2b3e      	cmp	r3, #62	; 0x3e
 80071cc:	d818      	bhi.n	8007200 <USB_EPStartXfer+0xf66>
 80071ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0xf54>
 80071e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	e30f      	b.n	8007820 <USB_EPStartXfer+0x1586>
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <USB_EPStartXfer+0xf86>
 8007216:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800721a:	3b01      	subs	r3, #1
 800721c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007224:	b29b      	uxth	r3, r3
 8007226:	029b      	lsls	r3, r3, #10
 8007228:	b29b      	uxth	r3, r3
 800722a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	e2f1      	b.n	8007820 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	2b02      	cmp	r3, #2
 8007244:	f040 818f 	bne.w	8007566 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d175      	bne.n	800733e <USB_EPStartXfer+0x10a4>
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800726a:	4413      	add	r3, r2
 800726c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00da      	lsls	r2, r3, #3
 8007278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800727c:	4413      	add	r3, r2
 800727e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007286:	463b      	mov	r3, r7
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d116      	bne.n	80072be <USB_EPStartXfer+0x1024>
 8007290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e065      	b.n	800738a <USB_EPStartXfer+0x10f0>
 80072be:	463b      	mov	r3, r7
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b3e      	cmp	r3, #62	; 0x3e
 80072c6:	d81a      	bhi.n	80072fe <USB_EPStartXfer+0x1064>
 80072c8:	463b      	mov	r3, r7
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USB_EPStartXfer+0x1052>
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	3301      	adds	r3, #1
 80072e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	029b      	lsls	r3, r3, #10
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e045      	b.n	800738a <USB_EPStartXfer+0x10f0>
 80072fe:	463b      	mov	r3, r7
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800730a:	463b      	mov	r3, r7
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <USB_EPStartXfer+0x1088>
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	3b01      	subs	r3, #1
 800731e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	b29b      	uxth	r3, r3
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e025      	b.n	800738a <USB_EPStartXfer+0x10f0>
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d120      	bne.n	800738a <USB_EPStartXfer+0x10f0>
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00da      	lsls	r2, r3, #3
 800736e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007372:	4413      	add	r3, r2
 8007374:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800737c:	463b      	mov	r3, r7
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d175      	bne.n	8007488 <USB_EPStartXfer+0x11ee>
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073b4:	4413      	add	r3, r2
 80073b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	00da      	lsls	r2, r3, #3
 80073c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073c6:	4413      	add	r3, r2
 80073c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <USB_EPStartXfer+0x116e>
 80073da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e061      	b.n	80074cc <USB_EPStartXfer+0x1232>
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b3e      	cmp	r3, #62	; 0x3e
 8007410:	d81a      	bhi.n	8007448 <USB_EPStartXfer+0x11ae>
 8007412:	463b      	mov	r3, r7
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800741e:	463b      	mov	r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <USB_EPStartXfer+0x119c>
 800742c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007430:	3301      	adds	r3, #1
 8007432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e041      	b.n	80074cc <USB_EPStartXfer+0x1232>
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007454:	463b      	mov	r3, r7
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <USB_EPStartXfer+0x11d2>
 8007462:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007466:	3b01      	subs	r3, #1
 8007468:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800746c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29b      	uxth	r3, r3
 8007476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747e:	b29a      	uxth	r2, r3
 8007480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e021      	b.n	80074cc <USB_EPStartXfer+0x1232>
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d11c      	bne.n	80074cc <USB_EPStartXfer+0x1232>
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074a2:	4413      	add	r3, r2
 80074a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a8:	463b      	mov	r3, r7
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	00da      	lsls	r2, r3, #3
 80074b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074b4:	4413      	add	r3, r2
 80074b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074be:	463b      	mov	r3, r7
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074ca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 81a4 	beq.w	8007820 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <USB_EPStartXfer+0x126a>
 80074f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007504:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 8187 	bne.w	8007820 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007512:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	f040 8180 	bne.w	8007820 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	463b      	mov	r3, r7
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800753e:	1d3b      	adds	r3, r7, #4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007560:	b29b      	uxth	r3, r3
 8007562:	8013      	strh	r3, [r2, #0]
 8007564:	e15c      	b.n	8007820 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b01      	cmp	r3, #1
 800756e:	f040 8155 	bne.w	800781c <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007572:	463b      	mov	r3, r7
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	463b      	mov	r3, r7
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	429a      	cmp	r2, r3
 8007580:	d90e      	bls.n	80075a0 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007582:	463b      	mov	r3, r7
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800758c:	463b      	mov	r3, r7
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	463b      	mov	r3, r7
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	619a      	str	r2, [r3, #24]
 800759e:	e008      	b.n	80075b2 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80075a0:	463b      	mov	r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2200      	movs	r2, #0
 80075b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d16f      	bne.n	800769c <USB_EPStartXfer+0x1402>
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075d4:	4413      	add	r3, r2
 80075d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d116      	bne.n	8007626 <USB_EPStartXfer+0x138c>
 80075f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007604:	b29a      	uxth	r2, r3
 8007606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761c:	b29a      	uxth	r2, r3
 800761e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007622:	801a      	strh	r2, [r3, #0]
 8007624:	e05f      	b.n	80076e6 <USB_EPStartXfer+0x144c>
 8007626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762a:	2b3e      	cmp	r3, #62	; 0x3e
 800762c:	d818      	bhi.n	8007660 <USB_EPStartXfer+0x13c6>
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <USB_EPStartXfer+0x13b4>
 8007644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007648:	3301      	adds	r3, #1
 800764a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800764e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007652:	b29b      	uxth	r3, r3
 8007654:	029b      	lsls	r3, r3, #10
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e042      	b.n	80076e6 <USB_EPStartXfer+0x144c>
 8007660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <USB_EPStartXfer+0x13e6>
 8007676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800767a:	3b01      	subs	r3, #1
 800767c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007684:	b29b      	uxth	r3, r3
 8007686:	029b      	lsls	r3, r3, #10
 8007688:	b29b      	uxth	r3, r3
 800768a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007692:	b29a      	uxth	r2, r3
 8007694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e024      	b.n	80076e6 <USB_EPStartXfer+0x144c>
 800769c:	463b      	mov	r3, r7
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d11f      	bne.n	80076e6 <USB_EPStartXfer+0x144c>
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076be:	4413      	add	r3, r2
 80076c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076c4:	463b      	mov	r3, r7
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	00da      	lsls	r2, r3, #3
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	4413      	add	r3, r2
 80076d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	1d3b      	adds	r3, r7, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076ee:	463b      	mov	r3, r7
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d16f      	bne.n	80077d8 <USB_EPStartXfer+0x153e>
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007710:	4413      	add	r3, r2
 8007712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007716:	463b      	mov	r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	00da      	lsls	r2, r3, #3
 800771e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007722:	4413      	add	r3, r2
 8007724:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800772c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d116      	bne.n	8007762 <USB_EPStartXfer+0x14c8>
 8007734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e05e      	b.n	8007820 <USB_EPStartXfer+0x1586>
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	2b3e      	cmp	r3, #62	; 0x3e
 8007768:	d818      	bhi.n	800779c <USB_EPStartXfer+0x1502>
 800776a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <USB_EPStartXfer+0x14f0>
 8007780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007784:	3301      	adds	r3, #1
 8007786:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800778a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800778e:	b29b      	uxth	r3, r3
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e041      	b.n	8007820 <USB_EPStartXfer+0x1586>
 800779c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a0:	095b      	lsrs	r3, r3, #5
 80077a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <USB_EPStartXfer+0x1522>
 80077b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077b6:	3b01      	subs	r3, #1
 80077b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e023      	b.n	8007820 <USB_EPStartXfer+0x1586>
 80077d8:	463b      	mov	r3, r7
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d11e      	bne.n	8007820 <USB_EPStartXfer+0x1586>
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f2:	4413      	add	r3, r2
 80077f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	00da      	lsls	r2, r3, #3
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	4413      	add	r3, r2
 8007806:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800780a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800780e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e001      	b.n	8007820 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e02e      	b.n	800787e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	463b      	mov	r3, r7
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800783e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007842:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007846:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800784a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800784e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007852:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007856:	1d3b      	adds	r3, r7, #4
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d020      	beq.n	80078dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b0:	81bb      	strh	r3, [r7, #12]
 80078b2:	89bb      	ldrh	r3, [r7, #12]
 80078b4:	f083 0310 	eor.w	r3, r3, #16
 80078b8:	81bb      	strh	r3, [r7, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	89bb      	ldrh	r3, [r7, #12]
 80078c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8013      	strh	r3, [r2, #0]
 80078da:	e01f      	b.n	800791c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f2:	81fb      	strh	r3, [r7, #14]
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078fa:	81fb      	strh	r3, [r7, #14]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	89fb      	ldrh	r3, [r7, #14]
 8007908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007918:	b29b      	uxth	r3, r3
 800791a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800792a:	b480      	push	{r7}
 800792c:	b087      	sub	sp, #28
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	7b1b      	ldrb	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 809d 	bne.w	8007a78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d04c      	beq.n	80079e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	823b      	strh	r3, [r7, #16]
 8007954:	8a3b      	ldrh	r3, [r7, #16]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01b      	beq.n	8007996 <USB_EPClearStall+0x6c>
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007974:	81fb      	strh	r3, [r7, #14]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	89fb      	ldrh	r3, [r7, #14]
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	78db      	ldrb	r3, [r3, #3]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d06c      	beq.n	8007a78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b4:	81bb      	strh	r3, [r7, #12]
 80079b6:	89bb      	ldrh	r3, [r7, #12]
 80079b8:	f083 0320 	eor.w	r3, r3, #32
 80079bc:	81bb      	strh	r3, [r7, #12]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	89bb      	ldrh	r3, [r7, #12]
 80079ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8013      	strh	r3, [r2, #0]
 80079de:	e04b      	b.n	8007a78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	82fb      	strh	r3, [r7, #22]
 80079ee:	8afb      	ldrh	r3, [r7, #22]
 80079f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01b      	beq.n	8007a30 <USB_EPClearStall+0x106>
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	82bb      	strh	r3, [r7, #20]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	8abb      	ldrh	r3, [r7, #20]
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	827b      	strh	r3, [r7, #18]
 8007a48:	8a7b      	ldrh	r3, [r7, #18]
 8007a4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a4e:	827b      	strh	r3, [r7, #18]
 8007a50:	8a7b      	ldrh	r3, [r7, #18]
 8007a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a56:	827b      	strh	r3, [r7, #18]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	8a7b      	ldrh	r3, [r7, #18]
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2280      	movs	r2, #128	; 0x80
 8007a9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b08d      	sub	sp, #52	; 0x34
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	80fb      	strh	r3, [r7, #6]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b12:	88bb      	ldrh	r3, [r7, #4]
 8007b14:	3301      	adds	r3, #1
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b2c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b32:	e01b      	b.n	8007b6c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	3301      	adds	r3, #1
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e0      	bne.n	8007b34 <USB_WritePMA+0x38>
  }
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	3734      	adds	r7, #52	; 0x34
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b08b      	sub	sp, #44	; 0x2c
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	460b      	mov	r3, r1
 8007b90:	80fb      	strh	r3, [r7, #6]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b96:	88bb      	ldrh	r3, [r7, #4]
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb6:	e018      	b.n	8007bea <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	3301      	adds	r3, #1
 8007be2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	3b01      	subs	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e3      	bne.n	8007bb8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007bf0:	88bb      	ldrh	r3, [r7, #4]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	701a      	strb	r2, [r3, #0]
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	372c      	adds	r7, #44	; 0x2c
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c28:	f002 f8ec 	bl	8009e04 <USBD_static_malloc>
 8007c2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e066      	b.n	8007d0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7c1b      	ldrb	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d119      	bne.n	8007c84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c54:	2202      	movs	r2, #2
 8007c56:	2181      	movs	r1, #129	; 0x81
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 ff78 	bl	8009b4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c68:	2202      	movs	r2, #2
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 ff6e 	bl	8009b4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c82:	e016      	b.n	8007cb2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	2202      	movs	r2, #2
 8007c88:	2181      	movs	r1, #129	; 0x81
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 ff5f 	bl	8009b4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c96:	2340      	movs	r3, #64	; 0x40
 8007c98:	2202      	movs	r2, #2
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 ff56 	bl	8009b4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2210      	movs	r2, #16
 8007cae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	2182      	movs	r1, #130	; 0x82
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 ff48 	bl	8009b4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7c1b      	ldrb	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d109      	bne.n	8007cfc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f002 f81a 	bl	8009d2e <USBD_LL_PrepareReceive>
 8007cfa:	e007      	b.n	8007d0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	2101      	movs	r1, #1
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 f811 	bl	8009d2e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d22:	2181      	movs	r1, #129	; 0x81
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 ff38 	bl	8009b9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d30:	2101      	movs	r1, #1
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 ff31 	bl	8009b9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d40:	2182      	movs	r1, #130	; 0x82
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 ff29 	bl	8009b9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 f854 	bl	8009e20 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e0af      	b.n	8007f14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03f      	beq.n	8007e40 <USBD_CDC_Setup+0xb4>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	f040 809f 	bne.w	8007f04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d02e      	beq.n	8007e2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da16      	bge.n	8007e06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007de4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	88d2      	ldrh	r2, [r2, #6]
 8007dea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	88db      	ldrh	r3, [r3, #6]
 8007df0:	2b07      	cmp	r3, #7
 8007df2:	bf28      	it	cs
 8007df4:	2307      	movcs	r3, #7
 8007df6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	89fa      	ldrh	r2, [r7, #14]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 facf 	bl	80093a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007e04:	e085      	b.n	8007f12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	785a      	ldrb	r2, [r3, #1]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	88db      	ldrh	r3, [r3, #6]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e1c:	6939      	ldr	r1, [r7, #16]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	461a      	mov	r2, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fae8 	bl	80093fa <USBD_CtlPrepareRx>
      break;
 8007e2a:	e072      	b.n	8007f12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	7850      	ldrb	r0, [r2, #1]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	4798      	blx	r3
      break;
 8007e3e:	e068      	b.n	8007f12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b0b      	cmp	r3, #11
 8007e46:	d852      	bhi.n	8007eee <USBD_CDC_Setup+0x162>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <USBD_CDC_Setup+0xc4>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e81 	.word	0x08007e81
 8007e54:	08007efd 	.word	0x08007efd
 8007e58:	08007eef 	.word	0x08007eef
 8007e5c:	08007eef 	.word	0x08007eef
 8007e60:	08007eef 	.word	0x08007eef
 8007e64:	08007eef 	.word	0x08007eef
 8007e68:	08007eef 	.word	0x08007eef
 8007e6c:	08007eef 	.word	0x08007eef
 8007e70:	08007eef 	.word	0x08007eef
 8007e74:	08007eef 	.word	0x08007eef
 8007e78:	08007eab 	.word	0x08007eab
 8007e7c:	08007ed5 	.word	0x08007ed5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d107      	bne.n	8007e9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e8c:	f107 030a 	add.w	r3, r7, #10
 8007e90:	2202      	movs	r2, #2
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fa84 	bl	80093a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e9a:	e032      	b.n	8007f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fa0e 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea8:	e02b      	b.n	8007f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d107      	bne.n	8007ec6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eb6:	f107 030d 	add.w	r3, r7, #13
 8007eba:	2201      	movs	r2, #1
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 fa6f 	bl	80093a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ec4:	e01d      	b.n	8007f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f9f9 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed2:	e016      	b.n	8007f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d00f      	beq.n	8007f00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f9ec 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eec:	e008      	b.n	8007f00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f9e5 	bl	80092c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8007efa:	e002      	b.n	8007f02 <USBD_CDC_Setup+0x176>
          break;
 8007efc:	bf00      	nop
 8007efe:	e008      	b.n	8007f12 <USBD_CDC_Setup+0x186>
          break;
 8007f00:	bf00      	nop
      }
      break;
 8007f02:	e006      	b.n	8007f12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 f9da 	bl	80092c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f10:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e04f      	b.n	8007fde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3318      	adds	r3, #24
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d029      	beq.n	8007fb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	3318      	adds	r3, #24
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	78f9      	ldrb	r1, [r7, #3]
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	460b      	mov	r3, r1
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	4403      	add	r3, r0
 8007f7c:	3338      	adds	r3, #56	; 0x38
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f84:	fb03 f301 	mul.w	r3, r3, r1
 8007f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d110      	bne.n	8007fb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fa2:	78f9      	ldrb	r1, [r7, #3]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fe9f 	bl	8009cec <USBD_LL_Transmit>
 8007fae:	e015      	b.n	8007fdc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e015      	b.n	8008034 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 feaf 	bl	8009d70 <USBD_LL_GetRxDataSize>
 8008012:	4602      	mov	r2, r0
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800802e:	4611      	mov	r1, r2
 8008030:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	e01b      	b.n	800808e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d015      	beq.n	800808c <USBD_CDC_EP0_RxReady+0x50>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008066:	2bff      	cmp	r3, #255	; 0xff
 8008068:	d010      	beq.n	800808c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008078:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008080:	b292      	uxth	r2, r2
 8008082:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	22ff      	movs	r2, #255	; 0xff
 8008088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2243      	movs	r2, #67	; 0x43
 80080a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	200000b8 	.word	0x200000b8

080080b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2243      	movs	r2, #67	; 0x43
 80080c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000074 	.word	0x20000074

080080d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2243      	movs	r2, #67	; 0x43
 80080e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	200000fc 	.word	0x200000fc

080080f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220a      	movs	r2, #10
 8008104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	; (8008114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	20000030 	.word	0x20000030

08008118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	e004      	b.n	8008136 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008142:	b480      	push	{r7}
 8008144:	b087      	sub	sp, #28
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008154:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	e008      	b.n	8008172 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800818e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	e004      	b.n	80081a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e01a      	b.n	8008208 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d114      	bne.n	8008206 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081fa:	2181      	movs	r1, #129	; 0x81
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fd75 	bl	8009cec <USBD_LL_Transmit>

    ret = USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	e016      	b.n	800825c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	7c1b      	ldrb	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800823c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008240:	2101      	movs	r1, #1
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fd73 	bl	8009d2e <USBD_LL_PrepareReceive>
 8008248:	e007      	b.n	800825a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	2101      	movs	r1, #1
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fd6a 	bl	8009d2e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008278:	2303      	movs	r3, #3
 800827a:	e01f      	b.n	80082bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	79fa      	ldrb	r2, [r7, #7]
 80082ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f001 fbd1 	bl	8009a58 <USBD_LL_Init>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	e016      	b.n	800830a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	f107 020e 	add.w	r2, r7, #14
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4602      	mov	r2, r0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fbfc 	bl	8009b18 <USBD_LL_Start>
 8008320:	4603      	mov	r3, r0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	4611      	mov	r1, r2
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	4611      	mov	r1, r2
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
  }

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ff46 	bl	800924c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083dc:	f003 031f 	and.w	r3, r3, #31
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d01a      	beq.n	800841a <USBD_LL_SetupStage+0x72>
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d822      	bhi.n	800842e <USBD_LL_SetupStage+0x86>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <USBD_LL_SetupStage+0x4a>
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d00a      	beq.n	8008406 <USBD_LL_SetupStage+0x5e>
 80083f0:	e01d      	b.n	800842e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9ee 	bl	80087dc <USBD_StdDevReq>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
      break;
 8008404:	e020      	b.n	8008448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa52 	bl	80088b8 <USBD_StdItfReq>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
      break;
 8008418:	e016      	b.n	8008448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa91 	bl	800894a <USBD_StdEPReq>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e00c      	b.n	8008448 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008438:	b2db      	uxtb	r3, r3
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fbcb 	bl	8009bd8 <USBD_LL_StallEP>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	bf00      	nop
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	460b      	mov	r3, r1
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d138      	bne.n	80084d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800846c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008474:	2b03      	cmp	r3, #3
 8008476:	d14a      	bne.n	800850e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	429a      	cmp	r2, r3
 8008482:	d913      	bls.n	80084ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	1ad2      	subs	r2, r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	4293      	cmp	r3, r2
 800849c:	bf28      	it	cs
 800849e:	4613      	movcs	r3, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 ffc5 	bl	8009434 <USBD_CtlContinueRx>
 80084aa:	e030      	b.n	800850e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d10b      	bne.n	80084d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 ffc0 	bl	8009456 <USBD_CtlSendStatus>
 80084d6:	e01a      	b.n	800850e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d114      	bne.n	800850e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	7afa      	ldrb	r2, [r7, #11]
 80084fa:	4611      	mov	r1, r2
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	4798      	blx	r3
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	e000      	b.n	8008510 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	460b      	mov	r3, r1
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008526:	7afb      	ldrb	r3, [r7, #11]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d16b      	bne.n	8008604 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3314      	adds	r3, #20
 8008530:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008538:	2b02      	cmp	r3, #2
 800853a:	d156      	bne.n	80085ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d914      	bls.n	8008572 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	1ad2      	subs	r2, r2, r3
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	461a      	mov	r2, r3
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 ff3a 	bl	80093d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008564:	2300      	movs	r3, #0
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f001 fbdf 	bl	8009d2e <USBD_LL_PrepareReceive>
 8008570:	e03b      	b.n	80085ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	429a      	cmp	r2, r3
 800857c:	d11c      	bne.n	80085b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008586:	429a      	cmp	r2, r3
 8008588:	d316      	bcc.n	80085b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008594:	429a      	cmp	r2, r3
 8008596:	d20f      	bcs.n	80085b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 ff1b 	bl	80093d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085aa:	2300      	movs	r3, #0
 80085ac:	2200      	movs	r2, #0
 80085ae:	2100      	movs	r1, #0
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 fbbc 	bl	8009d2e <USBD_LL_PrepareReceive>
 80085b6:	e018      	b.n	80085ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d10b      	bne.n	80085dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 fafa 	bl	8009bd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 ff49 	bl	800947c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d122      	bne.n	800863a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fe98 	bl	800832a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008602:	e01a      	b.n	800863a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b03      	cmp	r3, #3
 800860e:	d114      	bne.n	800863a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	7afa      	ldrb	r2, [r7, #11]
 8008626:	4611      	mov	r1, r2
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	e000      	b.n	800863c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008674:	2303      	movs	r3, #3
 8008676:	e02f      	b.n	80086d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6852      	ldr	r2, [r2, #4]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	4611      	mov	r1, r2
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 fa50 	bl	8009b4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2240      	movs	r2, #64	; 0x40
 80086ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	2200      	movs	r2, #0
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fa42 	bl	8009b4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2240      	movs	r2, #64	; 0x40
 80086d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870e:	b2da      	uxtb	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2204      	movs	r2, #4
 800871a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b04      	cmp	r3, #4
 800873e:	d106      	bne.n	800874e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008746:	b2da      	uxtb	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	e012      	b.n	8008798 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d10b      	bne.n	8008796 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	3301      	adds	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087be:	8a3b      	ldrh	r3, [r7, #16]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	b21a      	sxth	r2, r3
 80087c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b21b      	sxth	r3, r3
 80087cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087ce:	89fb      	ldrh	r3, [r7, #14]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d005      	beq.n	8008802 <USBD_StdDevReq+0x26>
 80087f6:	2b40      	cmp	r3, #64	; 0x40
 80087f8:	d853      	bhi.n	80088a2 <USBD_StdDevReq+0xc6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <USBD_StdDevReq+0x3a>
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d14f      	bne.n	80088a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	e04a      	b.n	80088ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b09      	cmp	r3, #9
 800881c:	d83b      	bhi.n	8008896 <USBD_StdDevReq+0xba>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_StdDevReq+0x48>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008879 	.word	0x08008879
 8008828:	0800888d 	.word	0x0800888d
 800882c:	08008897 	.word	0x08008897
 8008830:	08008883 	.word	0x08008883
 8008834:	08008897 	.word	0x08008897
 8008838:	08008857 	.word	0x08008857
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008897 	.word	0x08008897
 8008844:	0800886f 	.word	0x0800886f
 8008848:	08008861 	.word	0x08008861
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9de 	bl	8008c10 <USBD_GetDescriptor>
          break;
 8008854:	e024      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb6d 	bl	8008f38 <USBD_SetAddress>
          break;
 800885e:	e01f      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fbac 	bl	8008fc0 <USBD_SetConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
          break;
 800886c:	e018      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc4b 	bl	800910c <USBD_GetConfig>
          break;
 8008876:	e013      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc7c 	bl	8009178 <USBD_GetStatus>
          break;
 8008880:	e00e      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fcab 	bl	80091e0 <USBD_SetFeature>
          break;
 800888a:	e009      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fcba 	bl	8009208 <USBD_ClrFeature>
          break;
 8008894:	e004      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fd11 	bl	80092c0 <USBD_CtlError>
          break;
 800889e:	bf00      	nop
      }
      break;
 80088a0:	e004      	b.n	80088ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd0b 	bl	80092c0 <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d005      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d82f      	bhi.n	8008936 <USBD_StdItfReq+0x7e>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d12b      	bne.n	8008936 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d81d      	bhi.n	8008928 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	889b      	ldrh	r3, [r3, #4]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d813      	bhi.n	800891e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d110      	bne.n	8008932 <USBD_StdItfReq+0x7a>
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fd9d 	bl	8009456 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800891c:	e009      	b.n	8008932 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fccd 	bl	80092c0 <USBD_CtlError>
          break;
 8008926:	e004      	b.n	8008932 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fcc8 	bl	80092c0 <USBD_CtlError>
          break;
 8008930:	e000      	b.n	8008934 <USBD_StdItfReq+0x7c>
          break;
 8008932:	bf00      	nop
      }
      break;
 8008934:	e004      	b.n	8008940 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fcc1 	bl	80092c0 <USBD_CtlError>
      break;
 800893e:	bf00      	nop
  }

  return ret;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	889b      	ldrh	r3, [r3, #4]
 800895c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d007      	beq.n	800897a <USBD_StdEPReq+0x30>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	f200 8145 	bhi.w	8008bfa <USBD_StdEPReq+0x2b0>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00c      	beq.n	800898e <USBD_StdEPReq+0x44>
 8008974:	2b20      	cmp	r3, #32
 8008976:	f040 8140 	bne.w	8008bfa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
      break;
 800898c:	e13a      	b.n	8008c04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b03      	cmp	r3, #3
 8008994:	d007      	beq.n	80089a6 <USBD_StdEPReq+0x5c>
 8008996:	2b03      	cmp	r3, #3
 8008998:	f300 8129 	bgt.w	8008bee <USBD_StdEPReq+0x2a4>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d07f      	beq.n	8008aa0 <USBD_StdEPReq+0x156>
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d03c      	beq.n	8008a1e <USBD_StdEPReq+0xd4>
 80089a4:	e123      	b.n	8008bee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d002      	beq.n	80089b8 <USBD_StdEPReq+0x6e>
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d016      	beq.n	80089e4 <USBD_StdEPReq+0x9a>
 80089b6:	e02c      	b.n	8008a12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <USBD_StdEPReq+0x90>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b80      	cmp	r3, #128	; 0x80
 80089c2:	d00a      	beq.n	80089da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f905 	bl	8009bd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ce:	2180      	movs	r1, #128	; 0x80
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f901 	bl	8009bd8 <USBD_LL_StallEP>
 80089d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089d8:	e020      	b.n	8008a1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc6f 	bl	80092c0 <USBD_CtlError>
              break;
 80089e2:	e01b      	b.n	8008a1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	885b      	ldrh	r3, [r3, #2]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10e      	bne.n	8008a0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <USBD_StdEPReq+0xc0>
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d008      	beq.n	8008a0a <USBD_StdEPReq+0xc0>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	88db      	ldrh	r3, [r3, #6]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 f8e7 	bl	8009bd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fd23 	bl	8009456 <USBD_CtlSendStatus>

              break;
 8008a10:	e004      	b.n	8008a1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fc53 	bl	80092c0 <USBD_CtlError>
              break;
 8008a1a:	bf00      	nop
          }
          break;
 8008a1c:	e0ec      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d002      	beq.n	8008a30 <USBD_StdEPReq+0xe6>
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d016      	beq.n	8008a5c <USBD_StdEPReq+0x112>
 8008a2e:	e030      	b.n	8008a92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <USBD_StdEPReq+0x108>
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	2b80      	cmp	r3, #128	; 0x80
 8008a3a:	d00a      	beq.n	8008a52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 f8c9 	bl	8009bd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f8c5 	bl	8009bd8 <USBD_LL_StallEP>
 8008a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a50:	e025      	b.n	8008a9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc33 	bl	80092c0 <USBD_CtlError>
              break;
 8008a5a:	e020      	b.n	8008a9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	885b      	ldrh	r3, [r3, #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11b      	bne.n	8008a9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f8cf 	bl	8009c16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fcec 	bl	8009456 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc13 	bl	80092c0 <USBD_CtlError>
              break;
 8008a9a:	e000      	b.n	8008a9e <USBD_StdEPReq+0x154>
              break;
 8008a9c:	bf00      	nop
          }
          break;
 8008a9e:	e0ab      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d002      	beq.n	8008ab2 <USBD_StdEPReq+0x168>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d032      	beq.n	8008b16 <USBD_StdEPReq+0x1cc>
 8008ab0:	e097      	b.n	8008be2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <USBD_StdEPReq+0x17e>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d004      	beq.n	8008ac8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fbfd 	bl	80092c0 <USBD_CtlError>
                break;
 8008ac6:	e091      	b.n	8008bec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da0b      	bge.n	8008ae8 <USBD_StdEPReq+0x19e>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	3310      	adds	r3, #16
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	e00b      	b.n	8008b00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc47 	bl	80093a2 <USBD_CtlSendData>
              break;
 8008b14:	e06a      	b.n	8008bec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da11      	bge.n	8008b42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	3324      	adds	r3, #36	; 0x24
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d117      	bne.n	8008b68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fbc0 	bl	80092c0 <USBD_CtlError>
                  break;
 8008b40:	e054      	b.n	8008bec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	f003 020f 	and.w	r2, r3, #15
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d104      	bne.n	8008b68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbad 	bl	80092c0 <USBD_CtlError>
                  break;
 8008b66:	e041      	b.n	8008bec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0b      	bge.n	8008b88 <USBD_StdEPReq+0x23e>
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3310      	adds	r3, #16
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	e00b      	b.n	8008ba0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <USBD_StdEPReq+0x264>
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b80      	cmp	r3, #128	; 0x80
 8008bac:	d103      	bne.n	8008bb6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e00e      	b.n	8008bd4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f84a 	bl	8009c54 <USBD_LL_IsStallEP>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e002      	b.n	8008bd4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fbe1 	bl	80093a2 <USBD_CtlSendData>
              break;
 8008be0:	e004      	b.n	8008bec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fb6b 	bl	80092c0 <USBD_CtlError>
              break;
 8008bea:	bf00      	nop
          }
          break;
 8008bec:	e004      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fb65 	bl	80092c0 <USBD_CtlError>
          break;
 8008bf6:	bf00      	nop
      }
      break;
 8008bf8:	e004      	b.n	8008c04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb5f 	bl	80092c0 <USBD_CtlError>
      break;
 8008c02:	bf00      	nop
  }

  return ret;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	2b0e      	cmp	r3, #14
 8008c32:	f200 8152 	bhi.w	8008eda <USBD_GetDescriptor+0x2ca>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBD_GetDescriptor+0x2c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008cad 	.word	0x08008cad
 8008c40:	08008cc5 	.word	0x08008cc5
 8008c44:	08008d05 	.word	0x08008d05
 8008c48:	08008edb 	.word	0x08008edb
 8008c4c:	08008edb 	.word	0x08008edb
 8008c50:	08008e7b 	.word	0x08008e7b
 8008c54:	08008ea7 	.word	0x08008ea7
 8008c58:	08008edb 	.word	0x08008edb
 8008c5c:	08008edb 	.word	0x08008edb
 8008c60:	08008edb 	.word	0x08008edb
 8008c64:	08008edb 	.word	0x08008edb
 8008c68:	08008edb 	.word	0x08008edb
 8008c6c:	08008edb 	.word	0x08008edb
 8008c70:	08008edb 	.word	0x08008edb
 8008c74:	08008c79 	.word	0x08008c79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c9a:	e126      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb0e 	bl	80092c0 <USBD_CtlError>
        err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8008caa:	e11e      	b.n	8008eea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
      break;
 8008cc2:	e112      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	7c1b      	ldrb	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10d      	bne.n	8008ce8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd4:	f107 0208 	add.w	r2, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ce6:	e100      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	f107 0208 	add.w	r2, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	2202      	movs	r2, #2
 8008d00:	701a      	strb	r2, [r3, #0]
      break;
 8008d02:	e0f2      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	f200 80ac 	bhi.w	8008e68 <USBD_GetDescriptor+0x258>
 8008d10:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <USBD_GetDescriptor+0x108>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d99 	.word	0x08008d99
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008e01 	.word	0x08008e01
 8008d2c:	08008e35 	.word	0x08008e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d52:	e091      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fab2 	bl	80092c0 <USBD_CtlError>
            err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
          break;
 8008d62:	e089      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c12      	ldrb	r2, [r2, #16]
 8008d7c:	f107 0108 	add.w	r1, r7, #8
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d86:	e077      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa98 	bl	80092c0 <USBD_CtlError>
            err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
          break;
 8008d96:	e06f      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dba:	e05d      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa7e 	bl	80092c0 <USBD_CtlError>
            err++;
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dca:	e055      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	7c12      	ldrb	r2, [r2, #16]
 8008de4:	f107 0108 	add.w	r1, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dee:	e043      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa64 	bl	80092c0 <USBD_CtlError>
            err++;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dfe:	e03b      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7c12      	ldrb	r2, [r2, #16]
 8008e18:	f107 0108 	add.w	r1, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e22:	e029      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa4a 	bl	80092c0 <USBD_CtlError>
            err++;
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	72fb      	strb	r3, [r7, #11]
          break;
 8008e32:	e021      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e56:	e00f      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa30 	bl	80092c0 <USBD_CtlError>
            err++;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	3301      	adds	r3, #1
 8008e64:	72fb      	strb	r3, [r7, #11]
          break;
 8008e66:	e007      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa28 	bl	80092c0 <USBD_CtlError>
          err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008e76:	bf00      	nop
      }
      break;
 8008e78:	e037      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7c1b      	ldrb	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	f107 0208 	add.w	r2, r7, #8
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4798      	blx	r3
 8008e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e94:	e029      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa11 	bl	80092c0 <USBD_CtlError>
        err++;
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea4:	e021      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7c1b      	ldrb	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10d      	bne.n	8008eca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	f107 0208 	add.w	r2, r7, #8
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4798      	blx	r3
 8008ebe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ec8:	e00f      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f9f7 	bl	80092c0 <USBD_CtlError>
        err++;
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed8:	e007      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9ef 	bl	80092c0 <USBD_CtlError>
      err++;
 8008ee2:	7afb      	ldrb	r3, [r7, #11]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee8:	bf00      	nop
  }

  if (err != 0U)
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d11e      	bne.n	8008f2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	88db      	ldrh	r3, [r3, #6]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d016      	beq.n	8008f26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ef8:	893b      	ldrh	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88da      	ldrh	r2, [r3, #6]
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	bf28      	it	cs
 8008f08:	4613      	movcs	r3, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f0e:	893b      	ldrh	r3, [r7, #8]
 8008f10:	461a      	mov	r2, r3
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa44 	bl	80093a2 <USBD_CtlSendData>
 8008f1a:	e009      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9ce 	bl	80092c0 <USBD_CtlError>
 8008f24:	e004      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa95 	bl	8009456 <USBD_CtlSendStatus>
 8008f2c:	e000      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    return;
 8008f2e:	bf00      	nop
  }
}
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop

08008f38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	889b      	ldrh	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d131      	bne.n	8008fae <USBD_SetAddress+0x76>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88db      	ldrh	r3, [r3, #6]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d12d      	bne.n	8008fae <USBD_SetAddress+0x76>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	2b7f      	cmp	r3, #127	; 0x7f
 8008f58:	d829      	bhi.n	8008fae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d104      	bne.n	8008f7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f9a3 	bl	80092c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7a:	e01d      	b.n	8008fb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7bfa      	ldrb	r2, [r7, #15]
 8008f80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fe90 	bl	8009cae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa61 	bl	8009456 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa2:	e009      	b.n	8008fb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fac:	e004      	b.n	8008fb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f985 	bl	80092c0 <USBD_CtlError>
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	; (8009108 <USBD_SetConfig+0x148>)
 8008fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fd8:	4b4b      	ldr	r3, [pc, #300]	; (8009108 <USBD_SetConfig+0x148>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d905      	bls.n	8008fec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f96c 	bl	80092c0 <USBD_CtlError>
    return USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e088      	b.n	80090fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d002      	beq.n	8008ffe <USBD_SetConfig+0x3e>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d025      	beq.n	8009048 <USBD_SetConfig+0x88>
 8008ffc:	e071      	b.n	80090e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ffe:	4b42      	ldr	r3, [pc, #264]	; (8009108 <USBD_SetConfig+0x148>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01c      	beq.n	8009040 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009006:	4b40      	ldr	r3, [pc, #256]	; (8009108 <USBD_SetConfig+0x148>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009010:	4b3d      	ldr	r3, [pc, #244]	; (8009108 <USBD_SetConfig+0x148>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff f992 	bl	8008340 <USBD_SetClassConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f949 	bl	80092c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800902e:	e065      	b.n	80090fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa10 	bl	8009456 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2203      	movs	r2, #3
 800903a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800903e:	e05d      	b.n	80090fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa08 	bl	8009456 <USBD_CtlSendStatus>
      break;
 8009046:	e059      	b.n	80090fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009048:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <USBD_SetConfig+0x148>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d112      	bne.n	8009076 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009058:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <USBD_SetConfig+0x148>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009062:	4b29      	ldr	r3, [pc, #164]	; (8009108 <USBD_SetConfig+0x148>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff f985 	bl	8008378 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9f1 	bl	8009456 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009074:	e042      	b.n	80090fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009076:	4b24      	ldr	r3, [pc, #144]	; (8009108 <USBD_SetConfig+0x148>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d02a      	beq.n	80090da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f973 	bl	8008378 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009092:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <USBD_SetConfig+0x148>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800909c:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <USBD_SetConfig+0x148>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff f94c 	bl	8008340 <USBD_SetClassConfig>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00f      	beq.n	80090d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f903 	bl	80092c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff f958 	bl	8008378 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090d0:	e014      	b.n	80090fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9bf 	bl	8009456 <USBD_CtlSendStatus>
      break;
 80090d8:	e010      	b.n	80090fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9bb 	bl	8009456 <USBD_CtlSendStatus>
      break;
 80090e0:	e00c      	b.n	80090fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f8eb 	bl	80092c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ea:	4b07      	ldr	r3, [pc, #28]	; (8009108 <USBD_SetConfig+0x148>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff f941 	bl	8008378 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
      break;
 80090fa:	bf00      	nop
  }

  return ret;
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200001cf 	.word	0x200001cf

0800910c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	88db      	ldrh	r3, [r3, #6]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d004      	beq.n	8009128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f8cd 	bl	80092c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009126:	e023      	b.n	8009170 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	dc02      	bgt.n	800913a <USBD_GetConfig+0x2e>
 8009134:	2b00      	cmp	r3, #0
 8009136:	dc03      	bgt.n	8009140 <USBD_GetConfig+0x34>
 8009138:	e015      	b.n	8009166 <USBD_GetConfig+0x5a>
 800913a:	2b03      	cmp	r3, #3
 800913c:	d00b      	beq.n	8009156 <USBD_GetConfig+0x4a>
 800913e:	e012      	b.n	8009166 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3308      	adds	r3, #8
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f927 	bl	80093a2 <USBD_CtlSendData>
        break;
 8009154:	e00c      	b.n	8009170 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3304      	adds	r3, #4
 800915a:	2201      	movs	r2, #1
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f91f 	bl	80093a2 <USBD_CtlSendData>
        break;
 8009164:	e004      	b.n	8009170 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8a9 	bl	80092c0 <USBD_CtlError>
        break;
 800916e:	bf00      	nop
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	b2db      	uxtb	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	2b02      	cmp	r3, #2
 800918e:	d81e      	bhi.n	80091ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d004      	beq.n	80091a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f890 	bl	80092c0 <USBD_CtlError>
        break;
 80091a0:	e01a      	b.n	80091d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f043 0202 	orr.w	r2, r3, #2
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	330c      	adds	r3, #12
 80091c2:	2202      	movs	r2, #2
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f8eb 	bl	80093a2 <USBD_CtlSendData>
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f875 	bl	80092c0 <USBD_CtlError>
      break;
 80091d6:	bf00      	nop
  }
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d106      	bne.n	8009200 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f92b 	bl	8009456 <USBD_CtlSendStatus>
  }
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	2b02      	cmp	r3, #2
 800921e:	d80b      	bhi.n	8009238 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	885b      	ldrh	r3, [r3, #2]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10c      	bne.n	8009242 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f910 	bl	8009456 <USBD_CtlSendStatus>
      }
      break;
 8009236:	e004      	b.n	8009242 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f840 	bl	80092c0 <USBD_CtlError>
      break;
 8009240:	e000      	b.n	8009244 <USBD_ClrFeature+0x3c>
      break;
 8009242:	bf00      	nop
  }
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3301      	adds	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fa92 	bl	80087a0 <SWAPBYTE>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff fa85 	bl	80087a0 <SWAPBYTE>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fa78 	bl	80087a0 <SWAPBYTE>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	80da      	strh	r2, [r3, #6]
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc83 	bl	8009bd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc7f 	bl	8009bd8 <USBD_LL_StallEP>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d036      	beq.n	8009366 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092fc:	6938      	ldr	r0, [r7, #16]
 80092fe:	f000 f836 	bl	800936e <USBD_GetLen>
 8009302:	4603      	mov	r3, r0
 8009304:	3301      	adds	r3, #1
 8009306:	b29b      	uxth	r3, r3
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4413      	add	r3, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	701a      	strb	r2, [r3, #0]
  idx++;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	3301      	adds	r3, #1
 8009320:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	4413      	add	r3, r2
 8009328:	2203      	movs	r2, #3
 800932a:	701a      	strb	r2, [r3, #0]
  idx++;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	3301      	adds	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009332:	e013      	b.n	800935c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
    idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
    idx++;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	3301      	adds	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e7      	bne.n	8009334 <USBD_GetString+0x52>
 8009364:	e000      	b.n	8009368 <USBD_GetString+0x86>
    return;
 8009366:	bf00      	nop
  }
}
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800937e:	e005      	b.n	800938c <USBD_GetLen+0x1e>
  {
    len++;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	3301      	adds	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1f5      	bne.n	8009380 <USBD_GetLen+0x12>
  }

  return len;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fc8f 	bl	8009cec <USBD_LL_Transmit>

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	2100      	movs	r1, #0
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fc7e 	bl	8009cec <USBD_LL_Transmit>

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2203      	movs	r2, #3
 800940a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	2100      	movs	r1, #0
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fc82 	bl	8009d2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	2100      	movs	r1, #0
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fc71 	bl	8009d2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2204      	movs	r2, #4
 8009462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009466:	2300      	movs	r3, #0
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc3d 	bl	8009cec <USBD_LL_Transmit>

  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2205      	movs	r2, #5
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948c:	2300      	movs	r3, #0
 800948e:	2200      	movs	r2, #0
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc4b 	bl	8009d2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80094a8:	2200      	movs	r2, #0
 80094aa:	4912      	ldr	r1, [pc, #72]	; (80094f4 <MX_USB_Device_Init+0x50>)
 80094ac:	4812      	ldr	r0, [pc, #72]	; (80094f8 <MX_USB_Device_Init+0x54>)
 80094ae:	f7fe fed9 	bl	8008264 <USBD_Init>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80094b8:	f7f7 fb50 	bl	8000b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80094bc:	490f      	ldr	r1, [pc, #60]	; (80094fc <MX_USB_Device_Init+0x58>)
 80094be:	480e      	ldr	r0, [pc, #56]	; (80094f8 <MX_USB_Device_Init+0x54>)
 80094c0:	f7fe ff00 	bl	80082c4 <USBD_RegisterClass>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80094ca:	f7f7 fb47 	bl	8000b5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80094ce:	490c      	ldr	r1, [pc, #48]	; (8009500 <MX_USB_Device_Init+0x5c>)
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <MX_USB_Device_Init+0x54>)
 80094d2:	f7fe fe21 	bl	8008118 <USBD_CDC_RegisterInterface>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80094dc:	f7f7 fb3e 	bl	8000b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <MX_USB_Device_Init+0x54>)
 80094e2:	f7fe ff16 	bl	8008312 <USBD_Start>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80094ec:	f7f7 fb36 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80094f0:	bf00      	nop
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20000154 	.word	0x20000154
 80094f8:	20000668 	.word	0x20000668
 80094fc:	2000003c 	.word	0x2000003c
 8009500:	20000140 	.word	0x20000140

08009504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	4905      	ldr	r1, [pc, #20]	; (8009520 <CDC_Init_FS+0x1c>)
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <CDC_Init_FS+0x20>)
 800950e:	f7fe fe18 	bl	8008142 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009512:	4905      	ldr	r1, [pc, #20]	; (8009528 <CDC_Init_FS+0x24>)
 8009514:	4803      	ldr	r0, [pc, #12]	; (8009524 <CDC_Init_FS+0x20>)
 8009516:	f7fe fe32 	bl	800817e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800951a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800951c:	4618      	mov	r0, r3
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000d20 	.word	0x20000d20
 8009524:	20000668 	.word	0x20000668
 8009528:	20000938 	.word	0x20000938

0800952c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009532:	4618      	mov	r0, r3
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	6039      	str	r1, [r7, #0]
 8009546:	71fb      	strb	r3, [r7, #7]
 8009548:	4613      	mov	r3, r2
 800954a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b23      	cmp	r3, #35	; 0x23
 8009550:	d84a      	bhi.n	80095e8 <CDC_Control_FS+0xac>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <CDC_Control_FS+0x1c>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	080095e9 	.word	0x080095e9
 800955c:	080095e9 	.word	0x080095e9
 8009560:	080095e9 	.word	0x080095e9
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095e9 	.word	0x080095e9
 800956c:	080095e9 	.word	0x080095e9
 8009570:	080095e9 	.word	0x080095e9
 8009574:	080095e9 	.word	0x080095e9
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095e9 	.word	0x080095e9
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095e9 	.word	0x080095e9
 800958c:	080095e9 	.word	0x080095e9
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095e9 	.word	0x080095e9
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095e9 	.word	0x080095e9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
 80095b4:	080095e9 	.word	0x080095e9
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095e9 	.word	0x080095e9
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080095e9 	.word	0x080095e9
 80095d8:	080095e9 	.word	0x080095e9
 80095dc:	080095e9 	.word	0x080095e9
 80095e0:	080095e9 	.word	0x080095e9
 80095e4:	080095e9 	.word	0x080095e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095e8:	bf00      	nop
  }

  return (USBD_OK);
 80095ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7f6 fe07 	bl	8000218 <CDC_On_Receive>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <CDC_Receive_FS+0x2c>)
 800960e:	f7fe fdb6 	bl	800817e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009612:	4804      	ldr	r0, [pc, #16]	; (8009624 <CDC_Receive_FS+0x2c>)
 8009614:	f7fe fdfc 	bl	8008210 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009618:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000668 	.word	0x20000668

08009628 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <CDC_Transmit_FS+0x48>)
 800963a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800963e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800964a:	2301      	movs	r3, #1
 800964c:	e00b      	b.n	8009666 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800964e:	887b      	ldrh	r3, [r7, #2]
 8009650:	461a      	mov	r2, r3
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4806      	ldr	r0, [pc, #24]	; (8009670 <CDC_Transmit_FS+0x48>)
 8009656:	f7fe fd74 	bl	8008142 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <CDC_Transmit_FS+0x48>)
 800965c:	f7fe fda8 	bl	80081b0 <USBD_CDC_TransmitPacket>
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000668 	.word	0x20000668

08009674 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2212      	movs	r2, #18
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20000174 	.word	0x20000174

080096bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2204      	movs	r2, #4
 80096cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20000188 	.word	0x20000188

080096e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4907      	ldr	r1, [pc, #28]	; (8009714 <USBD_CDC_ProductStrDescriptor+0x34>)
 80096f6:	4808      	ldr	r0, [pc, #32]	; (8009718 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096f8:	f7ff fdf3 	bl	80092e2 <USBD_GetString>
 80096fc:	e004      	b.n	8009708 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4904      	ldr	r1, [pc, #16]	; (8009714 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009704:	f7ff fded 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20001108 	.word	0x20001108
 8009718:	08009f24 	.word	0x08009f24

0800971c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4904      	ldr	r1, [pc, #16]	; (800973c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800972c:	4804      	ldr	r0, [pc, #16]	; (8009740 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800972e:	f7ff fdd8 	bl	80092e2 <USBD_GetString>
  return USBD_StrDesc;
 8009732:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20001108 	.word	0x20001108
 8009740:	08009f3c 	.word	0x08009f3c

08009744 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	221a      	movs	r2, #26
 8009754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009756:	f000 f843 	bl	80097e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800975a:	4b02      	ldr	r3, [pc, #8]	; (8009764 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	2000018c 	.word	0x2000018c

08009768 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	; (800979c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009780:	f7ff fdaf 	bl	80092e2 <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800978c:	f7ff fda9 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20001108 	.word	0x20001108
 80097a0:	08009f50 	.word	0x08009f50

080097a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4907      	ldr	r1, [pc, #28]	; (80097d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80097ba:	4808      	ldr	r0, [pc, #32]	; (80097dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80097bc:	f7ff fd91 	bl	80092e2 <USBD_GetString>
 80097c0:	e004      	b.n	80097cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4904      	ldr	r1, [pc, #16]	; (80097d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80097c6:	4805      	ldr	r0, [pc, #20]	; (80097dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80097c8:	f7ff fd8b 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20001108 	.word	0x20001108
 80097dc:	08009f5c 	.word	0x08009f5c

080097e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <Get_SerialNum+0x44>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <Get_SerialNum+0x48>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <Get_SerialNum+0x4c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009806:	2208      	movs	r2, #8
 8009808:	4909      	ldr	r1, [pc, #36]	; (8009830 <Get_SerialNum+0x50>)
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f814 	bl	8009838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009810:	2204      	movs	r2, #4
 8009812:	4908      	ldr	r1, [pc, #32]	; (8009834 <Get_SerialNum+0x54>)
 8009814:	68b8      	ldr	r0, [r7, #8]
 8009816:	f000 f80f 	bl	8009838 <IntToUnicode>
  }
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	1fff7590 	.word	0x1fff7590
 8009828:	1fff7594 	.word	0x1fff7594
 800982c:	1fff7598 	.word	0x1fff7598
 8009830:	2000018e 	.word	0x2000018e
 8009834:	2000019e 	.word	0x2000019e

08009838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]
 800984e:	e027      	b.n	80098a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0f1b      	lsrs	r3, r3, #28
 8009854:	2b09      	cmp	r3, #9
 8009856:	d80b      	bhi.n	8009870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0f1b      	lsrs	r3, r3, #28
 800985c:	b2da      	uxtb	r2, r3
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4619      	mov	r1, r3
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	440b      	add	r3, r1
 8009868:	3230      	adds	r2, #48	; 0x30
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	e00a      	b.n	8009886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0f1b      	lsrs	r3, r3, #28
 8009874:	b2da      	uxtb	r2, r3
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4619      	mov	r1, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	440b      	add	r3, r1
 8009880:	3237      	adds	r2, #55	; 0x37
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	3301      	adds	r3, #1
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	3301      	adds	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]
 80098a0:	7dfa      	ldrb	r2, [r7, #23]
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d3d3      	bcc.n	8009850 <IntToUnicode+0x18>
  }
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
	...

080098b8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a0d      	ldr	r2, [pc, #52]	; (80098fc <HAL_PCD_MspInit+0x44>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d113      	bne.n	80098f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098ca:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <HAL_PCD_MspInit+0x48>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ce:	4a0c      	ldr	r2, [pc, #48]	; (8009900 <HAL_PCD_MspInit+0x48>)
 80098d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098d4:	6593      	str	r3, [r2, #88]	; 0x58
 80098d6:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <HAL_PCD_MspInit+0x48>)
 80098d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	2014      	movs	r0, #20
 80098e8:	f7f7 fcef 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80098ec:	2014      	movs	r0, #20
 80098ee:	f7f7 fd06 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40005c00 	.word	0x40005c00
 8009900:	40021000 	.word	0x40021000

08009904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7fe fd44 	bl	80083a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	4619      	mov	r1, r3
 8009952:	f7fe fd7e 	bl	8008452 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009956:	bf00      	nop
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	440b      	add	r3, r1
 800997e:	333c      	adds	r3, #60	; 0x3c
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	4619      	mov	r1, r3
 8009986:	f7fe fdc7 	bl	8008518 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800998a:	bf00      	nop
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe fedb 	bl	800875c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099b6:	2301      	movs	r3, #1
 80099b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d001      	beq.n	80099c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099c2:	f7f7 f8cb 	bl	8000b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099cc:	7bfa      	ldrb	r2, [r7, #15]
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe fe85 	bl	80086e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fe31 	bl	8008644 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fe80 	bl	8008700 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <HAL_PCD_SuspendCallback+0x30>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	4a03      	ldr	r2, [pc, #12]	; (8009a1c <HAL_PCD_SuspendCallback+0x30>)
 8009a0e:	f043 0306 	orr.w	r3, r3, #6
 8009a12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	e000ed00 	.word	0xe000ed00

08009a20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a30:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <HAL_PCD_ResumeCallback+0x34>)
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	4a07      	ldr	r2, [pc, #28]	; (8009a54 <HAL_PCD_ResumeCallback+0x34>)
 8009a36:	f023 0306 	bic.w	r3, r3, #6
 8009a3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009a3c:	f000 f9fa 	bl	8009e34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fe70 	bl	800872c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00

08009a58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009a60:	4a2b      	ldr	r2, [pc, #172]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a29      	ldr	r2, [pc, #164]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009a70:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a72:	4a28      	ldr	r2, [pc, #160]	; (8009b14 <USBD_LL_Init+0xbc>)
 8009a74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a76:	4b26      	ldr	r3, [pc, #152]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a78:	2208      	movs	r2, #8
 8009a7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a7e:	2202      	movs	r2, #2
 8009a80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a84:	2202      	movs	r2, #2
 8009a86:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a8e:	4b20      	ldr	r3, [pc, #128]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a94:	4b1e      	ldr	r3, [pc, #120]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009aa0:	481b      	ldr	r0, [pc, #108]	; (8009b10 <USBD_LL_Init+0xb8>)
 8009aa2:	f7f7 ff05 	bl	80018b0 <HAL_PCD_Init>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009aac:	f7f7 f856 	bl	8000b5c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ab6:	2318      	movs	r3, #24
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2100      	movs	r1, #0
 8009abc:	f7f9 fb1f 	bl	80030fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ac6:	2358      	movs	r3, #88	; 0x58
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2180      	movs	r1, #128	; 0x80
 8009acc:	f7f9 fb17 	bl	80030fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ad6:	23c0      	movs	r3, #192	; 0xc0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2181      	movs	r1, #129	; 0x81
 8009adc:	f7f9 fb0f 	bl	80030fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ae6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009aea:	2200      	movs	r2, #0
 8009aec:	2101      	movs	r1, #1
 8009aee:	f7f9 fb06 	bl	80030fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afc:	2200      	movs	r2, #0
 8009afe:	2182      	movs	r1, #130	; 0x82
 8009b00:	f7f9 fafd 	bl	80030fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20001308 	.word	0x20001308
 8009b14:	40005c00 	.word	0x40005c00

08009b18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7f7 ffa3 	bl	8001a7a <HAL_PCD_Start>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f980 	bl	8009e40 <USBD_Get_USB_Status>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	70fb      	strb	r3, [r7, #3]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70bb      	strb	r3, [r7, #2]
 8009b64:	4613      	mov	r3, r2
 8009b66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b76:	78bb      	ldrb	r3, [r7, #2]
 8009b78:	883a      	ldrh	r2, [r7, #0]
 8009b7a:	78f9      	ldrb	r1, [r7, #3]
 8009b7c:	f7f8 f912 	bl	8001da4 <HAL_PCD_EP_Open>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f95a 	bl	8009e40 <USBD_Get_USB_Status>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bb4:	78fa      	ldrb	r2, [r7, #3]
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7f8 f959 	bl	8001e70 <HAL_PCD_EP_Close>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f93b 	bl	8009e40 <USBD_Get_USB_Status>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bf2:	78fa      	ldrb	r2, [r7, #3]
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7f8 fa1a 	bl	8002030 <HAL_PCD_EP_SetStall>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f91c 	bl	8009e40 <USBD_Get_USB_Status>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c30:	78fa      	ldrb	r2, [r7, #3]
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7f8 fa4d 	bl	80020d4 <HAL_PCD_EP_ClrStall>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 f8fd 	bl	8009e40 <USBD_Get_USB_Status>
 8009c46:	4603      	mov	r3, r0
 8009c48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da0c      	bge.n	8009c8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	440b      	add	r3, r1
 8009c84:	3302      	adds	r3, #2
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	e00b      	b.n	8009ca2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c90:	68f9      	ldr	r1, [r7, #12]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ca0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f8 f844 	bl	8001d5a <HAL_PCD_SetAddress>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f8b1 	bl	8009e40 <USBD_Get_USB_Status>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d0a:	7af9      	ldrb	r1, [r7, #11]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	f7f8 f94b 	bl	8001faa <HAL_PCD_EP_Transmit>
 8009d14:	4603      	mov	r3, r0
 8009d16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f890 	bl	8009e40 <USBD_Get_USB_Status>
 8009d20:	4603      	mov	r3, r0
 8009d22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d24:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d4c:	7af9      	ldrb	r1, [r7, #11]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f7f8 f8d5 	bl	8001f00 <HAL_PCD_EP_Receive>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f86f 	bl	8009e40 <USBD_Get_USB_Status>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7f8 f8f7 	bl	8001f7a <HAL_PCD_EP_GetRxCount>
 8009d8c:	4603      	mov	r3, r0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <HAL_PCDEx_LPM_Callback+0x18>
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d013      	beq.n	8009dd6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009dae:	e023      	b.n	8009df8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009db8:	f000 f83c 	bl	8009e34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dbc:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	4a0f      	ldr	r2, [pc, #60]	; (8009e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc2:	f023 0306 	bic.w	r3, r3, #6
 8009dc6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fcac 	bl	800872c <USBD_LL_Resume>
    break;
 8009dd4:	e010      	b.n	8009df8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe fc8f 	bl	8008700 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dea:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	4a04      	ldr	r2, [pc, #16]	; (8009e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8009df0:	f043 0306 	orr.w	r3, r3, #6
 8009df4:	6113      	str	r3, [r2, #16]
    break;
 8009df6:	bf00      	nop
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	e000ed00 	.word	0xe000ed00

08009e04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e0c:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <USBD_static_malloc+0x18>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	200001d0 	.word	0x200001d0

08009e20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e38:	f7f6 fad4 	bl	80003e4 <SystemClock_Config>
}
 8009e3c:	bf00      	nop
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d817      	bhi.n	8009e84 <USBD_Get_USB_Status+0x44>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USBD_Get_USB_Status+0x1c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e73 	.word	0x08009e73
 8009e64:	08009e79 	.word	0x08009e79
 8009e68:	08009e7f 	.word	0x08009e7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e70:	e00b      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	73fb      	strb	r3, [r7, #15]
    break;
 8009e76:	e008      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7c:	e005      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	73fb      	strb	r3, [r7, #15]
    break;
 8009e82:	e002      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	73fb      	strb	r3, [r7, #15]
    break;
 8009e88:	bf00      	nop
  }
  return usb_status;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <__libc_init_array>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ed0 <__libc_init_array+0x38>)
 8009e9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ed4 <__libc_init_array+0x3c>)
 8009e9e:	1b64      	subs	r4, r4, r5
 8009ea0:	10a4      	asrs	r4, r4, #2
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	d109      	bne.n	8009ebc <__libc_init_array+0x24>
 8009ea8:	4d0b      	ldr	r5, [pc, #44]	; (8009ed8 <__libc_init_array+0x40>)
 8009eaa:	4c0c      	ldr	r4, [pc, #48]	; (8009edc <__libc_init_array+0x44>)
 8009eac:	f000 f82e 	bl	8009f0c <_init>
 8009eb0:	1b64      	subs	r4, r4, r5
 8009eb2:	10a4      	asrs	r4, r4, #2
 8009eb4:	2600      	movs	r6, #0
 8009eb6:	42a6      	cmp	r6, r4
 8009eb8:	d105      	bne.n	8009ec6 <__libc_init_array+0x2e>
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec0:	4798      	blx	r3
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	e7ee      	b.n	8009ea4 <__libc_init_array+0xc>
 8009ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eca:	4798      	blx	r3
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7f2      	b.n	8009eb6 <__libc_init_array+0x1e>
 8009ed0:	08009f7c 	.word	0x08009f7c
 8009ed4:	08009f7c 	.word	0x08009f7c
 8009ed8:	08009f7c 	.word	0x08009f7c
 8009edc:	08009f80 	.word	0x08009f80

08009ee0 <memcpy>:
 8009ee0:	440a      	add	r2, r1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ee8:	d100      	bne.n	8009eec <memcpy+0xc>
 8009eea:	4770      	bx	lr
 8009eec:	b510      	push	{r4, lr}
 8009eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef6:	4291      	cmp	r1, r2
 8009ef8:	d1f9      	bne.n	8009eee <memcpy+0xe>
 8009efa:	bd10      	pop	{r4, pc}

08009efc <memset>:
 8009efc:	4402      	add	r2, r0
 8009efe:	4603      	mov	r3, r0
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d100      	bne.n	8009f06 <memset+0xa>
 8009f04:	4770      	bx	lr
 8009f06:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0a:	e7f9      	b.n	8009f00 <memset+0x4>

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
